// Generic confirmation (Confirm? [yes/ok/delete, cancel])
confirm = "Onayla?";
// Answer to a question (Are you sure you want to do that? [yes, cancel])
confirm.yes = "Evet";
// Answer to a question (Are you sure you want to do that? [yes, no, cancel])
confirm.no = "Hayır";
// The generic ok in a confirm box (The next operation is dangerous. [ok, cancel])
confirm.ok = "Tamam";
// Cancel something after being asked (Question? [answer, cancel])
confirm.cancel = "Vazgeç";

// Experimental feature
experimental = "Deneysel!";

status.exit = "Kaydedilmemiş değişiklikler! Kapatmadan önce kaydetmek ister misiniz?";
status.exit.yes = "Kaydet";
status.exit.no = "Kaydetme";

// On single tap (should be short)
ontap = "Dokunuşta";

all = "Tümü";
error = "Hata";

reset = "Sıfırla";
resetOrder = "Sıralamasını sıfırla";

clipboard = "Pano";
clipboard.copy = "Kopyala";
clipboard.paste = "Yapıştır";

// memory size
bytes = "bayt";
kB = "kB";
MB = "MB";
GB = "GB";
TB = "TB";

// Noun
instance = "Örneklendirmek";
object = "Nesne";

// Same value (usually for axis, e.g: x == y == z)
uniform = "Düzenli";

sync = "Senkronize";

// position
position.top = "Üst";
position.bottom = "Alt";
position.left = "Sol";
position.right = "Sağ";
position.center = "Ortalanmış";
// direction
direction.up = "Üst";
direction.down = "Alt";
direction.left = "Sol";
direction.right = "Sağ";
// 3d cube
cube.top = "Üst";
cube.bottom = "Alt";
cube.left = "Sol";
cube.right = "Sağ";
cube.front = "Ön";
cube.back = "Arka";

// Name of an item (object, tool, etc)
item.name = "İsim";
// Add a new item (object, tool, etc)
item.new = "Yeni";
// Rename an item (object, tool, etc)
item.rename = "Yeniden Adlandır";
// Add a new item (object, tool, project, etc)
item.add = "Ekle";
// Update an item image with a new image (synonym: Update)
item.replace = "Değiştir";
// Save an item (object, tool, etc)
item.save = "Kaydet";
item.save.confirm = "Kaydedilsin mi?";
// Update an item (update camera view point, etc)
item.update = "Güncelleme";
// Reload last save of an item (object, tool, etc)
item.lastSave = "Son kaydetme";
// Reload last save of an item (object, tool, etc)
item.lastSave.confirm = "Son kayıt yüklensin mi?";
// Reset an item to its initial value (object, tool, etc)
item.reset = "Sıfırla";
item.reset.confirm = "Sıfırlansın mı?";
// Make an item instance, similar to clone but keeps the underlying geometry (Synonym: link? soft clone?)
item.instance = "Örneklendirmek";
// Uninstance the object, make the object real
item.uninstance = "Örneklemeyi kaldır";
// Clone an item (object, tool, etc)
item.clone = "Klonlama";
// Delete an item (object, tool, etc)
item.delete = "Sil";
item.delete.confirm = "Silinsin mi?";
item.delete.confirm.yes = "Evet, sil";
// When we delete the item but the image is used somewhere
item.delete.used = "Kullanılan resim";
// Convert the item type (mesh, light) to a simple Node type
item.toNode = "Düğüme";
// Item visibility (object, layer, etc)
item.visible = "Görülebilir";
// Show an item (object, layer, etc)
item.show = "Göster";
// Hide an item (object, layer, etc)
item.hide = "Gizle";
// Select an item (object, layer, etc)
item.select = "Seç";
// Unselect an item (object, layer, etc)
item.unselect = "Seçimi kaldır";
// Merge an item with another one below (layer)
item.mergeDown = "Aşağı birleştir";
// The order of an item in a list
item.order = "Sıra";
// Focus on previous item
item.previous = "Önceki";
// Focus on next item
item.next = "Sonraki";
// The item is locked (either it cannot be selected, edited, or we preserve its details)
item.lock = "Kilitle";
// No item selected
item.none = "Yok";

// Search something (text entry to filter item)
search = "Arama";

// Three-state toggle button (Auto, Off, On)
toggle.on = "Açık";
// Three-state toggle button (Auto, Off, On)
toggle.off = "Kapalı";
// Three-state toggle button (Auto, Off, On)
toggle.auto = "Otomatik";

// When you launch the app and we need to reprocess some resource thumbnails
loading.reprocess = "Küçük resimler eksik, dosyalar yeniden işleniyor...";
loading.reprocess.cancel = "Küçük resim oluşturma atlanılsın mı?";

access.title = "Erişilebilirlik";
access.window = "Yardımcı pencere";
access.pinch = "Kıstır";
access.drag = "Sürükle";
access.rotate = "Döndür";
access.roll = "Rulo";

// Color of an object
material.color = "Renk";
// Defines how blurry or sharp the reflection on a material is (opposite of glossiness)
material.roughness = "Pürüzlük";
// Defines how blurry or sharp the reflection on a material is (opposite of roughness)
material.glossiness = "Parlaklık";
// Whether the material is a metal or not
material.metalness = "Metaliklik seviyesi";
// How much light a surface will reflect
material.specular = "Yansıtıcı";
// Light that the surface can emit (glow)
material.emissive = "Yayıcı";
// Normal map (synonym: detail, bump)
material.normal = "Normal";
// flip y coordinate
material.normal.flipY = "Y'yi Ters Çevir";
// Ambient Occlusion (AO)
material.occlusion = "Emilim";
// Textures, basically images wrapped on models (synonym: Maps, Texture maps)
material.textures = "Doku";
// Textures/Image
material.texture = "Doku";
// A warning indicating that the mesh has no UVs
material.warningNoUVs = "UV yok!";
// Texture filtering https://en.wikipedia.org/wiki/Texture_filtering
material.texture.filter = "Filtreleme";
// Nearest Filtering (closest sample)
material.texture.nearest = "En Yakın";
// Bilinear Filter
material.texture.linear = "Doğrusal";
// Mipmap filtering
material.texture.mipmap = "Mipmap";
// Triplanar mapping
material.projection = "Projeksiyon";
material.projection.triplanar = "Üç düzlemli";

// Prefer low power
about.lowPower = "Düşük güç tüketen GPU";
about.lowPower.confirm = "Bu değeri değiştirdikten sonra, Nomad'ı yeniden başlatmanız gerekiyor.";
// Wintab wacom API
about.wintab = "WinTab'ı Kullanın";
about.wintab.help = "WinTab etkinse, Wacom ayarlarında Windows Ink'i muhtemelen devre dışı bırakmalısınız.<br><br>Benzer şekilde, WinTab devre dışıysa, Windows Ink Wacom ayarlarında etkinleştirilmelidir.";
// Prefer low power
about.fullScreen = "Tam Ekran";
// Minify
about.minify = "Kullanıcı arayüzünü küçült";
about.minify.help = "Cihazınız destekliyorsa, ekranınıza 4 parmağınızla da dokunabilirsiniz.";
// Turntable will rotate the whole scene on itself (as it if was on a turntable)
about.turntable = "Döner platform";
// Rotation center of the turntable
about.turntable.pivot = "Dönüş merkezi";
// Keep current pivot
about.turntable.pivot.keep = "Mevcut olanı koru";
// Turntable pivot will be at the center of the scene
about.turntable.pivot.scene = "Görünüm";
// Make the entire scene turn around (speed of the animation)
about.turntable.speed = "Hız";
// Stuffs that I used to make the app
about.credits = "Katkıda bulunanlar";
// Link to open source projects that I used for the app
about.credits.openSource = "Açık kaynak";
// Only translate the &
about.credits.arts = "MatCap'ler ve HDRI'ler";
// Change languages of the app
about.languages = "Diller";
about.languages.help = "Çeviri dosyalarına $0 adresinden ulaşılabilir";
// Link to the App Website
about.website = "Web sitesi";
// Link to the App Forum
about.forum = "Forum";
// Link to the App Manual
about.manual = "Kılavuz";
// Link to the App Email
about.mail = "Destek";
// Link to the App Twitter account
about.twitter = "Twitter";
// Link to the App Instagram account
about.instagram = "Instagram";
// Link to the App Facebook account
about.facebook = "Facebook";
// Link to the App Discord account
about.discord = "Uyuşmazlık";
// Link to the App Threads account
about.threads = "Threads";

// The user canceled an operation that was running
alert.aborted = "İşlem iptal edildi!";
// Error when an algorithm needs the object to have an hole (usually to fill it)
alert.hole.nothing = "Nesnenin hiç deliği yok!";
// No operation occured because the mesh is already manifold
alert.manifold.already = "Mesh zaten manifold!";
// Visibility of the object is off (but should be on)
alert.shape.notVisible = "Geçerli nesne görülemez!";
// The user tried to trim an object but the selected region didn't touch the object
alert.trim.nothing = "Kırpılacak bir şey yok.";
// The user tried to trim an object but the selected region completely encompassed the object
alert.trim.full = "Kırpma bırakıldı: nesne tamamen kırpıldı.";
// In order to extract something, the mesh needs to have painted mask
alert.extract.none = "Çıkarılacak bir şey yok!";
// In order to split something, the mesh needs to have painted mask
alert.extract.split.none = "Ayrılacak bir şey yok!";
// List of disabled features when View Mode is selected
alert.view.disabled = "Görünüm Modunda devre dışı kalan özellikler:";
// Primitive Widgets are small ui stuffs in the viewport that the user can interact with to modify an object
alert.view.disabled.widgetPrimitive = "Primitif araçlar";
// The object needs to have two parts disconnected
alert.separate.fail = "Ayrılamadı: nesnenin sadece bir parçası var!";
// Remesh is when you create a new topology (mesh) on an object
alert.voxelRemesh.success = "Yeniden ağ örgülendirildi!";
alert.voxelRemesh.empty = "Yeniden ağ örgülendirme durduruldu: sonuç ağ örgüsünde hiç yüz yok.";
// Should not happen or very rarely, input here is an object
alert.voxelRemesh.invalidInput = "Geçersiz girdi!";
// Helper popup to tell the users the object will cloned
alert.matrix.clone = "Nesne çoğaltılacak";
// Helper popup to tell the users the object will cloned
alert.matrix.instance = "Nesnenin örneği oluşturulacak";
// A pivot refers the gizmo 3d position, this mode means we are moving the pivot
alert.gizmo.editPivot = "Eksen modunu düzenle.";
alert.mask.full = "Maskele = 100%!";
// A pivot refers the gizmo 3d position
alert.gizmo.editObject = "Nesne modunu düzenle.";
// See Glossary (DynTopo)
alert.dynamic.enable = "Dinamik topoloji aktif";
// See Glossary (DynTopo)
alert.dynamic.disable = "Dinamik topoloji devre dışı";
alert.colorPicker = "Bir renk seçmek için parmağınızı nesnenin üzerinde sürükleyin.";
// Transform mode is when the user can move the reference (image in the background) with its two fingers
alert.backgroundTransform = "Dönüştürme modundan çıkmak için basitçe dokun.";
// Edit the symmetry plane with the gizmo
alert.editSymmetry = "Düzenleme simetrisi modundan çıkmak için basitçe dokunun.";
// Show the painted mask on the mesh
alert.mask.show = "Maskeyi göster";
// Hide the painted mask on the mesh
alert.mask.hide = "Maskeyi gizle";
// Selection refers to the objects that are currently selected
alert.selection.lock = "Seçimi kilitle";
// Selection refers to the objects that are currently selected
alert.selection.unlock = "Seçimin kilidini aç";
// Hide the objects that are not selected
alert.selection.isolate = "Seçimi soyutla";
// Show the objects that are hidden
alert.selection.showAll = "Tümünü göster";
// Project quick saving
alert.quickSave = "Kaydediliyor...";
// Painting on the object was hidden but the user did paint the object
alert.forcePainting.fill = "Boyamayı gösterme etkin, [Tümünü boya] kullanıldı.";
// Painting on the object was hidden but the user started to paint on the object
alert.forcePainting.tool = "Boyamayı gösterme etkin, nesne boyandı.";
// See Glossary (Multiresolution)
alert.multiresLost = "Çoklu çözünürlük kaybolacak!";
// Boolean cut mode will ignore some features
alert.booleanIgnored = "Boolean, maskeleme veya gizleme alanlarını göz ardı edecek!";
// The user is starting an operation that can lead to a crash
alert.range.warning = "Detay değeri yüksek ve çok bellek gerektirebilir!";
// Autosave popup
alert.autoSave.auto = "$0s içinde otomatik kaydedilecek...";
// The selected object doesn't have any layers
alert.needLayer = "Geçerli araç için etkin bir katman gerekli.";
// The user decided to hide the painting on the objects
alert.paintingHidden = "Boyama gizli!";
// The user decided to hide the masking on the objects
alert.maskingHidden = "Maske gizlendi!";
// The user decided to display hidden faces
alert.hideIgnored = "Gizleme yok sayıldı!";
// The selected object doesn't have any layers
alert.noPartialWireframe = "Genel taslak görüntülendiğinde kısmi çizim devre dışı kalır.";
// The user has selected a tool that is more intuitive to use when the camera is in orthographic mode
alert.shapeOrthographic = "Ekran projektörü kullanırken perspektif bozulmalarından kaçınmak isterseniz, ortografik kamera kullanımını değerlendirin.";
// Trial version has a limited number of undo
alert.state.trial = "Deneme sürümü: geri al iptal edildi";

background = "Arka Plan";
// A flat color will be displayed in the background of the scene
background.color = "Renk";
// 2 color with rotation
background.gradient = "Gradyanı";
// The environment (HDRI) will be displayed in the background
background.environment = "Ortam";
background.blur = "Bulanıklık";
background.exposure = "Pozlandırma";

// Image that the artist uses as a reference
background.imageEnable = "Referans görüntüsü";
// The image will be displayed in overlay (used as a reference by the artist)
background.imageOverlay = "Kaplama";
// Opposite of transparency (Alpha)
background.imageAlpha = "Opaklık";
background.imageReset = "Ayarları sıfırla";
background.imageTransform = "Dönüştür";
// X screen coordinate of the image reference
background.imageX = "X Konumu";
// Y screen coordinate of the image reference
background.imageY = "Y Konumu";
// Rotation of the reference image
background.imageRotation = "Döndürme";
// Scale of the reference image
background.imageScale = "Ölçek";
// Auto adjust the reference when moving the camera
background.syncLock = "Kamera kilidi ile senkronize et";

// Blend: normal
blend.normal = "Normal";
// Blend: darker
blend.darker = "Daha koyu";
blend.darker.darken = "Koyulaştır";
blend.darker.multiply = "Çarpmak";
blend.darker.linearBurn = "Doğrusal Yakma";
blend.darker.colorBurn = "Renk Yakma";
// Blend: lighter
blend.lighter = "Daha Parlak";
blend.lighter.lighten = "Aydınlat";
blend.lighter.screen = "Ekran";
blend.lighter.linearDodge = "Doğrusal Ekleme";
blend.lighter.colorDodge = "Renk Artırma";
// Blend: contrast
blend.contrast = "Kontrast";
blend.contrast.hardLight = "Sert Işık";
blend.contrast.softLight = "Yumuşak Işık";
blend.contrast.overlay = "Kaplama";
blend.contrast.hardMix = "Sert Karışım";
blend.contrast.linearLight = "Doğrusal Işık";
blend.contrast.vividLight = "Canlı Işık";
blend.contrast.average = "Ortalama";
// Blend: inversion
blend.inversion = "Ters Çevirme";
blend.inversion.exclusion = "Dışlama";
blend.inversion.difference = "Fark";
// Blend: cancelation
blend.cancelation = "İptal";
blend.cancelation.divide = "Böl";
blend.cancelation.subtract = "Çıkar";
// Blend: component
blend.component = "Bileşen";
blend.component.luminosity = "Parlaklık";

// Camera (point of view in 3d)
camera = "Kamera";
cameras = "kameralar";
camera.view = "Görüntüle";
// Copy the views
camera.updateView = "Görünüm noktası güncellensin mi?";
// Add a new camera
camera.addView = "Görünüm ekle";
// Focus on the camera
camera.focus = "Odak";
// Add on the camera camera
camera.focusOn = "Odak: $0";
// Camera projection, Orthographic or Perspective
camera.projection = "Projeksiyon";
// Camera projection, Orthographic or Perspective
camera.projection.orthographic = "Ortografik";
// Camera projection, Orthographic or Perspective
camera.projection.perspective = "Perspektif";
// camera Vertical Field of View
camera.fov = "Dikey Görünüm Alanı";
// Camera Field of View hint
camera.focal = "odaksal $0mm (35mm sensör)";
// Rotation mode controls how the user will interact with the camera rotation
camera.rotation = "Döndürme";
// Camera interaction mode, 2 degrees of freedom (synonym: Orbit)
camera.rotation.orbit = "Döner platform";
// Camera interaction mode, 3 degrees of freedom
camera.rotation.trackball = "İztopu";
camera.rotation.trackball.help = "İztopu size daha fazla serbestlik sağlar, kamerayı iki parmakla da yuvarlayabilirsiniz.";
// Camera interaction mode, 1st person view
camera.firstPerson = "Birinci Kişi";
// How sensitive the camera is (synonym: sensitivity)
camera.speed = "Hız";
// Camera rotation sensitivity
camera.speed.rotation = "Döndürme";
// Camera translation sensitivity
camera.speed.panning = "Yatay Kayma";
// Camera zooming sensitivity
camera.speed.zooming = "Yakınlaştırma";
// Reset camera position
camera.resetView = "Görünümü sıfırla";
// Align the view (snap to nearest 90° angle)
camera.snapView = "Görünümü yasla";
// Warning (camera is snapped and it switched to orthographic)
camera.snapOrthographic.warning = "Kamera yaslandı (ortografik)";
// Switch to orthographic view when the view is snapped
camera.snapOrthographic = "Ortografik yaslama";
camera.snapOrthographic.help = "Bu seçenek yaslama küpünü köşede kullanırken de çalışır.";
// The Camera pivot is the point around which the camera rotates
camera.pivot = "Eksen";
// When we double tap on the object with the finger/stylus
camera.doubleTapMesh = "Nesneye çift dokun";
// When we double tap on the background with the finger/stylus
camera.doubleTapBackground = "Arka plana çift dokun";
// When we double tap on the background with the finger/stylus
camera.doubleTapBackgroundFocus.toggle = "Değiştir";
// Focus on the selection
camera.doubleTapBackgroundFocus.selection = "Seçim";
// Focus on the entire scene
camera.doubleTapBackgroundFocus.scene = "Görünüm";
// When double tapping with the finger/stylus, the camera pivot will be updated
camera.doubleTapPivot = "Çift dokunmayla güncelle";
camera.doubleTapPivot.help = "Nesne yüzeyine çift dokunulduğunda dönme eksenini günceller.";
// Allow new pivot even when zooming outside the object surface
camera.airPivot = "Hava ekseni";
camera.airPivot.help = "Nesne yüzeyinin dışında yakınlaştırdığınızda bile yeni eksene izin verir.";
// Update the pivot when you start interacting with the camera
camera.autoPivot = "Kamera kullanımıyla başlat";
camera.autoPivot.help = "Kamerayla etkileşime geçildiğinde ekseni günceller.";
// Move the camera so that it focus on the intersection point
camera.doubleTapFocus = "Odakla";
camera.doubleTapFocus.help = "Nesneye çift dokunulduğunda kamera yatay kayarak seçilen noktaya odaklanır.";
// Disable XY panning when unzomming
camera.centerZoomOut = "Uzaklaşıldığında görünümü ortala";
camera.panZoomOut.help = "Bu seçenek devre dışı bırakıldığında, bu eksen konumu korunacaktır.";

// Toolbox context (when expanded), multiple objects are selected
context.multiselection = "Çoklu seçim";
// There is 0 nodes/items selected
context.noSelection = "Seçim yok";

// Curve type, presets lets the user chooses between predefined curves
curve.preset = "Önayar";
// Quick curve x side shift
curve.shift = "Shift";
// Curve type, https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline
curve.catmull = "Catmull-Rom";
// Curve curve, https://en.wikipedia.org/wiki/Spline_(mathematics)
curve.spline = "Spline";
curve.bspline = "B-spline";
curve.precision = "Hassasiyet";
// merge or collapse 1 point into another
curve.merge = "Birleştir";
// snap
curve.snap = "Yasla";
curve.snap.offset = "Kaydırma";
curve.snap.offset.help = "100% değeri tüpün yarıçapına eşittir.";
curve.snap.surface = "Yüzey";
curve.snap.vertex = "Verteks";
curve.snap.grid = "Izgara (yaslandığında)";
// Regular spaced sampling
curve.uniform = "Düzenli";
curve.uniform.help = "Eğri düzenli aralıklarla örneklenir, böylece uniform yoğunluk sağlanır.

Bu seçeneği devre dışı bırakarak eğri üzerine yeni kontrol noktaları ekleyerek kenar döngülerini biraz kontrol edebilirsiniz.";
// Display the falloff curve in a symmetric way
curve.symmetric.help = "Azalmayı simetrik bir şekilde gösterin.

Bu seçenek sadece görsel bir ipucu, azalmanın kendisini etkilemez";
curve.radius = "Yarıçap";
curve.twist = "Kıvır";
curve.spiral = "Sarmal";
curve.spiral.twist = "Büküm açısı";
curve.spiral.scale = "Ölçek";
curve.spiral.offset = "Kaydırma";
curve.spiral.angle = "Açı kaydırma";
curve.pivot = "Eksen";
curve.pivot.self = "Eğri";
curve.pivot.children = "Alt öğeleri";

// Set the desired FPS (frame per second, refresh rate)
debug.limitFps = "Hedef FPS";
debug.limitFps.help = "Devre dışı bırakıldığında, varsayılan değer ekranın yenileme hızıyla senkronize olacak demektir.";

// Warning about UVs (using extra memory)
debug.uvPrimitive.warning = "UV'ler gerekmiyorsa bu seçeneği devre dışı bırakın (fazladan bellek).";
// Debug option, Normalize means transforming the data so that it fits in [0-1] the range
debug.uvNormalize = "UV'leri normalleştir";
debug.uvNormalize.help = "Nomad [0-1] deseninin içindeki UV'leri normalleştirecektir.";

// Debug option, display an window with some debugging logs
debug.logs = "Kayıtları";
// Model shortcut window
debug.shortcut = "Kısayol penceresi";
// Debug option, overrides the rendering to display the depth buffer
debug.heightmap = "Yükseklik haritası";
// Debug options, graphical stuffs
debug.graphics = "Grafik";
// Debug options, generate screenshots with size compatible with the iOS store
debug.thumbnails = "Mağaza boyutu küçük resimler oluştur";

// Open file explorer
file.explore = "Keşfet";
// Empty list: there is no projects
file.project.load = "Başlangıçta projeyi yeniden yükle";
// Empty list: there is no projects
file.project.empty = "Henüz kaydedilmiş bir projeniz yok!";
// The current opened project has some unsaved changes
file.project.unsaved = "Kaydedilmemiş değişiklikler!";
// The user will loose its project's unsaved changes
file.project.loseUnsaved = "Kaydedilmemiş değişiklikler kaybolacak!";
// Indicates to the user that the project thumbnail corresponds to the last manual save
file.project.lastManualSave = "Son manüel kaydın önizlemesi";

file.project = "Proje";
// Save current project (or overwrite if the project has already been saved once)
file.project.save = "Kaydet";
// E.g: Save "my_project"?
file.project.save.confirm = "$0 kaydedilsin mi?";
// Make a copy
file.project.saveAs = "Farklı kaydet";
// Overwrite another project
file.project.overwrite = "$ üstüne yazılsın mı?";
// E.g: Overwrite "my_other_project"?
file.project.overwrite.confirm = "$0 üstüne yazılsın mı?";
// Open a project
file.project.open = "Aç";
// E.g: Open "my_project"?
file.project.open.confirm = "$0 açılsın mı?";
// E.g: Clone "my_project"?
file.project.clone.confirm = "$0 klonlansın mı?";
// Load another project and add/append all its data to the current scene
file.project.add = "Görünüme ekle";
// E;g: Add "my_other_project" to the scene?
file.project.add.confirm = "$0 görünüme eklensin mi?";
// Reset the scene and create a new project
file.project.new = "Yeni";
file.project.new.confirm = "Yeni görünüm oluşturulsun mu?";
// Delete a project (not corresponding to the currently opened one)
file.project.delete.confirm = "$0 silinsin mi?";
// Delete a project (corresponding to the currently opened one)
file.project.delete.confirmActive = "$0 silinsin mi?

Bu geçerli etkin projedir!";

// Auto save section
file.autoSave = "Otomatik Kaydet";
file.autoSave.confirm = "Otomatik kaydetme devre dışı kalsın mı?";
file.autoSave.help = "Projenizi belirli aralıklarla ayrı bir dosyayay kaydedin.

Otomatik kaydetme dosyası şurada bulunabilir:";
// Interval in minutes in which the auto save popup will appear
file.autoSave.popup = "Açılır pencere zaman aşımı";
// In minutes
file.autoSave.minutes = "Zamanlayıcı açılır pencere";
// Delete the current autoSave data
file.autoSave.delete = "Otomatik kaydı sil";
// Open the outdated auto save
file.autoSave.open.manual = "Eski manuel kaydı aç";
file.autoSave.open.auto = "Eski otomatik kaydı aç";

// color space (linear or srgb), do not translate linear/srgb if there is a doubt
file.colorSpace = "Renk Alanı";
file.colorSpace.help = "Renkler doğru görünmüyorsa bu seçeneği değiştirmeyi deneyin.";
file.colorSpace.linear = "Doğrusal";
file.colorSpace.srgb = "sRGB";

// Configure imports option
file.importSettings = "İçe aktarma seçenekleri";

// Load interface preference settings when opening a scene file
file.import.guiSettings = "Grafik kullanıcı arayüzü ayarlarını koru";
file.import.guiSettings.help = "Bir proje dosyasını açarken veya içeri aktarırken, projede gömülü olan grafik kullanıcı arayüzüne ilişkin tüm ayarlar yüklenir.";
// OBJ have "groups" and "objects", by default groups are ignored, use this option to consider groups as separate objects
file.import.obj.splitByGroup = "OBJ'leri gruplara ayır";
file.import.obj.splitByGroup.help = "Etkinleştirildiğinde, Nomad OBJ gruplarını ayrı nesnelere ayırır.";
// Merge all the object layers at when loading a file (deleting them in the process)
file.import.mergeLayers = "Katmanları Birleştir";
// Ignore the textures present in the file to load
file.import.skipTextures = "Dokuları atla";
// Do not fiddle with the object topology when loading the file
file.import.keepTopology = "Topolojiyi koru";
file.import.keepTopology.help = "Nomad'ın içeri aktarılan ağ örgüsünün topolojisinde değişiklik yapmasını istemiyorsanız, bu seçeneği kullanın.

Verteks/yüz yeniden sıralanması, verteks/yüz kopyalarının kaldırılması ve kullanılmayan vertekslerin kaldırılması devre dışı kalır.";

// Import file section
file.import.title = "İçe aktar";
file.import.title.help = "Desteklenen formatlar:";
// The user imports a scene file that will replace the current scene
file.import.open = "Aç";
file.import.open.confirm = "Yeni dosya içeri aktarılsın mı?";
// The user imports a scene file that will be added/appended the current scene
file.import.add = "Görünüme ekle";
file.import.add.confirm = "Yeni dosya içeri aktarılsın mı?";

// Export scene file
file.export = "Dışa Aktar";

// Filter nodes that we want to export
file.select.include = "Dâhil et";
file.select.all = "Tümü";
file.select.visible = "Görülebilir";
file.select.selected = "Seçilen";
file.select.unselected = "Seçilmemiş";

// Export each node in a separate file
file.export.separate = "Her nesne için bir dosya";

// Export the current selected objects instead of the entire scene
file.onlySelection = "Sadece seçili nesneleri dâhil et";
file.onlySelection.help = "Tüm görünüm yerine, sadece seçimi dâhil eder.";
// Tries to generate quad (rectangle polygon) from triangles
file.convertToQuad = "Dörtgen oluştur";
file.convertToQuad.help = "Üçgenleri eşleştirerek (dosyalarda yan yana iseler), üçgenlerden dörtgenler oluşturur.";
// ----------------------------------------------
// Whether we include the textures in the exported file
file.export.texture = "Dokuları";
// Baking means transfering/converting
file.export.texture.help = "Bu seçenek verteks renklerini dokulara dönüştürmez.";
// ----------------------------------------------
file.export.color0 = "Verteks renklerini";
file.export.color1 = "pbr boyamasını";
file.export.color1.help = "Pürüzlük, metaliklik seviyesi ve maske boyamayı dışa aktarır. Bu diğer yazılımlar tarafından göz ardı edilir.";
// ----------------------------------------------
// Whether we include normals vector in the exported file
file.export.normal = "Normalleri";
file.export.normal.help = "Dosyayı diğer yazılımlarda açmak istiyorsanız, bu seçeneği belirleyin.

Tekrardan hesaplayacağı için, Nomad normalleri her zaman göz ardı eder.";
// ----------------------------------------------
file.export.tangent = "Teğetler";
file.export.tangent.help = "Bu dosyayı başka yazılımlarda açmak istiyorsanız bu seçeneği işaretleyin.

Teğetler, yalnızca model normal haritaya sahipse kullanılır.

Nomad, bunları tekrar hesaplayacağı için teğetleri daima görmezden gelir.";
// ----------------------------------------------
file.export.nomad.help = "Nomad Sculpt dahili dosya formatı.

Bu format başka yazılımlarda yüklenmez, bu çoğunlukla yeniden içe aktarma amaçları içindir.";
// ----------------------------------------------
// Whether we include layers in the exported file (see glossary for layer)
file.export.gltf.layer = "Katmanları";
file.export.gltf.layer.help = "Katmanları biçimler olarak dışa aktarır. glTF tarafından resmi olarak desteklenir, dolayısıyla diğer yazılımlarda da çalışması gerekir.";
// Whether we include painting of layers in the exported file (see glossary for layer)
file.export.gltf.layerPaint = "Katman boyamasını";
file.export.gltf.layerPaint.help = "Katman boyamayı dışa aktarır. Diğer yazılımlar tarafından genellikle göz ardı edilir.";
// ----------------------------------------------
file.export.obj.warning = "Katmanlar ve ekstra boyama (pürüzlük ve metaliklik seviyesi ve maske) kaybolur.";
// Whether we include the vertex color in the exported file
file.export.obj.color = "Verteks renklerini";
file.export.obj.color.help = "Bazı 3D yazılımları bunu okuyabilir, ama hepsi okuyamaz.";
file.export.obj.color.help.append = "Vertekslere renk bilgilerini ekler.";
file.export.obj.color.help.hexa = "Renk kodlamak için alternatif bir yol. Ayrıca maske verilerini de destekler.";
file.export.obj.faceGroup = "Yüz Grubu";
file.export.obj.object = "Nesneleri Yaz";
file.export.obj.object.help = "Nesneleri ayrı tutun.

Bu seçeneği devre dışı bırakmak her şeyi tek bir varlık olarak dışa aktaracaktır.
Substance Painter 'Mesh ID / Polygroup' özelliğini kullanmak istiyorsanız bu seçeneği devre dışı bırakmanız gerekir.";
file.export.obj.archive = "Tür";
file.export.obj.archive.folder = "Klasör";
file.export.obj.archive.zip = "Zip";
file.export.obj.archive.help = "Bazı uygulamalar (Google Drive, One Drive, vb.) klasör içe aktarmayı desteklemez, bu yüzden bunun yerine Zip kullanabilirsiniz.";
// ----------------------------------------------
file.export.ply.warning = "Katmanlar ve ekstra boyama (pürüzlük ve metaliklik seviyesi ve maske) kaybolur.";
// ----------------------------------------------
file.export.stl.warning = "Katmanlar ve ekstra boyama (pürüzlük ve metaliklik seviyesi ve maske) kaybolur.";
// Whether we include the vertex color in the exported file
file.export.stl.color = "Verteks renklerini";
file.export.stl.color.help = "Bazı 3D yazılımları bunu okuyabilir, ama hepsi okuyamaz.";
// ----------------------------------------------
file.export.usd.skew = "Kaymayı İzin Ver";
file.export.usd.skew.help = "Matris dönüşümlerinde kaymayı izin ver.

Devre dışı bırakıldığında, Nomad kayma matrislerini iki ayrı ölçekleme ve döndürme dönüşümüne böler.";
// ----------------------------------------------
// Advanced settings
settings.advanced = "Gelişmiş";
// Means that all these options will be resetted when the app restarts
settings.notSaved = "Bu seçenekler ayarlara kaydedilmez.";
settings.reset.title = "Ayarlar";
settings.reset.title.help = "Uygulama tercihleri ayarlarını sıfırlar.

Bazı kaynaklar ayrı olarak kaydedilir ve SIFIRLANMAZ, bunlardan bazıları:
• Projeler
• Tuş atamaları
• Araç Önayarları
• HDR Ortamları
• MatCap'ler
• Dokular (fırça)
• Referans görüntüleri

Işıklandırma, süreç sonrası işlemler, kamera görünümleri, vb. gibi projeye bağlı olan hiçbir şeye dokunulmayacağı unutulmamalıdır";

// Reset preference settings button
settings.reset = "Varsayılan ayara sıfırla";
settings.reset.confirm = "Tercih edilen ayarlar sıfırlansın mı?";

// Render a screenshot of the scene
file.render = "İşle";
// If we include the App Interface in the exported screenshot
file.render.showInterface = "Arayüzü göster";
// Resolution ratio of the exported screenshot
file.render.renderRatio = "İşleme oranı";
file.render.renderRatio.help = "1.0 değeri, Nomad işlemesinin aşağıda istenilen görüntü boyutuyla aynı çözünürlükte olacağı anlamına gelir.

Belirli bir çözünürlükte işleyemiyorsanız (bellek yetersizliğinden çöküyorsa) bu seçeneği kullanın.";
// Desired size of the exported screenshot
file.render.size = "Son büyükülük";
// Desired size of the exported screenshot (custom vs predefined size)
file.render.size.custom = "Özel";
// Screen resolution parameters for the export screenshot features
file.render.screenResolution = "Ekran";
// width of exported screenshot
file.render.width = "Genişlik";
// height of exported screenshot
file.render.height = "Yükseklik";
// export screenshot of the scene
file.render.warn = "Dışa aktarma çözünürlüğü yüksek ($0x$1)!

Cihazınızın VRAM'inin yetmemesi ve çökmesi durumuna karşı projenizi kaydettiğinizden emin olun.";
// If true, then the exported screenshot will have transparency data in the image
file.render.transparent = "Şeffaf arkaplan";
file.render.transparent.help = "Bu seçenek ağ örgüsünü bir 2D yaratım yazılımına eklemek istediğinizde faydalıdır.

Kısmi nesne şeffaflığı şu an için desteklenmemektedir.";

// Disable this option to have per-tool pressure settings (instead of shared settings)
pressure.useGlobal = "Global ayarları kullan";
pressure.useGlobal.help = "Varsayılan olarak, araçlar aynı basınç ayarlarını kullanır. 

Bu araç için belirli bir basınç ayarı kullanmak istiyorsanız, bu seçenekte seçimi kaldırın.";

// Pencil pressure
pressure.title = "Basım Şiddeti";
// Pencil/Stylus pressure will be ignored
pressure.noTool = "Bu araç kalem basıncını kullanmaz.";
// The tool can support pressure but its selected stroke type will ignore it
pressure.noGrab = "Yakalama darbe türü basınç ayarlarını göz ardı eder.";
// The stylus pressure will impact the tool radius (more pressure -> bigger radius)
pressure.radius = "Yarıçap";
// The stylus pressure will impact the tool intensity (more pressure -> stronger intensity)
pressure.intensity = "Yoğunluk";
// Average pencil pressure event to get smoother result
pressure.average = "Basınç yumuşatma";
pressure.average.help = "Daha yumuşak sonuçlar için kalem basınç olaylarını ortalayın.";
// Limit pressure to 100%
pressure.limit = "Basıncı %100 ile sınırla";
pressure.limit.help = "Bu genel bir ayardır.

Kalem basıncının asla %100'ü aşmadığından emin olmak için bu seçeneği kullanın.";

// list of inputs allowing camera interaction
gesture.camera = "Kamera";
// list of inputs allowing sculpting interaction
gesture.sculpt = "Şekillendir";
// Select object
gesture.select = "Nesne seç";
// Finger/Touch input
gesture.finger = "Parmak";
// Stylus/Pencil
gesture.stylus = "Stylus";
// Mouse/Trackpad
gesture.mouse = "Fare";

// long press to pick the color/material under the cursor
gesture.dropper = "Malzeme seçimi";
gesture.dropper.help = "Kanvasın üzerine uzun basılı tutarak, renk/malzeme seçici başlatılabilir.

Yalnız bunun sadece geçerli fırçada boyamanın etkin olması durumunda çalışacağı unutulmamalıdır.";

camera.airStroke = "Hava vuruşuna izin ver";
camera.airStroke.help = "Başlangıçta imleç nesneyi kaçırsa bile heykel vuruşunun başlamasına izin ver.

Bu seçenek, sadece heykelcilik etkinleştirildiğinde ve kamera devredışı olduğunda girdi için aktiftir.";

// Three fingers on screen
gesture.three.title = "Üç parmak";
gesture.three.light = "Işıklandırmayı döndür";
gesture.three.light.help = "Ortamı, ışıkları ve MatCap'i döndürün.";
gesture.three.radius = "Araç Yarıçapı";
gesture.three.intensity = "Araç yoğunluğu";

// If this option is enabled, finger inputs on screen will use the smoothing tool
gesture.finger.smooth = "Parmak her zaman düzleştirir";
gesture.finger.smooth.help = "Bu seçenek yalnızca bir heykel aleti aktifse etkindir.";
// If enabled, the pressure will be taken into account even if it's not coming from a recognized stylus
gesture.unknownPressure = "Tanınmayan basınca izin ver";
gesture.unknownPressure.help = "Basınç kaleminizle çalışmıyorsa ya da parmakla basınç gerekiyorsa bu seçeneği işaretleyin.";

// Action when we press an Android pencil button
gesture.pencilAction.android = "Kalem düğme";
// Action when we use the Pencil double Tap
gesture.pencilAction.ios = "Kalem çift dokunma";
gesture.pencilAction.ios.help = "Sadece Apple Pencil 2. nesil için etkindir.";
// Pencil button (or iOS pencil double tap) action: Nothing
gesture.pencilAction.none = "Yok";
// Pencil button (or iOS pencil double tap) action: flip adding/substracting sculpt matter setting
gesture.pencilAction.alt = "Ekle/Çıkar";

// Enable Mask gesture by tapping once on the screen
gesture.mask.oneTap = "Tek dokunmalı";
gesture.mask.oneTap.help = "Ekrana bir kez dokunduğunuzda, Maske düğmesi kısayolunu basılı tutmaya gerek kalmadan maske kısayoluna izin verir.

Aşağıdaki hareketlere olanak sağlar:
• maskeyi ters çevirmek için arka plana dokunun
• maskeyi bulanıklaştırmak için maskelenmiş alana dokunun
• maskeyi netleştirmek için maskelenmemiş alana dokunun";
// Hold the finger on screen to toggle between two tools: Mask and SelMask
gesture.mask.holdStroke = "Darbe";
gesture.mask.holdStroke.help = "Uzun basma Mask ve SelMask arasında geçiş yapacak ve yeni bir çizgi başlatacaktır.

Çizginin sonunda, önceki alet tekrar seçilir.";
gesture.mask.holdIdle = "Araç";
gesture.mask.holdIdle.help = "Mask ve SelMask arasında geçiş yapmak için hareket ettirmeden uzun basın ve bırakın.";

// Shortcut customization, choose the action that the shortcut will performan (select tool, etc)
gesture.shortcut = "Kısayolu";

// Shortcuts to undo/redo
gesture.history = "Geçmiş kısayolları";
gesture.history.help = "• Geri al: 2 parmakla dokunun
• Yinele: 3 parmakla dokunun";
gesture.history.hold = "Uzun basılı tut";
gesture.history.hold.help = "2/3 parmağı basılı tutun (sürekli).";

// Size rejection is when we try to ignore the palm of the hand when we interact with a tablet
gesture.palmRejection = "Palm rejection";
gesture.palmRejection.confirm = "Kanvasla etkileşime geçmekte sorun yaşıyorsanız, bu seçeneği devre dışı bıraktığınızdan emin olun!";
gesture.palmRejection.help = "Dokunulan alanın boyutu bu değerden büyükse, girişler reddedilir.

Tüm cihazlarda çalışmayabilir.";
// Size in pixel for the palm rejection feature
gesture.palmRejection.size = "Maksimum boyut eşiği";

// Smoothing strategy
extract.polish.all = "Tümü";
extract.polish.sharp = "Keskin kenar";
extract.polish.border = "Yalnızca kenarlar";
// Smooth the border in a way that it matches completely with its dual
extract.polish.syncBorder = "Kenarları senkronize et";
// topology of extracted mesh
extract.edgeLoop = "Kenar döngüsü (yan)";
extract.edgeLoop.auto = "Otomatik kenar döngüsü";
extract.edgeLoop.division = "Bölüm";
// The thickness of the extracted mesh (from the painted mask)
extract.thickness = "Kalınlık";
// Carve the mask into the surface
extract.carve = "Oyma";
// Extract a new mesh from the painted mask
extract = "Çıkar";
// Preview extract
extract.preview = "Önizleme";
// Extract two new mesh from the painted mask and from the unmasked area
extract.split = "Ayır";
// How should we close the topology of the extracted object
extract.action = "Kapatma eylemi:";
extract.action.help = "• Yok
Sadece o kısmı çıkar ve çıkarılan kısmın açılmasına izin ver.

• Doldur
Delik doldurulur ve düzleştirilir.
Düz yüzeyler için bu seçeneği kullanmayın.

• Kabuk
Kalınlık değerini kullanarak çıkarılan biçimi kapat.

• Katman
Katman farkını çıkar (sadece katman alt menüsü).";
// Do not close the mesh (leave it open)
extract.action.none = "Yok";
// Close the mesh with a hole-filling algorithm
extract.action.fill = "Doldur";
// Close the mesh by adding a thickness on the surface
extract.action.shell = "Kabuk";
// Close the mesh by using the layer data as a difference thickness
extract.action.layer = "Katman";

// uv part of revolution surface
genus.main = "Ana";
genus.hole = "Delik";
genus.bottom = "Alt";
genus.top = "Üst";

// History, list of undo/redo
history = "Geçmiş";
// First "undo" state
history.root = "Başlangıç";
history.undoConfirm = "Tüm bu işlemler geri alınsın mı?";
history.undoWarning = "Bundan sonra bir düzenleme yaparsanız, pek çok değişikliği kaybedebilirsiniz.";
// Settings concerning the history stack of undo/redo
history.stack = "Yığın";
// Actions to include in the undo/redo stack
history.include = "Eylemleri dâhil et";
// include lighting editing in the undo/redo
history.includeLights = "Işıklar";
history.includeLights.help = "Bu seçenek devre dışı ise, görünüm hiyerarşisinde diğer nesnelere de etki edebileceğinden, Gizmo ışıkları hareket ettirmeye yine de devam eder.";
// include postProcess editing in the undo/redo
history.includePostProcess = "Süreç sonrası işlemler";
// include shading parameters (MatCap & HDRIs) editing in the undo/redo
history.includeShading = "MatCap'ler ve HDRI'ler";
// Can limit the stack of undo/redo size
history.limitSize = "Geçmiş limiti";
history.limitSize.help = "Geçmişin maksimum büyüklüğü.

Geçmiş bir sonraki kaydedilen işlemde güncellenir.";
// Limit the number of undo in the history stack
history.limitStack = "Yığın limiti";
history.limitStack.help = "Uygulamanın tutabileceği maksimum işlem sayısı.

Geçmiş bir sonraki kaydedilen işlemde güncellenir.";
// Value where you define how many operations you can undo before it displays a warning
history.rangeProtect = "Maksimum geri alma sayısı";
history.rangeProtect.help = "Geçmişte çok geri gittiğinizde, birçok işlemi geri almadan önce bir onay iletişim penceresi açılır.";
// When enabled, each time the user undo an operation it will undo the camera position as well
history.restoreCamera = "Kamerayı eski durumuna getir";
history.restoreCamera.help = "Bir eylemi geri aldığınızda/yinelediğinizde kaydedilmiş kamera bakış açısını eski durumuna getirmek için bu seçeneği etkinleştirin.";
// Undo
history.undo = "Geri Al";
// Redo
history.redo = "Yinele";
// Shown during undo
history.state.undo = "Geri al: $0";
// Shown during redo
history.state.redo = "Yinele: $0";
// Shown during undo/redo
history.state.symmetrySplit = "Simetri Ayrımı";
// Shown during undo/redo
history.state.voxelRemesh = "Voksel yeniden ağ örgülendirme";
// Shown during undo/redo
history.state.surfaceRemesh = "Yüzey yeniden ağ örgülendirme";
// Shown during undo/redo
history.state.multiresLevel = "Çözünürlük değişimi";

// Debugging/Inspect object material (view channel separately color, roughness, normal, uv, etc)
inspect = "Denetleyici";
// Inspector but SHORT
inspect.short = "Denetle";
// Display the material channel on the background
inspect.onBackground = "Arka Planda";
// Display the material channel on the mesh
inspect.onMesh = "Kafes Üzerinde";
// Show UV seams
inspect.seams = "Dikişler";

// Interface customization
interface = "Arayüz";

// UI customization: one item row will stands on one line (synonym: Inlined)
interface.compact = "UI: Sıkıştırılmış";

// UI customization: each row of the list will be bigger
interface.expandList = "Kullanıcı Arayüzü: Listeyi genişlet";
// UI customization: each row of the list will be bigger
interface.expandList.help = "Sadece liste yönetimini kolaylaştıracak bir kullanıcı arayüzü seçeneği.";

// Add shortcuts buttons to the bottom of the screen
interface.shortcut.bottom = "Kısayollar ekle (alta)...";
// Floating window
interface.shortcut.float = "Kısayollar ekle (pencere)...";

// Interface option (main base color)
interface.colorBase = "Renk tabanı";
// Interface option (accent widget color)
interface.colorSelect = "Renk aracı";
// Interface option (if the menus are transparent or opaque)
interface.panelTransparent = "Şeffaf panel";
// Interface option (panel blurriness, if the menus are transparent)
interface.blurFactor = "Bulanıklık seviyesi";
// Interface option (color of panels, if the menus are transparent)
interface.colorBaseTransparent = "Renk paneli";

// Interface color style
interface.preset.title = "Önayarlar";

// Reset interface settings
interface.resetAll = "Stili sıfırla";
interface.resetAll.confirm = "Arayüz ayarları sıfırlansın mı?";
// help popup when hovering
interface.hoverHelp = "Üzerine gelindiğinde yardım açılır penceresi";
// Interface option (main base color)
interface.iconSupport = "Yüksek Kontrastlı Düğme";
interface.iconSupport.help = "Düğmelerin etkin olduklarında daha görünür olmalarını sağlayan alternatif bir stil.

Otomatik olarak ayarlandığında, Nomad düşük kontrastlı UI renklerinde etkin/devre dışı arasındaki kontrast düşük olduğunda bu modu kullanacaktır.";
// Interface customization
interface.flipTop = "Üst çubuğu aynala";
// Interface customization
interface.flipBottom = "Alt çubuğu aynala";
// Interface customization
interface.flipMiddle = "Yan çubukları aynala";
// list of tools
interface.toolbox = "Araç kutusunu";
// hide toolbox by default
interface.toolbox.hide = "Gizle";
// Interface customization (the toolbox is a grid, we can adjust the column count)
interface.toolbox.columns = "Sütunlar";
// Interface customization (the toolbox is a grid, we can adjust the column count)
interface.toolbox.rows = "Satırlar";
// Reset the tool's order in the toolbox
interface.toolbox.resetOrder = "Sıralamasını sıfırla";
// Colored text and icon
interface.toolbox.color = "Renkli";
// Scale the interface
interface.scale = "Genel ölçek";
// Spacing between widgets
interface.cursorStep = "Dikey boşluk";
// Width of the interface panels
interface.panelWidth = "Panel genişliği";
// Size of fonts
interface.fontScale = "Yazı tipi boyutu";
// Inset
interface.inset.title = "Kenardan kaydırmalar";
interface.inset.title.help = "Bu değerleri, sadece ekran kenarlarındaki düğmeleri kullanırken sorun yaşıyorsanız değiştirebilirsiniz.

Kaydırıcı devre dışıysa, Nomad cihazın kendisinden gelen güvenli bölge değerlerini kullanır.";

// (see Glossary for Layer)
layer = "Katman";
layers.syncTransform = "Dönüşümü Senkronize Et";
layers.syncTransform.help = "If enabled, all the unselected layers will be adjusted depending on the transform rotation, scale and skew.

Disable this option if the other layers are meant to be used without the new transform that you are applying.

When set on auto, only the visible layers will be adjusted.";
// (see Glossary for Layer)
layers.lock = "Üst katmanların detaylarını koru";
// (see Glossary for Layer)
layers.lock.yes = "Üst katmanlar kilitlensin mi?";
// (see Glossary for Layer)
layers.lock.warning = "Şekillendirme sırasında üst katmanlardan gelen deformasyon göz ardı edilir.

Ancak bu katmanların detayları yine de görülebilir.

Bu seçenek sadece üst katmanlar nispeten küçük ölçekli detaylara sahip olduğunda çalışır.";
// (see Glossary for Layer)
layers.addLayer = "Katman ekle";
// (see Glossary for Layer)
layer.factors = "Kanal faktörleri";
// (see Glossary for Layer)
layer.factor = "Faktör";
// (see Glossary for Layer)
layer.offset = "Kaydırma";
// Layer blend mode
layer.blendMode = "Karışım";
// (see Glossary for Layer)
layer.base = "Taban";
layer.base.nothing = "Çıkarılacak bir şey yok!";
layer.base.background = "Arka plan malzemesi";
layer.base.background.help = "Etkin ise, yalnızca arka plan malzemesinden farklı olan malzeme değerleri çıkarılacaktır.";
// (see Glossary for Layer)
layers = "Katmanlar";
layers.title = "Katmanlar";
// (see Glossary for Layer)
layers.title.help = "Katmanlar pozisyon kaydırmalarını ve boyamaları kaydedebilir, lineer olmayan iş akışı için faydalı olabilir.
Örneğin, değişiklikleri geri almak için geçmiş kümesine dayanmadan, farklı yüz ifadeleri deneyerek.

Boyama verileri için, katmanlar yukarıdan aşağıya sıralanırlar; böylece yukarıdaki katmanlar aşağıdakileri maskeler.

'KatmanSil' aracını kullanarak, katmanın bir kısmını (böylelikle de katmanın etkisini) silebilirsiniz.";
layers.primitive = "Katmanlar primitiflerde kullanılamaz.";
// When there is no layer selected (see Glossary for Layer)
layers.baseSelected = "Yok";

light = "Işık";
lights = "Işıklar";
// Intensity of light
light.intensity = "Yoğunluk";
// Color of light
light.color = "Renk";
// Kelvin (the temperature unit)
light.kelvin = "Kelvin";
// Temperature in Kelvin (Alternative way to compute the color of the light)
light.temperature = "Sıcaklık";
// The attachment of a light defines how it will move when the user moves the camera
light.attachment = "İliştirme";
// The light will stay still even if the user moves the camera
light.attachment.fixed = "Sabit";
// The light will move along the camera
light.attachment.camera = "Kamera";
light.attachment.help = "• Sabit
Işığın yönlendirilmesi değişmez.

• Kamera
Işığın yönlendirilmesi kamera görünümüne göre olur.";
// Light type (directional, spot, point)
light.type = "Tip";
// Directional light (synonym: sun light)
light.type.directional = "Yönsel";
light.type.sun = "Güneş";
// Directional light (synonym: sun light)
light.type.environment = "Ortam";
light.type.hdri = "HDRI";
// Spot light emits light in a single direction, restricted by a cone shape.
light.type.spot = "Spot";
// Point light emits lights everywhere (synonym: omni, omnidirectional)
light.type.point = "Nokta";
// For directional light (angle jitter)
light.angle = "Açı";
// For point/spot light (offset jitter)
light.size = "Büyüklük";
// Cone angle for spot angles
light.spot.angle = "Koni açısı";
// Softness of the spot light
light.spot.softness = "Yumuşaklık";
// Position of the light
light.position = "Konum";
// Enable or disable shadows for a light
light.shadow.cast = "Gölge";
// Point light only works with "screenspace" shadow type (not "shadow map")
light.shadow.pointTip = "Nokta ışık sadece ekran uzayındaki gölgeleri destekler.";
light.shadow.type = "Gölge türü";
// https://en.wikipedia.org/wiki/Shadow_mapping
light.shadow.type.shadowMap = "Gölge haritası";
// Shadows computed with only the information visible on screen
light.shadow.type.screenspace = "Ekran uzayı";
light.shadow.type.screenspace.help = "Deneysel bir özellik, gelecekteki sürümlerde çıkarılabilir.

Bu seçenek yumuşaklık gölge özelliği ile kullanılmak üzere tasarlanmıştır.";
// Adjustment to fix artefacts
light.shadow.bias = "Sapma";
// How blurry the shadow is
light.shadow.softness = "Yumuşaklık";
// Contact shadows are more precise shadows on small distance (synonym: cavity shadows?)
light.contact = "Temaslı";
light.contact.help = "Otomatik seçeneği belirlenmişse, sadece en baskın ışığın temaslı gölgesi olur.";
// Thickness threshold for screen-space shadows (synonym: threshold, bias)
light.shadow.tolerance = "Tolerans";
// Activated the light
light.visible = "Göster";
// Move the light in front of the camera (but keeps its inner orientation)
light.resetPosition = "Yeniden ortala";

// Object's material
material = "Malzeme";
// See glossary
material.pbrRoughnessMetalness.warning = "Pürüzlülük ve Metaliklik seviyesi için PBR gölgeleme modu gereklidir.";
// See glossary
material.pbrReflectance.warning = "Yansıtma seviyesi için PBR gölgeleme modu gereklidir.";
// See glossary
material.pbrRefraction.warning = "Kırılma seviyesi için PBR gölgeleme modu gereklidir.";
// See glossary
material.pbrSubsurface.warning = "Yüzey altı saçılımı için PBR gölgeleme modu gereklidir.";
// Value that says how much light will change direction when hitting the surface
material.ior = "Kırılma Endeksi";
// an object-level value that overrides the roughness interior/surface of the mesh
material.paintingOverride = "Boyamanın üzerine yaz";
// The roughness in the inside is turbidity
material.paintingOverride.help = "Biri yüzeyde, biri de içeride olmak üzere iki tür pürüzlülük vardır.

Ancak, boyanabilecek sadece bir pürüzlülük vardır, dolayısıyla iki pürüzlülüğün de değeri aynıdır.";
// Glossiness is simply the opposite of roughness
material.refraction.surface = "Yüzey";
// Synonym: turbidity
material.refraction.interior = "İç alan";
// Set the roughness of the object with a value of 0
material.paintGlossy = "Parlak boyama";
material.paintGlossy.help = "Nesneyi 0 pürüzlülüğünde ve metaliklik seviyesinde boyar, böylece keskin kırılmalara yol açar.

Bu, boyama menüsüne gidip rengi devre dışı bırakarak tümünü boya özelliğini kullanmakla aynıdır.";
// Simulate the light being absorbed when it travels through the volume.
material.absorptionEnable = "Emilim";
material.absorptionEnable.help = "Hacmin içinden geçerken, emilen ışığı simüle eder.

İçinden daha çok ışık geçirdiğinden, kalın alanlar koyulaşırken, ince kısımlar parlar.

Efekt nesne şekline çok bağlıdır, nesne kalınlığının sadece yaklaşık bir değeri kullanılır.";
material.absorptionFactor = "Faktör";
// Depth means how far the light can travel under the surface
material.subsurfaceDepth = "Derinlik";
// Enable translucency (same as subsurface but only affect lights that enter a solid and escape from the other side)
material.translucency = "Yarı saydamlık";
material.translucency.help = "Yarı saydamlığı görebilmek için gölgeler ortaya çıkaran bir ışık gereklidir.";
// Opacity factor, the opposite of transparency (synonym: Alpha)
material.opacity = "Opaklık";
// Fully opaque material
material.type.opaque = "Opak";
material.type.opaque.help = "Bu varsayılan malzeme türüdür.

Boyalı verteks alpha, opaklık dokusu veya renk kanalının alpha kanalı, araya karışmayla dikkate alınacaktır.

Yalnızca ana opaklık kaydırıcısı göz ardı edilecektir.";
// Fully opaque material
material.type.shadowCatcher = "Gölge yakalayıcı";
material.type.shadowCatcher.help = "Cisim, ışıklar tarafından düşürülen gölgeler hariç tamamen geçirgen hale gelir.

Bu mod genellikle düzlem geometrisi üzerinde kullanılır.";
material.type.shadowCatcher.warning = "Sahnenizde gölgeli ışıklar yok, Gölge Verici devre dışı kalacaktır. 

Aksi taktirde, gölge yakalayıcı tamamen metalikse ve SSR (Yansıma) Post İşlem etkinse, Gölge Yakalayıcı sahneyi yansıtabilir.";
// See glossary
material.type.subsurface = "Yüzey altı";
material.type.subsurface.help = "En iyi sonucu elde edebilmek için PBR gölgeleme moduna geçebilir ve ideal olarak loş bir ortamda en az bir yönlendirilmiş ışık kullanabilirsiniz.";
// Transparency mode, alpha blendingd
material.type.blending = "Karışım";
material.type.blending.help = "Opaklık değerinde küçük bir ayarlama yaparak nesneyi yarı saydam yapar.

Gerçek zamana bağlı kısıtlamalardan dolayı, nesnenizin karmaşık bir şekli varsa, farkedilir seviyede görsel artifaktlar ortaya çıkabileceği unutmamalıdır.";
// Transparency mode
material.type.additive = "Eklenti";
material.type.additive.help = "Opaklık değerinde küçük bir ayarlama yaparak nesneyi yarı saydam yapar.

Bu yöntem Karışım yöntemine göre daha az artifakt ortaya çıkarır, ama nesne daha parlak olur.";
// Transparency mode based on dithering
// https://en.wikipedia.org/wiki/Dither
material.type.dithering = "Renk Taklidi";
material.type.dithering.help = "Bazı pikselleri gelişigüzel atarak, nesneyi yarı şeffaf yapar.";
// Simulate glass-like material
material.type.refraction = "Kırılma";
material.type.refraction.help = "Bu mod cam malzemeleri simüle etmek için kullanılabilir.

Gerçek zamana bağlı kısıtlamalardan dolayı, öz kırılma veya çok katmanlı kırılma sınırlıdır.";
material.castShadows = "Gölgelendir";
material.receiveShadows = "Gölge al";
// Lights are ignored, the object will be displayed with color only
material.alwaysUnlit = "Her zaman karanlık";
// Inverse the side of the object triangles
// https://en.wikipedia.org/wiki/Back-face_culling
material.flipCulling = "Ters culling";
// How much light a surface will reflect (synonym: specular)
material.reflectance = "Yansıtıcılık";
material.reflectance.help = "Malzemenin metalik olmayan malzemelerden alacağı yansıma miktarını kontrol eder.

Çoğunlukla varsayılan değer kullanılmalıdır (normal açıda standart %4 yansıyan ışığa denk gelen).";
// Material preview in the viewport
material.preview = "Malzeme rengi önzileme";
material.preview.help = "When you modify a material, a preview will be displayed in the viewport on the selected object.

The preview is shown while you interact with the color, roughness, metalness, opacity and intensity sliders.";
// Menu name
menu.files = "Dosyalar";
// Menu name
menu.scene = "Görünüm";
// Menu name
menu.multires = "Çoklu Çözünürlük";
// Menu name
menu.voxel = "Voksel";
// Menu name
menu.dynamic = "DinTopo";
// Menu name (Synonym: Misc, Other)
menu.topology = "Çeşitli";
// Menu name
menu.primitive = "Primitif";
// Menu name
menu.render = "İşle";
// Menu name
menu.material = "Malzeme";
// Menu name
menu.postprocess = "Süreç sonrası işlemler";
// Menu name
menu.camera = "Kamera";
// Menu name
menu.background = "Arka Plan";
// Menu name
menu.tool = "Araç";
// Menu name
menu.stroke = "Darbe";
// Menu name
menu.alpha = "Alfa";
// Menu name
menu.filter = "Filtre";
// Menu name
menu.falloff = "Düşüş";
// Menu name
menu.paint = "Boya";
// Menu name
menu.symmetry = "Simetri";
// Menu name
menu.operation = "İşlem";
// Menu name (pencil pressure)
menu.pressure = "Basım Şiddeti";
// Menu name
menu.gesture = "Hareket";
// Menu name
menu.layers = "Katmanlar";
// Menu name
menu.settings = "Ayarlar";
// Menu name
menu.interface = "Arayüz";
// Menu name
menu.bindings = "Atamalar";
// Menu name
menu.history = "Geçmiş";
// Menu name
menu.historySettings = "Ayarlar";
// Menu name
menu.about = "Hakkında";
// Menu name
menu.debug = "Ayıkla";

// Operation on the object (action)
mesh.holes = "Delikleri";
// If the object has holes, the algorithm will close them
mesh.holes.close = "Delikleri kapat";
// Says how dense (number of triangles) the algorithm will use in order to fill holes
mesh.holes.detail = "Detay";
// If the mesh has disconnected parts, it will be split/separated into objects
mesh.separate = "Ayır";
// When converting the object to a triplanar primitive, some object features will be lost
mesh.triplanar.warning = "Katmanlar, boyama ve çoklu çözünürlük kaybolacak.";
// Resolution of the triplanar grid
mesh.triplanar.resolution = "Çözünürlük";
// Make the triplanar a regular cube (all 3 dimension equal)
mesh.triplanar.cubic = "Küpe zorla";
// Covnert an object to a triplanar primitive
mesh.triplanar.convert = "Dönüştür";
// Static object means "static topology"
mesh.static = "Doku Örgüsü";
// See glossary
mesh.multires = "Çoklu Çözünürlük";
// Dynamic topology
mesh.dynamic = "DinTopo";

// Disable this option to have per-tool material settings (instead of shared settings)
paint.useGlobal = "Global malzeme";
paint.useGlobal.help = "Bu seçenek etkinse, seçilen malzeme diğer araçlardakiyle aynı olur.

Sadece pürüzlülük, metaliklik seviyesi ve renk ayarlarının dikkate alındığı unutulmamalıdır.";
// The current tool will paint the object if this option is enabled
paint.usePainting = "Darbe boyama";
// If true save the textures data into
paint.preset.embed = "Dokuları göm";
paint.preset.embed.help = "The textures can be found in the Nomad textures/ folder.
The material presets can be found in the Nomad materials/ folder.

When this option is off, the material preset only reference the texture inside the textures/ folder.

You can enable this option to make a copy of the textures inside the material preset.
It can be useful if you want to share a textured preset without providing the associated textures.";
paint.preset.embed.apply = "Apply to all materials";
// Factor/Opacity of paint tool
paint.intensity = "Boyama yoğunluğu";
// Apply the paint on the object
paint.paintAll = "Tümünü boya";
paint.paintAll.help = "Geçerli malzemeyi nesneye uygular.";
paint.paintAll.help.mask = "Maske uygulanan alan etkilenmeyecek.";
paint.paintAll.help.hide = "Gizlenmiş alan etkilenmeyecek.";
paint.paintAll.help.opacity = "Yukarıdaki araç boyama faktörünü kullanın.";
paint.paintAll.help.layer = "Bir . boyanmamış alanı etkilenmeyecek.";
paint.strokePainting.title = "Boyama";
// Brush stroke texture
paint.texture.warningEnable = "Doku projeksiyonuna izin vermek için darbe boyamanın etkinleştirilmesi gerekir (onay kutusu yukarıda)!";
paint.texture.warningIgnored = "Geçerli araç dokuları kullanamaz!";
// use stencil mode
paint.stencil = "Şablon";
// Inherit stroke falloff option for the painting
paint.tool.help = "Boyama darbelerinin yoğunluğunu modüle etmek için araç alfa, düşüş ve rastgeleleştirici kullanın.

Bu seçenekler tüm boyama özelliği için göz ardı edilir, ancak üç düzlemli varyant için alfa dikkate alınır.";
// when the user choose a new item name (through iOS/Android virtual keyboard)
input.name = "Yeni ad";
// when the user choose a new number value (through iOS/Android virtual keyboard)
input.number = "Yeni değer";
// when the user choose a new color (through iOS/Android virtual keyboard)
input.hexcolor = "Yeni renk (altıgen format)";

// Post process effect
postprocess = "Süreç sonrası işlemler";
// Denoise
postprocess.denoise = "Gürültü Giderici";
postprocess.denoise.help = "Tüm kareler birleştikten sonra bir gürültü giderme geçişi uygula.";
postprocess.denoise.warning = "Bu pahalı bir işlemdir, yalnızca görüntü gürültülü ise bu etkiyi etkinleştirin.";
// Quality vs performance
postprocess.quality = "Kalite";
postprocess.quality.help = "Performansı düşürmeyi göze alarak kaliteyi artırmak için bu seçenekleri etkinleştirin.";
// More samples means better quality but slower performance
postprocess.maxSamples = "Maks. örnek";
// Full resolution (1:1 resolution) instead of half resolution
postprocess.fullResolution = "Tam Çözünürlük";
// Number of frames that we accumulate (higher value means better quality)
postprocess.accumulateCount = "Maks. kare örnekleme";
postprocess.accumulateCount.help = "İşleme durmadan önce toplanacak maksimum kare sayısı.

İşleme durduktan sonra, Nomad herhangi bir şey yapmaz ve böylece pil ömründen tasarruf eder.

Başta aşağıdakiler olmak üzere, birçok işleme özelliği kare toplamadan faydalanır:
-Yumuşak Gölgeler
-Küresel Aydınlatma
-Yansıtma (SSR)
-Ortam Oklüzyonu
-Yüzeyaltı
-Alan Derinliği

Yüksek kare sayısı en çok Yumuşak Gölgeler ve Küresel Aydınlatma için gereklidir.
Yukarıda bahsedilen özellikler devre dışı bırakıldığında, Nomad işlemeyi daha önce durdurabilir.";
// The value is a ratio (0.5 means half resolution 2 means twice the resolution)
postprocess.renderRatio = "İşleme Çözünürlüğü";
postprocess.renderRatio.warning = "Pixel Art efektiyle geçersiz kılındı.";
postprocess.renderRatio.help = "Bu seçenek performansı çok etkiler.
x1.25 seviyesinden daha düşük bir değerde tutulması önerilir.

Bu seçenek ayarlarda kayıtlı değildir.";
// Temporal Anti-Aliasing (no need to translate "TAA")
postprocess.taa = "Anti-aliasing (TAA)";
postprocess.taa.help = "Kamerayı hareket ettirdiğinizde titremeyi azaltır.";
// Ditherhing pixel
postprocess.dithering = "Renk Taklidi";
postprocess.dithering.help = "Bantlanma artefaktlarını azaltmak için pikselleri serpiştirin.";
// Screen-Space Reflection (no need to translate "SSR")
postprocess.ssr = "Yansıma (SSR)";
postprocess.ssr.warning = "SSR için PBR gölgeleme modu gereklidir.";
// Screen-Space Global Illumination (no need to translate "SSGI")
postprocess.ssgi = "Küresel Aydınlanma (SSGI)";
// Thickness threshold for ssgi tracing algorithm (synonym: threshold, bias)
postprocess.ssgi.tolerance = "Tolerans";
postprocess.ssgi.warning = "SSGI için PBR gölgeleme modu gereklidir.";
// Screen-space ambient occlusion (SSAO)
// https://en.wikipedia.org/wiki/Ambient_occlusion
postprocess.ssao = "Ortam Oklüzyonu";
// How far the effect spreads
postprocess.ssao.radius = "Büyüklük";
// How strong the effect is
postprocess.ssao.factor = "Şiddet";
// Adjustment to fix artefacts
postprocess.ssao.bias = "Eğrilik sapması";
postprocess.ssao.bias.help = "Yüzey eğriliğine bağlı olarak efektin ne kadar hassas olduğudur.";
// Depth of Field (bokeh)
// https://en.wikipedia.org/wiki/Depth_of_field
postprocess.dof = "Alan Derinliği";
// The blur factor behind the focused point
postprocess.dof.blurFar = "Uzaklık bulanıklığı";
// The blur factor in front of the focused point
postprocess.dof.blurNear = "Yakınlık bulanıklığı";
postprocess.dof.focusTip = "Odak noktasını değiştirmek için bir nesneye dokunun.";
// Bloom (light bleeding)
// https://en.wikipedia.org/wiki/Bloom_(shader_effect)
postprocess.bloom = "Bahar";
// Intensity of the effect
postprocess.bloom.intensity = "Yoğunluk";
// How far the effect spreads
postprocess.bloom.radius = "Yarıçap";
postprocess.bloom.radius.help = "Parlamanın ne kadar yayılacağıdır.";
// Luminosity threshold (below this value, no bloom is generated)
postprocess.bloom.threshold = "Eşik";
postprocess.bloom.threshold.help = "Bir pikselin parlama yayıp yaymayacağına karar veren ışıldama eşiğidir.
Değer 0 ise, her şey parlama yapar.";
// https://en.wikipedia.org/wiki/Tone_mapping
postprocess.tone = "Ton Eşleştirme";
postprocess.tone.exposure = "Pozlandırma";
postprocess.tone.contrast = "Kontrast";
postprocess.tone.saturation = "Doygunluk";
postprocess.tone.hue = "Renk Tonu";
// No tonemapping operator is used
postprocess.tone.mapping.none = "Yok";
// A neutral tonemapping is used
postprocess.tone.mapping.neutral = "Nötr";
// Color curves
postprocess.curve = "Renk Düzenleme";
// Curve for pixel luminance
postprocess.curve.luminance = "Ana";
postprocess.curve.red = "Kırmızı";
postprocess.curve.green = "Yeşil";
postprocess.curve.blue = "Mavi";
// Reset color grading curves
postprocess.curve.resetAll = "Tümünü Sıfırla";
// https://en.wikipedia.org/wiki/Chromatic_aberration
postprocess.chromatic = "Kromatik aberasyon";
postprocess.chromatic.factor = "Şiddet";
// Darking on the edges
postprocess.vignette = "Vinyet";
// How far the effect spreads
postprocess.vignette.size = "Büyüklük";
// How sharp the edge of the effect is
postprocess.vignette.hardness = "Sertlik";
// Unblur the image (sharpening)
// https://en.wikipedia.org/wiki/Unsharp_masking
postprocess.sharpness = "Keskinlik";
postprocess.sharpness.factor = "Şiddet";
// Filmic Grain
// https://en.wikipedia.org/wiki/Film_grain
postprocess.grain = "Tanecik";
postprocess.grain.factor = "Şiddet";
// Accentuate the edges of the model
postprocess.curvature = "Eğrilik";
// main strength of curvatre
postprocess.curvature.factor = "Faktör";
// Color/Strength of concave curvature
postprocess.curvature.cavity = "Boşluk";
// Color/Strength of convex curvature
postprocess.curvature.bump = "Yumru";
// https://en.wikipedia.org/wiki/Pixel_art
postprocess.pixelArt = "Pixel Art";
// Override frame accumulation feature
postprocess.pixelArt.allowAccumulate = "Kare örneklemeye izin ver";
// Simulate scanline rendering (horizontal line)
postprocess.scanline = "Tarama çizgisi";
postprocess.scanline.factor = "Faktör";
// Spacing between lines
postprocess.scanline.spacing = "Aralık";

// Geometry Primitive (box, sphere, cylinder, etc)
primitive = "Primitif";
primitive.box = "Küp";
primitive.sphereCube = "Dörtgen Küre";
primitive.sphereUV = "UV Küre";
primitive.icosahedron = "İkosahedron";
primitive.cylinder = "Silindir";
primitive.cone = "Koni";
primitive.torus = "Kaide";
primitive.lathe = "Torna";
primitive.tube = "Tüp";
primitive.plane = "Düzlem";
primitive.triplanar = "Üç düzlemli";
primitive.needValidate = "Primitiflerin doğrulanması gerekir!";

// If enabled, we can edit primitive inside the viewport
primitive.edit = "Düzenle";
primitive.edit.help = "Görünüm penceresinde 3D düzenlemeye izin verir.

Primitifi değiştirmeden, Gizmo veya Dönüştürme aracıyla etkileşime geçmek istiyorsanız, bu özelliği devre dışı bırakabilirsiniz.";

// Primitive configuration
primitive.mainConfig = "Parametre";
// Interface section where we change the topology (number of triangles/polygons)
primitive.topology = "Topoloji";
// Interface section where we change the geometry (shape of the primitive)
primitive.geometry = "Geometry";

// Validating the primitive (then it can be sculpted)
primitive.validate = "Doğrula";
// Maximum number of faces of the primitives
primitive.maxFaces = "Maks yüz";
primitive.maxFaces.help = "Bir primitifin alabileceği maksimum yüz sayısıdır.

Bu limit sadece primitif doğrulanmadığında etkindir, doğrulandıktan sonra koruma gider.";
// Synonym: Flat subdivision
primitive.linear = "Lineer altbölümleme";
// Post as "subdivision that occurs after the primitive computation"
primitive.subdivision = "İşlem sonrası altbölümleme";

// Radius (of a sphere, torus, etc)
primitive.radius = "Yarıçap";
// Make sure the two end-point of a primitive (cylinder, tube, etc) have the same size
primitive.radius.sync = "Aynı yarıçap";
primitive.radius.start = "Yarıçap başlangıcı";
primitive.radius.end = "Yarıçap sonu";
// Size (of cube x dimension)
primitive.size = "Büyüklük";
primitive.sizeX = "X Büyüklüğü";
primitive.sizeY = "Y Büyüklüğü";
primitive.sizeZ = "Z Büyüklüğü";
// Division only impacts the topology (synonym: resolution)
primitive.division = "Bölüm";
primitive.divisionX = "Bölüm X";
primitive.divisionY = "Bölüm Y";
primitive.divisionZ = "Bölüm Z";
// Angle of torus, etc
primitive.angleX = "Açı X";
primitive.angleY = "Açı Y";
primitive.angleZ = "Açı Z";
// It means we try to keep regular sized quad (square) instead of highly distorted rectangule
primitive.constantDensity = "Sabit yoğunluk";
// Make sure the shape is perfectly spherical
primitive.projectOnSphere = "Kürede proje";
primitive.projectOnSphere.help = "Mükemmel bir kürede noktaları yaslar.";

// triplanar
primitive.triplanar.title = "Üç düzlemli";
primitive.triplanar.title.help = "Üç düzlemli, daha sonra çokgenleşecek bir voksel ızgarasını doldurmak üzere, 3 düzlemden maskeleme bilgilerini kullanır.

Bölüm veya büyüklük kaydırıcılarıyla etkileşime girerseniz, boyama bilgileri sıfırlanır (düzleştirme seviyesi iyidir).

Beklediğiniz şekilde çalışmayacağından, simetriyi devre dışı bırakmanız gerekebilir.

Diğer düzlemleri etkileyen bir düzlemi boyamak için maske panelinde `Topolojik bağlantılı` seçeneğini kullanabilirsiniz.";
// Make sure the box is a regular cube (same 3 dimension)
primitive.triplanar.sameSize = "Aynı büyüklük (küp)";
primitive.triplanar.polish = "Düzleştirme seviyesi";
// Mask refers to the painted mask on the triplanar planes
primitive.triplanar.resetMask = "Maskeyi sıfırla";
// One side of a cube (the back plane)
primitive.isolate.back = "Geri";
// One side of a cube (the right plane)
primitive.isolate.right = "Sağ";
// One side of a cube (the bottom plane)
primitive.isolate.bottom = "Alt";
// Plane
primitive.planeSameSize = "Aynı büyüklük (kare)";
// Make the plane a disk/ellipse instead of a rectangle
primitive.planeDisk = "Disk";
// Box
primitive.boxRegular = "Aynı büyüklük (küp)";
// Torus
primitive.torus.radiusOuter = "Dış yarıçap";
primitive.torus.radiusInner = "İç yarıçap";
primitive.torus.angle = "Açı";
primitive.torus.angleOffset = "Açı kaydırma";
// Cylinder
primitive.cylinder.height = "Yükseklik";
// Cone
primitive.cone.radius = "Yarıçap";
primitive.cone.height = "Yükseklik";
// Hole sub menu (cylinder, tube, etc)
primitive.hole = "Delik";
// Make a hole in the primitive to make it hollow
primitive.hasHole = "Deliği var";
// Curve profile (synonym: profile, curve)
primitive.profile = "Profil";
primitive.profile.viewport = "Görünümde göster";
// If the revolution surface has caps (E.g: cylinder)
primitive.cap = "Kapak";

// Singular of Repeaters (Nodes that make many copies of its children (type of mirror/curve/array/radial))
repeater = "Tekrarlayıcı";
// All the new items will be inserted inside the bound rather than outside
repeater.array.fitInside = "İçine sığdır";
// The object will follow the curve
repeater.curve.align = "Hizala";

// Import resource (Alpha, Textures, MatCaps, etc)
resource.import = "İçe aktar...";
// iOS Photos gallery
resource.import.ios.photos = "Fotoğraflar";
// iOS Files App
resource.import.ios.files = "Dosyalar";

scene.title = "Görünüm";
scene.title.help = "Görülebilir/seç düğmelerini kullanırken, diğer nesneleri kolayca seçebilmek için parmağınızı basılı tutun ve sürükleyin.

Ayrıca görülebilir/seç düğmelerini basılı tutarak da alt öğeleri dâhil edebilirsiniz.";
// The view will focus on the item when we click on it
scene.focus = "UI: Öğeye çift dokunduğunda üzerine odaklan";
// Add new object on gizmo position
scene.addOnGizmo = "Kontrol çubuğu üzerinde";
scene.addOnGizmo.help = "Düğümü kontrol çubuğunun pozisyonuna taşıyın (kontrol çubuğu aracı seçiliyse)";
// Select the gizmo tool after adding a new object
scene.addSelectGizmo = "Kontrol çubuğunu seç";
scene.addSelectGizmo.help = "Yeni bir düğüm eklerken kontrol çubuğu aracını seçin";
// Icon size in pixel (min/max)
scene.iconSize = "Simge boyutu";
// Min size of icon
scene.iconSize.min = "Min";
// Max size of icon
scene.iconSize.max = "Maks";
// display hierarchy lines (visibility helper)
scene.showHierarchy = "Hiyerarşi çizgileri";
scene.showHierarchy.help = "Ebeveyn ile çocukları arasında görünümde bir çizgi göster.";
scene.showHierarchyNomadPivot = "Nomad pivotunu kullan";
scene.showHierarchyNomadPivot.help = "Nomad pivotu, Dönüşüm ve Kontrol çubuğu araçları tarafından kullanılan pivotudur.

Bu seçenek devre dışı bırakılırsa, doğal temel pivot kullanılacaktır.
Bazı durumlarda bu temel pivot, nesnenin kendisi merkezinden uzakta olabilir!";
// The view will focus on the item when we click on it
scene.syncVisible = "Görünürlüğü Senkronize Et";
scene.syncVisible.help = "Etkinleştirildiğinde, görünür (göz) simgesini kullanmak tüm seçili öğeleri etkileyecektir.";
// Merge 2 objects without modifying the geometry or the topology
scene.join = "Birleştir";
// Group the selected object with a new created Empty Node as a parent
scene.group = "Topluluk";
// Move the item outside its parent (synonym: ungroup)
scene.unparent = "Ebeveyn Bağını Kaldır";
// Mirror node type, a node that make many copies of its children (mirror symmetry)
scene.mirror = "Aynala";
// Curve node type, a node that make many copies of its children (along a curve)
scene.curve = "Eğri";
// Array node type, a node that make many copies of its children (grid repetition pattern)
scene.array = "Dizi";
// Radial node type, a node that make many copies of its children (radial symmetry)
scene.radial = "Radyal";
// Nodes that make many copies of its children (type of mirror/curve/array/radial)
scene.repeaters = "Tekrarlayıcılar";
scene.repeaters.help = "Sahne hiyerarşisinde altında bulunan herhangi bir geometri örneğini yapan tekrarlayıcı düğümler.";
// Validate button
scene.validateGroup = "Doğrula";
// Keep instances in the scene
scene.validateGroup.keepInstances = "Örnekleri Koru";
// If we should join children
scene.validateGroup.joinChildren = "Alt öğeleri birleştir";
// Merge/weld 2 objects by recomputing all the topology and creating a new object
scene.mergeVoxel = "Voksel birleşimi";
scene.voxelResolution = "Çözünürlük";
// The hidden objects will be "substracted" (the object will carve the other object)
scene.subtractionTip = "Çıkarma: Nesneyi gizle";
// If all the objects are hidden, only the parts where they intersect (collide) will be kep
scene.intersectionTip = "Kesişme: Tüm nesneleri gizle";

// Need at least to select one object
scene.noneButNeedAtLeastOne = "Hiçbir nesne seçili değil, lütfen en az bir nesne seçin.";
// Need to select one object only
scene.noneButNeedOne = "Hiçbir nesne seçili değil, lütfen bir nesne seçin.";
// Need to select one object only
scene.onlyOneObject = "Birden çok nesne seçili, lütfen bir nesne seçin.";
// Boolean operation
scene.boolean = "Boolean";
scene.boolean.help = "Merge, subtract or intersect objects by performing a boolean operation.

The operation can fail if some objects are not manifold or not watertight.

If the boolean fails, you can always use the voxel remesher on the problematic object to ensure it's a watertight manifold.";
// Weld intersection
scene.boolean.mergeIntersection = "Kesişimi Kaynakla";

// General scene display settings
settings.display.title = "Ekran ayarları";
// Wireframe (show triangles and quad edges)
settings.wireframe = "Genel taslak";
// Display the material texture
settings.debugChannel = "Doku Göster";
// Display the material texture in the background
settings.debugChannel.onBackground = "Arkaplanda";
// Display the material texture on the mesh
settings.debugChannel.onMesh = "Örgü Üzerinde";
// If the object is opened (a simple plane for example), two sided means we'll be able to see if from the two sides of the planes
settings.twoSided = "İki taraflı";
settings.twoSided.help = "Yüzler her iki taraftan da görülebilir.";
// If we colorize the inverted side of faces
settings.backface.color = "Arka yüzün rengi";
// Color of the inverted side of faces
settings.backface.colored = "Renklendirilmiş arka yüz";
// Outline (contour highlight around the selected object)
settings.outline = "Dış Hatlar";
// Outline (contour highlight around the selected object)
settings.outline.help = "Seçilen nesneler anahatla vurgulanır.";
settings.outline.thickness = "Kalınlık";
// Navigation cube (easy to snap/align the view)
settings.snapCube = "Yaslama küpü";
// Move the navigation cube to the bottom of the screen
settings.snapCube.bottom = "Alt";
// Move the navigation cube on the left side of the screen
settings.snapCube.left = "Sol";
// Flip the camera (rotate 180° to see the other side)
settings.snapCube.flip = "180° Çevir";
settings.snapCube.flip.help = "Görünüm zaten sabitlendiğinde görünümü çevir.";
// Alignment (can be auto/on/off)
settings.snapCube.align = "Hizalamayı Sınırla";
settings.snapCube.align.help = "Görünümleri dünya ekseni ile hizalayın. Etkinleştirildiğinde, sadece 6 sabit görünüm mümkündür.

Otomatikte, kısıtlama sadece kamera Yörünge modundayken gerçekleşir.";
// Stats (information logs about the scene displayed on screen)
settings.stats = "İstatistik";
settings.stats.right = "Sağ";
settings.stats.all = "Tam görünüm göster";
// Grid
settings.grid = "Izgara";
// Cursor
settings.cursor.title = "İmleç";
settings.cursor.whileSculpting = "Şekillendirirken daireyi göster";
// A small indicator dot
settings.cursor.showDot = "Küçük noktayı göster";
settings.cursor.showDot.help = "Nokta kamera eksen noktası olarak veya siz şekillendirme yaparken görünebilir.";
settings.cursor.showRope = "Dengeleyici ipi göster";
// indicator
settings.indicator.title = "Gösterge";
settings.indicator.title.help = "Görsel bir göstergeyi (eğitimler, ekran kaydı vb.) görüntüleyin.";
settings.indicator.size = "Büyüklük";
// Highlight (the object glows when we select it)
settings.highlight.selection = "Seçimi vurgula";
// Highlight settings
settings.highlight = "Vurgula";
settings.highlight.duration = "Süre";
// Mesh that are not selected will be dark
settings.darkenUnselected = "Seçilmemiş nesneleri karart";
// https://en.wikipedia.org/wiki/Shading
settings.smoothShading = "Yumuşak gölgelendirme";
// Experimental feature
settings.partialDraw = "Kısmi Çizim";
settings.partialDraw.help = "Deneysel özellik!

Yüksek seviyede çoklu ağ örgüsünün nispeten küçük bir kısmını şekillendiriyorsanız bunu kullanın.

Şekillendirmeyi düzleştirmesi gerekir, fakat genel taslağı etkinleştirmemelisiniz!

Ayrıca, fırça darbeleri esnasında görsel artifaktlar da ekleyebilir";
settings.partialDraw.warning = "Görsel artifaktlar çok rahatsız edici ise bu seçeneği kapatmayı unutmayın!";
// Disable this option to force a white uniform paint instead of showing the objects painting
settings.showPainting = "Boyamayı göster";
// Show and use the masking on the mesh
settings.showMasking = "Maskeyi göster";
// Disable this option to force show the hidden faces
settings.showDiscard = "Gizlemeyi Kullan";
// Show icon on the canvas
settings.icon = "Simge";
// Show icons on the canvas
settings.icons = "Simgeler";
// Tooltip
settings.icons.help = "Doğrudan seçip düzenleyebilmeniz için kanvasta bir simge görüntüler.";
// Hole filling settings
settings.hole = "Delik doldurma";
// Allow the hole filling algorithm to handle non-manifold (non regular topology)
settings.hole.nonManifold = "Manifolt olmayanları doldur";
settings.hole.nonManifold.help = "Manifolt olmayan delikleri doldurmaya çalışır.
Bu seçenek ayarlarda kayıtlı değildir.";
// Maximum number of vertices (points)
settings.multires.maxVertices = "Maks. verteks sayısı";
settings.multires.maxVertices.help = "Nomad alt bölümlemeden önce bellek kontolü yürütmez, çok yüksek sayılar kolaylıkla çökmelere yol açabilir.";
settings.multires.lowResVertices = "Düşük çözünürlük eşiği";
settings.multires.lowResVertices.help = "Kamerayı hareket ettirdiğinizde ağ örgüsünün daha düşük bir çözünürlüğü görüntülenebilir.

Ağ örgüsünü daha yüksek bir çözünürlükte görüntülemek isterseniz, bu değeri artırabilirsiniz.";

// The main rendering mode
shading = "Gölgelendirme";
// Main rendering mode (PBR stands for Physically Based Rendering)
shading.pbr = "Aydınlatılmış (PBR)";
shading.pbr.help = "Bu modda bir HDR ortamının yanı sıra ışıklar (gölgelerle birlikte) ekleyebilirsiniz.

Metaliklik ve pürüzlülüğü de boyayabilir, böylece malzemenizin görünümünde daha hassas bir kontrol elde edebilirsiniz.";
// Fast rendering mode for sculpting purpose
shading.matcap = "MatCap";
shading.matcap.help = "MATerial CAPture (malzeme edinimi) anlamına gelen MatCap, tek bir görüntüde hem ışıklandırma hem de malzeme bilgilerini oluşturur.

Bu, çoğunlukla kaba şekillendirmeye uygun olan, hızlı bir işleme modudur.";
// Unlit rendering mode, it simply displays a solid/flat color
shading.unlit = "Karanlık";
shading.unlit.help = "Işıklandırma olmadan, tek renkli gölgelendirme modudur.";
// Helper rendering mode that display solid colors
shading.object = "Nesne ID";
shading.object.help = "Her nesneye gelişigüzel bir renk atandığı karanlık işleme modudur.

Bu özellikle görünümüzde bir çok nesne varsa faydalıdır.";
// Helper rendering mode that display solid colors
shading.instance = "Örneklendirmek ID";
shading.instance.help = "Nesne ID ile aynı, ancak örnekler aynı renge sahip olacak.";
// Helper rendering mode that display solid colors
shading.material = "Malzeme Kimliği";
shading.material.help = "Her malzeme için tek renk göster.";
// Randomize colors
shading.id.randomize = "Rasgele id atama";
shading.textures = "Dokular kullan";
shading.textures.help = "Hâlen Nomad içinde dokular oluşturamaz ya da düzenleyemezsiniz.

Ama dokular içeren bir dosyayı içe aktarırsanız, bunları yapabilmeniz gerekir.

• Desteklenen dokular
Opaklık: Aydınlatılmış, MatCap, Karanlık
Normal: Aydınlatılmış, MatCap
Renk: Aydınlatılmış, Karanlık
Yayıcı: Aydınlatılmış
Pürüzlülük: Aydınlatılmış
Metaliklik: Aydınlatılmış";
// Lights
shading.lights = "Işıklar";
shading.lights.addLight = "Işık ekle";
shading.lights.warning = "Işıklar için PBR gölgeleme modu gereklidir.";
// Environment based lighting (synonym: HDRI)
shading.environment = "Ortam";
shading.environment.import = "HDR içe aktar";
shading.environment.exposure = "Pozlandırma";
shading.environment.backgroundBlur = "Bulanıklaştır (arka plan)";
shading.environment.rotation = "Döndürme";
shading.environment.rotation.help = "Görünüm penceresinde 3 parmağınızı yatay olarak kaydırarak, ortamı döndürebilirsiniz.";
// The environment will always be aligned with the camera (so that the lighting is consistent)
shading.environment.attachedToCamera = "Kameraya bağlı";
shading.environment.attachedToCamera.help = "Ortamı kameraya bağlar.

Işıklandırmanın sabit olmasını zorlar ve bu da şekillendirme yaparken faydalı olur.";
shading.matcap.rotation = "Döndürme";
shading.matcap.rotation.help = "Görünüm penceresinde 3 parmağınızı yatay olarak kaydırarak, MatCap'i döndürebilirsiniz.";
shading.matcap.global = "Global MatCap kullan";
shading.matcap.global.help = "Belirli bir ağ örgüsünde farklı bir MatCap kullanmak için bu seçeneğin işaretini kaldırın.";

// bottom shortcut buttons (should be SHORT)
shortcut.maskVisible = "Maskele";
shortcut.solo = "Solo";
shortcut.xray = "X-Ray";
shortcut.voxelRemesh = "Voksel";
shortcut.wireframe = "Taslak";
shortcut.cameraReset = "Sıfırla";
shortcut.cameraSnap = "Yasla";
shortcut.lockSelection = "Kilitle";
shortcut.lockSelection.help = "Etkinleştirildiğinde, bir ağ örgüsüne dokunarak seçimi değiştiremezsiniz.";
shortcut.grid = "Izgara";

// Memory taken by the scene
stat.ramScene = "Görünüm";
// Vram = Video RAM (Video Memory, the memory of the graphic card)
stat.vramScene = "Vram görünümü";
// Vram = Video RAM (Video Memory, the memory of the graphic card)
stat.vramRender = "Vram işleme";
// Vram = Video RAM (Video Memory, the memory of the graphic card)
stat.vramTextures = "Vram dokuları";
// Memory taken by the undo/redo history
stat.ramHistory = "Geçmiş";
// Memory taken by other stuffs
stat.ramOther = "Diğer";
// Memory used by the app (RAM, not storage!)
stat.usedMemory = "Kullanılan bellek";
// Memory available for the app (RAM, not storage!)
stat.freeMemory = "Serbest bellek";
// RAM, not storage!
stat.ram = "RAM";
stat.used = "Kullanılan: $0";
stat.free = "Serbest: $0";
stat.faces = "Yüzler";
stat.triangles = "Üçgenler";
stat.vertices = "Verteksler";
// quadrangular polygon (polygon with 4 sides)
stat.quads = "Dikdörtgenler";
stat.vertex = "Verteks";
stat.scene.face = "Görünümdeki yüzler";
stat.scene.vertex = "Görünümdeki verteksler";

// Brush stroke
stroke = "Darbe";
// The brush radius is either screen-space (fixed size on the screen) or world-space (fixed size in the scene)
stroke.useWorldRadius = "Görünüme sabitli yarıçap";
// The settings is shared among every tools
stroke.useWorldRadius.help = "Bu tüm araçlarla paylaşılır.";
// Share the radius value among every tools.
stroke.useShareRadius = "Yarıçapı paylaş";
stroke.useShareRadius.help = "Yarıçap değerini tüm araçlara paylaşır.";
// When doing a brush stroke, the spacing is the distance between 2 sculpt operations
stroke.spacing = "Darbe aralığı";
// Adjust the brush intensity to ensure consistent deformation depending on the stroke spacing.
stroke.spacing.adjust = "Aralık yoğunluğunu ayarla";
stroke.minSpacingAdjustIntensity.help = "Darbe aralığına bağlı olarak, tutarlı bir deformasyon sağlayabilmek için fırça yoğunluğunu ayarlar.";
stroke.minSpacing.help = "Araç yarıçapına göre her darbe arasındaki boşluk.

Daha düşük değerlerde darbeler daha düzgün olur, ama performans düşer.";
// Brush stroke smoothing
stroke.lazySmooth = "Darbe düzleştirme";
stroke.lazySmooth.help = "Daha düz bir darbe elde edebilmek için çoklu işaretçinin ortalama konumu.

Değerler yüksek olduğunda, darbe işaretçinin arkasında kalır, ama daha sonra yakalar.";
// Make the brush stroke lags behind the pointer cursor
stroke.lazyRadius = "Yavaş dengeleyici ip";
stroke.lazyRadius.help = "Darbeler, belirli bir mesafede işaretçi konumunun arkasında kalır.

Bu, düzgün çizgiler çizmekte kullanılabilir.";
// It is not a per-tool settings
stroke.globalSettings = "Bu global bir ayardır";
// Start the brush stroke from the last sculpted position to ensure there is no discontinuity
stroke.snapRadius = "Yaslama yarıçapı";
stroke.snapRadius.help = "İşaretçi en son kaydedilmiş darbeye yakın bir yerdeyse, darbeyi yaslar.

Bu, uzun sürekli çizgiler çizerken sık sık ara vermek için faydalı olabilir.";
// offset between the cursor and the brush stroke (for fat finger on small screen)
stroke.sculptOffset = "Darbe kaydırma";
stroke.sculptOffset.help = "Darbeye sabit bir kaydırma uygular.

Bu seçenek, küçük bir ekranda parmaklarınızı kullanırken, parmağınızın darbeyi kapatmamasına yardımcı olmak içindir.";
stroke.accumulate = "Darbe biriktir";
stroke.accumulate.help = "Bu seçenek etkinleştirildiğinde, darbe başına ekleyip çıkarabileceğiniz madde miktarı sınırsız olur.";
// The tool can use DynTopo
stroke.useDynamic = "Dinamik topolojiye izin ver";
// Only sculpt the part that are linked topologically
stroke.connect = "Bağlı topoloji";
stroke.connect.help = "Bu seçenek, sadece seçilmiş yüzeye bağlı olan verteksleri şekillendirir.

Bu genellikle Hareket aracında kullanılır, örneğin sadece kendi başka bir kısımla çakışan bir kısmı hareket ettirmek istediğinizde olduğu gibi.";
stroke.connect.short = "Bağlı";
// sculpt on hide or mask
stroke.protect = "Alanı koru";
stroke.protect.hide.help = "Otomatiğe ayarlandığında, tel kafes menüsüne bakın (gizli yüzlerde tel kafes görünüyorsa gizli yüzler düzenlenecektir).";
// Only sculpt the vertex that points toward the camera
stroke.culling = "Sadece öne bakan verteks";
stroke.culling.help = "Bu seçenekte arkaya bakan verteksler göz ardı edilir.

Bir ince geometrinin bir kısmını diğer tarafa etki etmeden boyamak istiyorsanız, bu faydalı olabilir.

Şekillendirmede de kullanılabilir, ama bazı artifaktlar deneyimleyebilirsiniz.";
// Infinite depth, move everything under the circle, disregarding depth
stroke.silhouette = "Siluet";
stroke.silhouette.view = "Görüntüle";
stroke.silhouette.snapped = "Sabitlendiyse";
stroke.silhouette.closest = "En Yakın";
// Only sculpt the vertex that points toward the direction of the deformation
stroke.sameSide = "Sadece aynı taraftaki verteks";
stroke.sameSide.help = "Deformasyonun ters yönündeki verteksler göz ardı edilir.";
stroke.onlyLasso = "Sadece lasso aracı için etkin olan ayarlar.";

// Here sampling refers to the app gathering information under the mouse
stroke.area = "Alan örnekleme";
stroke.area.help = "Bazı fırçalar veya vuruş seçenekleri, çalışmak için yüzeye normal bir düzleme ihtiyaç duyar.
Bu ortalama düzlemi nasıl hesaplayacağınızı, örnekleme alanını araç yarıçapının bir oranı olarak ayarlayarak kontrol edebilirsiniz.

%100'de, seçim çemberi içindeki her nokta dikkate alınır.
%0'da, sadece en yakın köşe veya üçgen dikkate alınır.";
// Sampling radius size (percent)
stroke.area.normal.radius = "Normal yarıçap";
// Sampling radius size (percent)
stroke.area.point.radius = "Pozisyon yarıçapı";
// Sampling averaging
stroke.area.normal.average = "Normal ortalaması";
// Sampling averaging
stroke.area.point.average = "Pozisyon ortalaması";
// Keep sharp edges
stroke.keepSharp = "Keskin kenarları koru";
stroke.keepSharp.help = "
Derinlik filtreleme";

// Only paint the part of the mesh above a certain height
stroke.depthFilter = "Derinlik maskesi";
stroke.depthFilter.help = "Belirli bir mesafenin üstünde veya altında olan noktaları hariç tutun (Alan örnekleme).

Örneğin, tümsekleri veya oyukları boyamak için kullanılabilir.";
stroke.depthFilter.max = "Üst alan";
stroke.depthFilter.min = "Alt alan";
stroke.depthFilter.offset = "Yükseklik ofseti";

// Invert the pixel (black <-> white)
stroke.alpha.invert = "Pikselleri tersine çevir";
// Repeat the alpha image (pattern)
stroke.alpha.wrap = "Döşeme";
// No repeat pattern
stroke.alpha.wrap.none = "Yok";
// Repeat the alpha in a regular manner (tiles with seams)
stroke.alpha.wrap.repeat = "Tekrarla";
// Repeat the alpha in a mirrored (seamless tiling)
stroke.alpha.wrap.mirror = "Aynala";
// Tight fit when using tiling
stroke.alpha.fit = "İçine sığdır";
stroke.alpha.fit.help = "This option is only relevant if the alpha and brushes textures are non square.

When enabled, each images will tile independently with no spacing.
You can disable this option if you want to keep the alpha and other images synchronized, in case their ratio are not the same.";
// Alpha rotation
stroke.alpha.rotation = "Döndürme";
stroke.alpha.rotation.lock.help = "Alfa yönlendirmesini kilitle.

Eğer dönüş kilidi açıksa, yönlendirme gerçek zamanlı olarak fırça yönünü takip edecektir.";
// Repeat the image
stroke.alpha.tiling = "Döşeme";
// Scale the image (make it bigger or smaller)
stroke.alpha.scale = "Ölçeklendirme";
stroke.alpha.scale.help = "Minimum değerde, alfa karesi araç çember yarıçapının içindedir.";
// Middle-point value at which no deformation occurs
stroke.alpha.midValue = "Orta değer";
stroke.alpha.midValue.help = "Deformasyon oluşmayan orta nokta değeri.

(Orta değer = 0)
-Siyah: yer değiştirme yok
-Beyaz: pozitif yer değiştirme

(Orta değer = 0,5)
-Siyah: negatif yer değiştirme 
-Beyaz: pozitif yer değiştirme

(Orta değer = 1)
-Siyah: negatif yer değiştirme 
-Beyaz: yer değiştirme yok";
// Synonymous: Scatter/Jitter/Randomize
stroke.jitter = "Rastgeleleştir";
// Sculpt and paint along the brush stroke at regular spacing
stroke.type.dot = "Nokta";
// Sculpt and paint along with alpha spaced by brush radius
stroke.type.roll = "Yuvarla";
// Sculpt and paint with alpha projected on screen stencil
stroke.type.tile = "Döşeme";
// Sculpt and paint with alpha projected on 3 axis
stroke.type.triplanar = "Üç düzlemli";
// Sculpt continuously
stroke.type.drag = "Sürükle";
// Lock a region and move it around
stroke.type.grab = "Yakala";
// Lock a point of interest and sculpt it by changing the tool radius
stroke.type.grabRadius = "Yakala • dinamik yarıçap";
// Lock a region and sculpt it by changing the tool intensity
stroke.type.grabIntensity = "Yakala • dinamik yoğunluk";

stroke.falloffProject = "Etki";
stroke.falloffProject.help = "• Küre (3d)
Etki, köşenin fırçanın merkezine olan mesafesi alınarak hesaplanır.

• Daire (2d)
Köşe önce alan düzlemine yansıtılır, ardından fırçanın merkezine olan mesafesi alınır.
Bu, alfaların örneklenme şekline benzerdir.";
stroke.falloffProject.sphere = "Küre";
stroke.falloffProject.circle = "Daire";
stroke.falloffProject.cylinder = "Silindir";

// Symmetry
symmetry = "Simetri";
symmetry.enable = "Etkin";
symmetry.primitiveWarning = "Fırça simetrisi, üç düzlemli haricinde, sadece doğrulanan primitifler için kullanılabilir.";
symmetry.plane.title = "Düzlemler";
symmetry.toolIgnore = "Geçerli araç simetriyi göz ardı ediyor.";
// Instead of planar symmetry, use a radial symmetry
symmetry.radial.title = "Radyal";
symmetry.radialX = "Radyal X";
symmetry.radialY = "Radyal Y";
symmetry.radialZ = "Radyal Z";
// A warning indicating that we limit the number of repetitions ($0 is a number)
symmetry.limited = "Tekrar sayısı $0 ile sınırlı!";
// Synonym: Offset
symmetry.offset.title = "Kaydırma";
symmetry.offsetX = "Kaydırma X";
symmetry.offsetY = "Kaydırma Y";
symmetry.offsetZ = "Kaydırma Z";
// Number of clones
symmetry.count.title = "Sayı";
symmetry.countX = "Sayı X";
symmetry.countY = "Sayı Y";
symmetry.countZ = "Sayı Z";
// method
symmetry.method = "Yöntem:";
symmetry.method.help = "• Yerel
Dönüştürme araçlarından birini (Gizmo veya Dönüştürme) kullandığınızda simetri düzlemi ağ örgüsü boyunca hareket eder.

• Dünya
Simetri düzlemi sabitlenir ve hareket etmez.";
// Local means: in the coordinate of the scene (synonym: absolute)
symmetry.method.world = "Dünya";
// Local means: in the coordinate of the object (synonym: relative)
symmetry.method.local = "Yerel";
// Move the object to the other side of the symmetry (mirror it as well)
symmetry.flip = "Nesneyi ters çevir";
// Mirror the mesh
symmetry.mirror = "Aynalama";
symmetry.mirror.help = "Topolojiye etki etmeden simetriyi tekrar uygulamaya çalışır.

Radyal simetri göz ardı edilir.

Topoloji simetrik olarak değerlendirilmediğinden korunamıyorsa, aynalamayı zorlamak için bir seçenek gelir.";
symmetry.mirrorFail = "Simetri uygulanamadı.

Ağ örgüsünü aynalayarak simetriyi zorlamak istiyor musunuz?";
symmetry.mirrorUseMasking = "Maskelenmiş alanı koru";
symmetry.mirrorUseMasking.help = "Maskelenmiş alana dokunulmaz.

Bu seçenek simetrik olmayan topolojilerde (ya da bir çift göz gibi bağlı olmayan bir yüzeylerde) göz ardı edilir.";
symmetry.apply = "Ayna
(topolojiyi koru)";
symmetry.splitMirror = "Böl ve Ayna
(yeni topoloji)";
// Reset the symmetry plane position
symmetry.reset = "Sıfırla";
// Reset the symmetry plane positon to the object center
symmetry.reset.centerMesh = "Nesne merkezi";
// Reset the symmetry plane positon to the scene (world) center
symmetry.reset.centerWorld = "Dünya merkezi";
// Reset the symmetry plane orientation
symmetry.reset.direction = "Yönelim";
// Display a line on the object (to show where the symmetry lies)
symmetry.showLine = "Çizgiyi göster";
// Display the symmetry plane in 3d
symmetry.showPlane = "Düzlemi göster";
// Allow the editing of the symmetry plane with the gizmo
symmetry.edit = "Gizmo düzenleme";
symmetry.edit.warning = "Simetri düzenleme deneyseldir.";
symmetry.edit.help = "Simetri düzlemini serbestçe belirleyebilirsiniz.

Bu özellik biraz deneyseldir ve herhalde hiçbir zaman kullanmamanız gerekir.";

// Ideally <10 chars
tool.dynamic = "DinTopo";
// Ideally <10 chars (Symmetry)
tool.symmetry = "Sim";
// Ideally <10 chars (Mirror primitive)
tool.mirror = "Aynala";
// Ideally <10 chars
tool.clay = "Kil";
// Ideally <10 chars (Subtract)
tool.clay.sub = "Alt";
// Ideally <10 chars
tool.brush = "Fırça";
// Ideally <10 chars
tool.move = "Taşı";
// Ideally <10 chars (Normal vector, perpendicular to surface)
tool.move.normal = "Normal";
// Ideally <10 chars
tool.drag = "Sürükle";
// Ideally <10 chars (Smooth the surface by erasing the details)
tool.smooth = "Pürüzsüzleştir";
// Ideally <10 chars (Tries to smooth the topology by making the polygons more regular)
tool.smooth.relax = "Rahatlat";
// Ideally <10 chars (Paint mask)
tool.mask = "Maskele";
// Ideally <10 chars
tool.mask.unmask = "Maske Yok";
// Ideally <10 chars (Selector Mask, use lasso/ellipse,etc shape to mask the mesh)
tool.maskSelector = "MaskeSeç";
// Ideally <10 chars (Smudge the paint of the object)
tool.smudge = "Leke";
// Ideally <10 chars (Flatten the surface)
tool.flatten = "Düzleştir";
// Ideally <10 chars (Flatten the surface, more strongly than Flatten)
tool.planar = "Düzlemsel";
// Ideally <10 chars (Flatten the surface by offsetting the surface in the opposite direction)
tool.flatten.fill = "Doldur";
// Ideally <10 chars (Layer brush)
tool.layer = "Katman";
// Ideally <10 chars
tool.crease = "Buruştur";
// Ideally <10 chars (Cut part of the mesh cleanly)
tool.trim = "Kes";
// Ideally <10 chars (Cut part of the mesh cleanly into two separate meshes)
tool.split = "Ayır";
// Ideally <10 chars (Project part of the object onto a curve)
tool.project = "Proje";
// Ideally <10 chars
tool.inflate = "Şişir";
// Ideally <10 chars
tool.pinch = "Kıstır";
// Ideally <10 chars
tool.nudge = "Dürt";
// Ideally <10 chars
tool.stamp = "Damga";
// Ideally <10 chars (Delete Layer, a tool that can cancel the Layer deformation/paint)
tool.clearLayer = "KatmanSil";
// Ideally <10 chars (Select multiple objects with a lasso tool)
tool.select = "Seç";
// Ideally <10 chars (Rotate, Translate and Scale the object)
tool.gizmo = "Gizmo";
// Ideally <10 chars
tool.gizmo.editPivot = "Eksen";
// Ideally <10 chars (Snap angle)
tool.gizmo.rotateSnap = "Yasla";
// Ideally <10 chars (Snap translation)
tool.gizmo.moveSnap = "Yasla";
// Ideally <10 chars (Local/Relative space)
tool.gizmo.local = "Yerel";
// Ideally <10 chars (Align/Snap the gizmo to world axis)
tool.gizmo.align = "Hizala";
// Ideally <10 chars (Pin the gizmo, so that it stays in place when switching between objects)
tool.gizmo.pin = "Tuttur";
// Ideally <10 chars (Rotate, Translate and Scale the object)
tool.transform = "Dönüştür";
// Ideally <10 chars (Translate the object)
tool.transform.move = "Taşı";
// Ideally <10 chars (Rotate the object)
tool.transform.rotate = "Döndür";
// Ideally <10 chars (Scale the object)
tool.transform.scale = "Ölçek";
// Ideally <10 chars (Snap the object on another object surface)
tool.transform.snap = "Yasla";
// Ideally <10 chars (Measure distance between 2 points)
tool.measure = "Ölç";
// Ideally <10 chars (Lattice, deformer)
tool.lattice = "Kafes";
// If an option is shared among the tools
tool.all = "Tümü";
// Ideally <10 chars (Quad Remesher)
tool.remesh = "Quad Remesher";
tool.remesh.guides = "Rehberler";
tool.remesh.density = "Yoğunluk";
tool.remesh.same = "Same";
tool.remesh.half = "Half";
// Ideally <10 chars (FaceGroup)
tool.faceGroup = "Yüz Grubu";
tool.faceGroup.autoPick = "Otomatik seç";
tool.faceGroup.flush = "Kullanılmayanları kaldır";
tool.faceGroup.skip = "Küçük grupları şuna göre atla:";
tool.faceGroup.skipFace = "Yüz sayısı";
tool.faceGroup.skipFace.help = "Yüz sayısı bu eşik değerine eşit veya daha az ise yeni bir grup oluşturmayın.";
tool.faceGroup.skipArea = "Yüzey alanı";
tool.faceGroup.skipArea.help = "Yeni grubun yüzey alanı bu eşik değerinden düşükse yeni bir grup oluşturmayın.

Eşik değeri, nesnenin toplam alanının yüzdesi olarak verilir.";
// Ideally <10 chars (Hide)
tool.hide = "Gizle";
// Ideally <10 chars (View tool, do nothing in particular)
tool.view = "Görüntüle";
// Ideally <10 chars (Revolving surface along a line)
tool.lathe = "Torna";
// Ideally <10 chars (Revolving surface along a curve)
tool.tube = "Tüp";
// Ideally <10 chars (Insert object into the scene)
tool.insert = "Ekle";
// Ideally <10 chars (Flip/Invert/Negate the shape)
tool.shape.flip = "Ters Çevir";
// Ideally <10 chars (No shape selected, same as Camera mode, does nothing in particular)
tool.shape.view = "Görüntüle";
// Ideally <10 chars (Lasso selection)
tool.shape.lasso = "Lasso";
// Ideally <10 chars (Curve selection, same as Lasso and it's an open shape)
tool.shape.curve = "Eğri";
// Ideally <10 chars (Polygon selection, same as Lasso but with more precision)
tool.shape.polygon = "Poligon";
// Ideally <10 chars (Path selection, same as Lasso but with more precision and it's an open shape)
tool.shape.path = "Yol";
// Ideally <10 chars (Rectangular selection)
tool.shape.rectangle = "Dikdörtgen";
// Ideally <10 chars (Ellipse selection)
tool.shape.ellipse = "Elips";
// Ideally <10 chars (Line selection, split the screen in half)
tool.shape.line = "Çizgi";
// Ideally <10 chars (Whether a shape is closed or not, a tube is open, a torus is closed)
tool.shape.closed = "Kapalı";

// Radius of the tool (size)
tool.radius = "Yarıçap";
// Intensity of the tool (force)
tool.intensity = "Yoğunluk";

tool.settings = "Ayarlar";
tool.settings.none = "Bu aracın hiçbir belirli ayarı yok.";

tool.crease.pinchFactor = "Kıstırma gücü";
tool.crease.offsetFactor = "Ofset faktörü";

tool.layer.removeInfluence = "Katman verilerini kullan";
tool.layer.removeInfluence.help = "Bu seçenek sadece seçili bir katman olduğunda etkindir.

Darbeler üzerinde yer değiştirmeyi kısıtlamak için katman verilerini kullanır.";
tool.layer.noLayerSelected = "Bu seçenek sadece bir katman seçili ise kullanılabilir";

tool.flatten.planeLockOrigin = "Düzlem kökenini kilitle";
tool.flatten.planeLockNormal = "Düzlem yönünü kilitle";

// Option for Tube, Lathe and Insert tool
tool.syncInstance = "Senkronize";
tool.syncInstance.message = "Yeni nesne diğer tüm örnekler üzerine eklenecek!";

// The vertex on the border of the mesh will stay still even if we try to smooth the border
tool.smooth.stickyBorder = "Sınırda yapışkan verteks";
tool.smooth.screen = "Ekran düzleştirme";
tool.smooth.screen.help = "Yüksek poligonlu durumlarda bile bağımsız düzleştirme alabilmek için bu seçeneği kullanın.";
tool.smooth.screen.samples = "Ekran örnekleri";
tool.smooth.stable = "Stabil düzleştirme";
tool.smooth.stable.help = "Düzleştirmeyi topoloji bağımsız hale getirmeye çalışır.

Bu mod, değişen topoloji yoğunluğu ve yüksek düzleştirme yoğunluk değeri ile en iyi şekilde çalışır.";

tool.paint = "Boya";
// Erase the painting
tool.paint.erase = "Sil";
// Only paint the part of the mesh that was already painted in the layer (repainting)
tool.paint.layerFilter = "Katman filtreleme";
tool.paint.layerFilter.help = "Bu seçeneği sadece bir katmanın daha önceden boyanmış bir alanını yeniden boyamak istediğinizde kullanın.";

// Clear the painted mask
tool.mask.clear = "Kaldır";
tool.mask.clearAll = "Tümünü temizle";
// Invert the painted mask
tool.mask.invert = "Ters Çevir";
// Mask or Unmask a region (leave other region that unconnected intact)
tool.mask.flipConnected = "Bağlı olanı ters çevir";
// Blur the painted mask
tool.mask.blur = "Bulanıklık";
// Sharpen the edge of the painted mask area
tool.mask.sharpen = "Keskinleştir";
// Transform/Matrix
tool.matrix = "Matris";
// The target of the transform is either the Matrix or the Vertex of the object
tool.matrix.target = "Hedef";
// Automatic
tool.matrix.target.auto = "Otomatik";
tool.matrix.target.auto.help = "Varsayılan olarak, bu Grup seçeneğine benzer şekilde çalışır.
Ağ örgüsünde maskeleme varsa, ya da simetrisi etkinse, verteksle aynı şekilde çalışır.";
// Auto apply the transform on the vertices
tool.matrix.target.vertex = "Verteks";
tool.matrix.target.vertex.help = "Dönüştürmeyi vertekslere uygulamaya çalışır, doğrulanmamış primitiflerle çalışmaz.
Örnekler de etkilenir.";
// Transform the object alone (the children stands still)
tool.matrix.target.object = "Nesne";
tool.matrix.target.object.help = "Simetri ve maskelemeyi göz ardı ederek sadece nesneyi hareket ettirir.
Sadece düzenlenen düğüm hareket eder, alt öğeler hareket etmez.";
// Transform the object and its children
tool.matrix.target.group = "Topluluk";
tool.matrix.target.group.help = "Simetri ve maskelemeyi göz ardı ederek düğümü hareket ettirir.
Hiyerarşinin geri kalanı da dönüşüme uğrar.";
// Operation on the mesh
tool.matrix.action = "İşlem";
tool.matrix.action.origin = "Kökeni hareket ettir";
tool.matrix.action.origin.help = "Ağ örgüsünü dünya kökenine getir.";
tool.matrix.action.bake = "Pişir";
tool.matrix.action.bake.help = "Matrisi vertekse uygula ve matrisi sıfırla. Görsel olarak değişen bir şey olmaması gerekir.";
tool.matrix.action.reset = "Sıfırla";
tool.matrix.action.reset.help = "Ağ örgüsü dönüştürmeyi ilk başa sıfırla.";

// Synonym: shear, https://en.wikipedia.org/wiki/Shear_matrix or https://en.wikipedia.org/wiki/Shear_mapping
tool.matrix.skew = "Yatır";
tool.matrix.translation = "Çeviri";
tool.matrix.rotation = "Döndürme";
tool.matrix.scale = "Ölçek";
tool.matrix.uniformScale = "Tek tip ölçeklendirme";

tool.transform.tip = "Modu değiştirmek için ikinci parmakla tek dokunuş yapın";

// Size of the gizmo
tool.gizmo.size = "Araç boyutu";
// If true, there is less spacing between gizmo handlers (rotate, scale, etc)
tool.gizmo.compact = "Kompakt";
// When enabled, tapping one the gizmo widget will open a numerical input popup
tool.gizmo.allowInput = "Sayısal girdi";
tool.gizmo.allowInput.help = "Gizmo araçlarından birine dokunduğunuzda sayısal girdiye izin verir";
// Angle threshold
tool.gizmo.linearRollThreshold = "Tanjant ilerleme açı eşiği";
tool.gizmo.linearRollThreshold.help = "Lineer veya dairesel ilerleme yöntemleri arasında seçim için açı eşiği.

Bu eşiğin üzerindeki değerler dairesel ilerlemeyi kullanır.

Lineer ilerlemeyi (tanjantın yönü) tercih ederseniz, bu değeri 90° olarak belirlemeniz yeterlidir.";
// Partially hide/fade the gizmo when we interact with it
tool.gizmo.autoHide = "Etkileşimde gizle";
tool.gizmo.tap = "Tek dokunuşta";
tool.gizmo.tap.help = "Bu seçenek sadece özel eksen modunda etkilidir (otomatik devre dışıdır).";
tool.gizmo.tap.none = "Yok";
tool.gizmo.tap.none.help = "Ağ örgüsüne dokunduğunuzda hiçbir şey olmaz.";
tool.gizmo.tap.normal = "Normal";
tool.gizmo.tap.normal.help = "Move the gizmo on the first intersection and align it according to the surface normal.";
tool.gizmo.tap.first = "İlk vuruş";
tool.gizmo.tap.first.help = "Gizmoyu ilk kesişmeye hareket ettirir.";
tool.gizmo.tap.medial = "Ortaya batırma";
tool.gizmo.tap.medial.help = "Gizmoyu ilk iki kesişmenin ortalamasına götürür.";

// The lathe generator is a vertical line and cannot be rotated
tool.lathe.axisFixed = "Sabit";
tool.lathe.axisOnly = "Sadece eksen";
tool.lathe.stable = "Kararlı";
tool.lathe.axis = "Eksen";

// Fill the object's hole
tool.hole = "Delik doldurma";
tool.hole.fillHoles = "Delikleri doldur";
// synonym: Alternative method
tool.hole.method.fill = "Doldur";
tool.hole.method.legacy = "Eski";
tool.hole.method.boolean = "Boolean";
tool.hole.bridges = "Ekrana sabitli boolean";
tool.hole.bridges.help = "Bu seçenek etkinse, hacimde delikler açabilirsiniz.
Kesim eğimi de kesim şekline daha yakın olur.";
tool.hole.threshold = "Eşik epsilon";
tool.hole.threshold.help = "Bu değerde küçük bir ayarlama yapmak delik doldurma algoritmasında yardımcı olabilir.";
tool.hole.smoothing = "Delik düzleştirme";

tool.smudge.quality = "Kalite";
tool.smudge.quality.help = "Yansıtılan piksellerin çözünürlüğünü değiştirir, düşük değerler hızlı darbeler anlamına gelir.";

// Shape for the tools: Trim / Split / Project / SelMask
tool.shape = "Biçim";
// Auto-validate the drawn shape
tool.shape.autoValidate = "Otomatik doğrula";
// Force the rectangle selection to be a square
tool.shape.rectangleSquare = "Kare";
// The selection rectangle will be centered around the cursor
tool.shape.rectangleCentered = "Ortalanmış";
// Force the ellipse selection to be a circle
tool.shape.ellipseCircle = "Daire";
// The selection ellipse will be centered around the cursor
tool.shape.ellipseCentered = "Ortalanmış";
// Rotate by step (angle value)
tool.shape.lineRotateStep = "Adımı döndür";

// Show a yellow dot on the golden ratio point
tool.measure.goldenRatio = "Altın oran";
// volume of a mesh
tool.measure.volume = "Hacim";
// Surface of a mesh
tool.measure.surface = "Yüzey";

// Always display the camera shortcut buttons on the viewport
tool.view.stickyCamera = "Kamera kısayolu (her zaman)";

// Topology
topology = "Topoloji";
// Synynom: detail value, density
topology.dynamic.detail = "Detay";
// See glossary
topology.multires = "Çoklu Çözünürlük";
topology.multires.help = "Bir ağ örgüsünün birden çok çözünürlüğünü korur.

Daha düşük bir çözünürlükte değişiklikler yaparsanız, geri döndüğünüzde daha yüksek çözünürlükteki detaylar yeniden yansıtılır.

Katmanlar tüm çözünürlüklerde kullanılabilir.";
// Synonym: Unsubdivide, Un-subdivide
topology.multires.reverse = "Tersine çevir";
topology.multires.reverse.confirm = "Taban alt bölümlemesi oluşturulamadı.

Geçerli topoloji büyük olasılıkla alt bölümlemenin bir sonucu değil.";
topology.multires.subdivide = "Alt bölümlere ayır";
topology.multires.subdivide.confirm = "Ağ örgüsünün $0M verteksi olacaktır, emin misiniz?";
// Prevents the user from subdivide the object again, a warning is displayed (with a UI link to increase this limit)
topology.multires.subdivide.limit = "Alt bölümlere ayırma limiti aşıldı, bkz. $0";
topology.multires.deleteLower = "Daha düşük olanı sil";
topology.multires.deleteHigher = "Daha yüksek olanı sil";
topology.multires.keepTriangles = "Üçgenleri koru";
topology.multires.lock = "Kilitle (LV0)";
// Navigate toward multiple resolutions (go to higher level)
topology.multires.up = "Multires düzeyi →";
// Navigate toward multiple resolutions (go to lower level)
topology.multires.down = "Multires düzeyi ←";
// Synonym: Flat subdivision
topology.multires.linear = "Lineer altbölümleme";
topology.multires.linear.help = "Hiçbir düzleştirme uygulamadan sadece ağ örgüsünü alt bölümlere ayırır";
// Only show the lowest resolution wireframe
topology.multires.minWireframe = "Yalnızca seviye 0";
// Create a new object by recomputing a new topology
topology.remesh = "Yeniden ağ örgülendirme";
// Create a new object by recomputing a new topology, by using voxels (see Glossary)
topology.voxel = "Voksel yeniden ağ örgülendirme";
topology.voxel.help = "Ağ örgüsünü bir ızgaraya örnekleyerek yeniden ağ örgülendirme.

Nesne kapalı (su geçirmez) değilse, önce bir delik doldurma algoritması uygulanır.

Yeniden ağ örgülendirmeden sonra katmanlar yeniden yansıtılır, ama kalite düşer.";
topology.voxel.resolution = "Çözünürlük";
topology.voxel.sharp = "Keskin kenarları koru";
topology.voxel.sharp.help = "Bu seçenek en çok basit primitif boolean işlemleri için faydalıdır.

Kenarlara yaslanan noktalar nedeniyle bazı alanlarda bozulma yapar.";
topology.voxel.subLevel = "Çoklu çözünürlük oluştur";
topology.voxel.subLevel.help = "Voksel yeniden ağ örgülendirme çıktısından bir çok çözünürlüklü hiyerarşiyi tekrar oluşturabilirsiniz.

Özellikle voksel detay değeri yüksekse, daha hızlı çalışır ve daha az bellek kullanır.
Ancak, voksel detay değeri düşükse ve çok yüksek bir çok çözünürlük seviyesi istemişseniz, detayları kaybedersiniz.";
// Dynamic topology (DynTopo)
topology.surface.remesh = "Yeniden ağ örgülendirme";
topology.surface.detail = "Detay";
topology.surface.detail.help = "Voksel yeniden ağ örgülendirmesinden farklı olarak, yüzey yeniden ağ örgülendirmesi, ağ örgüsünün kapatılmasını gerektirmez.

Maskelemeyi de destekleyebilir, böylece ağ örgüsünün bazı kısımlarını topoloji değişikliklerine karşı koruyabilirsiniz.

Katmanlar doğru şekilde güncellenir.";
topology.surface.method = "Yöntem";
// Uniformisation means we can both add and remove triangles/quads
topology.surface.method.uniformisation = "Tek tipleştirme";
// We can only add triangles/quads (synonym: Refine)
topology.surface.method.subdivision = "Alt bölümleme";
// We can only remove triangles/quads (synonym: Simplify)
topology.surface.method.decimation = "Azaltım";
topology.surface.method.help = "Dinamik topoloji davranışı:
• Tek tipleştirme: detay ekeleme ve çıkarma
• Alt bölüm: detay ekleme
• Azaltım: detay çıkarma";
topology.surface.useMasking = "Maskelenmiş alanı koru";
topology.surface.useMasking.help = "Maskelenmiş alanlar topolojiyi değişmeye karşı korur.";
topology.surface.extrapolate = "Verteks ekstrapolasyonu";
// DynTopo
topology.dynamic = "Dinamik topoloji";
topology.dynamic.global = "Genel açık/kapalı";
topology.dynamic.activate = "Etkin";
topology.dynamic.activate.help = "Dinamik topoloji ile şekillendirme araçları, ağ örgüsünü alt bölümlere ayırabilir veya yerel anlamda gerçek zamanlı olarak basitleştirebilir.

Bu özellik performansa önemli ölçüde etki edebilir.

Katmanlar doğru şekilde güncellenir.";
topology.dynamic.method = "Detayın kaynağı:";
topology.dynamic.method.screen = "Ekran";
topology.dynamic.method.radius = "Yarıçap";
topology.dynamic.method.constant = "Sabit";
topology.dynamic.method.help = "• Yakınlaştırma
Detay seviyesi yüzeye olan uzaklığa bağlıdır.

• Yarıçap
Araç yarıçapı detay miktarını belirler.

• Sabit
Detay sabittir, detay değeri voksel kaydırıcısıyla da paylaşılır.";
topology.dynamic.quality = "Tercih et...";
topology.dynamic.quality.help = "Kaliteyi seçerseniz, 2 temel farklılık şunlar olur:
• Rötuş, şekillendirme operatöründen daha önce uygulanır, çok küçük detayları boyarken veya şekillendirirken daha az interpolasyon artifaktı alırsınız
• Rötuş aşamalı olarak uygulanmaz, çok küçük detayları şekillendiriyorsanız veya hızlı darbeler yapıyorsanız, topoloji her zaman doğru şekilde rötuşlanır";
topology.dynamic.quality.speed = "Hız";
topology.dynamic.quality.quality = "Kalite";
// Whether the pencil pressure can impact the level of detail
topology.dynamic.usePressure = "Yarıçapta basınç kullan";
topology.dynamic.usePressure.help = "Kalem basıncının alet yarıçapını etkileyerek, ayrıntı düzeyini etkilemesini istiyorsanız bu seçeneği kullanın.";
topology.dynamic.useFalloff = "Darbe düşüşü dullan";
// Decimate
topology.decimate.title = "Azaltım";
topology.decimate.title.help = "Mümkün olduğunca fazla detay korumaya çalışarak, poligonların sayısını azaltır.

Bu özellik, 3D baskı için dışarı aktarmak istediğinizde faydalıdır.
Ancak, şekillendirmeye devam etmek istiyorsanız, eşit olmayan üçgenler ortaya çıkaracağından, bunu kullanmamanız gerekebilir.

Maskelenmiş alanda azaltım olmayacağı unutulmamalıdır.";
// Synonym: Simplify (Decimate reduce the number of triangles/quads while retaining details as much as possible)
topology.decimate = "Azalt";
topology.decimatePaintWeight = "Boyamayı koru";
topology.decimatePaintWeight.help = "Daha yüksek değer boyamayı korumaya çalışır.

Boyama sizin için önemli değilse bu değeri 0 olarak ayarlayın.";
topology.decimateUniform = "Tek tip yüzler";
topology.decimateUniform.help = "Daha yüksek değerler benzer boyutlarda üçgenler çıkarır.";
topology.decimatePreserveBorders = "Sınırları koru";
topology.decimatePreserveBorders.help = "Örgünün sınırını azaltma.";
// Target a certain number of triangles, faces and vertices
topology.target.triangles = "Hedef üçgenler";
topology.target.faces = "Hedef yüzler";
topology.target.quads = "Hedef dörtgenler";
topology.target.points = "Hedef noktalar";
// Quad remesher
topology.qremesh = "Dörtgen Yeniden Örgüleme";
topology.qremesh.angle = "Kırışık açısı";
topology.qremesh.border = "Sınırları koru";
topology.qremesh.onlyQuad = "Sadece dörtgenler";
topology.qremesh.hole = "Maksimum delik doldurma";
topology.qremesh.hole.help = "
UV hesapla";

// Unwrapping means compute UV (texture coordinates), with uvs you can appliy (wrap) a texture onto the model
topology.uv.title = "UV Açma";
// UV Unwrap but as a Verb
topology.uv.unwrap = "Hesapla";
// The operation can be very slow
topology.uv.atlas.warning = "Çok yavaş olabilir, hedef < 100k verteks!";
// Handles are topological holes (synonym: genus, hole)
topology.uv.bff.warning = "Ağ örgüsünün tutma yerleri varsa, örtüşmeler olabilir!";
// Solo patch
topology.uv.bff.seamless = "Dikişsiz yamalar";
topology.uv.bff.seamless.help = "Bu seçenek önemli bozulmaya yol açabilir.

Tipik olarak, yüz grupları dikkatlice ayarlandığında kullanılabilir.";
// Synonym: Point count? Singularity count ?
topology.uv.bff.cones = "Koni sayısı";
topology.uv.bff.help = "Daha yüksek değer karmaşık nesnelerde bozulmayı azaltır.

Daha yüksek değerlerde hesaplama süresi daha uzun olur.";
topology.uv.delete = "UV'leri sil";

// Transfer the vertex painting in the texture, bake means "create texture (from mesh data)"
topology.bake.title = "Pişir";
// Bake here means "create texture (from mesh data)"
topology.bake.title.help = "Doku pişirme, sahnedeki diğer görünür nesneleri yansıtarak dokular oluşturacaktır.

Pişirme için tipik iş akışı şöyledir:
• İnce ayrıntıları ve boyamayı olan bir örgünüz var
• Klonlayın
• Azaltın (‘Boyamayı koru’ ayarını 0 yapın!)
• UV açın
• Pişirin!

Şimdi, önceki nesnenizin çoğu boyayı ve ayrıntıyı koruyan düşük çözünürlüklü bir örgünüz olmalı.

İşlem sonrasında, tepe renkleri yeni bir devre dışı katmana taşınacak, böylece renkli doku ile çarpılmak yerine göz ardı edilmek üzere.

Seçilen nesnelerin hangi nesnelerinin 'baking' için kullanılacağı belirlenecektir:
- tüm seçili nesneler ve ana seçili nesne 'baked' olacak (sahne menüsünde güçlü vurgulama)
- eğer sadece bir seçili nesne varsa, görünür tüm nesneler göz önünde bulundurulacaktır
- aksi takdirde, eğer tüm nesneler gizlenmişse (örneğin Solo kullanılarak), tüm sahne dikkate alınacaktır";
// Bake here means "create texture (from mesh data)"
topology.bake.self = "Kendisinden";
// Bake here means "create texture (from another mesh data)"
topology.bake.other = "Yüksek çözünürlüklüden";
topology.bake.resolution = "Çözünürlük";
// Cage is a specific term, synonyom: "Bake offset"
topology.bake.offset = "Işın ofseti";
topology.bake.radius = "Kafes yarıçapı";
// Bake opacity (from mask data)
topology.bake.opacityFromMask = "Maske -> Opaklık";
topology.bake.backup = "Yedekle";

// project a high resolution mesh details onto another
topology.reproject.title = "Tekrar Projelendir";
topology.reproject.title.help = "En yakın görünür nesnelerden heykel ayrıntılarını, boyamayı ve katmanları projelendirin.

Bu genellikle temiz topolojiye sahip yüksek çözünürlüklü bir örgü üzerinde de kullanılmak üzere tasarlanmıştır.";
// tweaking value
topology.reproject.rayBias = "Işın yanlılığı";
topology.reproject.rayBias.help = "Tekrar projelendirme için iki yöntem kullanılır:
• en yakın: yüzeydeki en yakın nokta
• ışın: normal yönünden geçiş noktası

Daha yüksek yanlılık değerleri, en yakın yüzeye göre ışın kesişimini tercih edecektir.";
topology.reproject.normalOffset = "Normal ofseti";
topology.reproject.shpereCast = "Küre döküm yedeklemesi";
topology.reproject.shpereCast.help = "Normal ışın yeniden izdüşümü başarısız olursa, Nomad en yakın yüzey kesişimine geçiş yapacaktır.";
// number of iteration the algorithm will take
topology.reproject.iterations = "İterasyonlar";
topology.reproject.relax = "Rahatlat";
topology.reproject.relax.help = "Örgü düşük poligonlu olduğunda gevşetme tercih edilmelidir.";
topology.reproject.layers.help = "Diğer katmanları seçili örgü üzerine aktarın.";

topology.manifold = "Manifold";
topology.nonManifold = "Manifolt Olmayan";
topology.manifold.clean = "Temizle";
topology.manifold.collapse = "Küçük yüzeyleri sil";
topology.manifold.title = "Manifold Zorla";
topology.manifold.title.help = "Manifolt olmayan kenarı temizlemeye çalışır.

Bu, 2'den fazla yüzeyi ortak olan kenarları desteklemeyen harici yazılımlar için faydalı olabilir.";

// Reset key-bindings/shortcuts
binding.reset = "Atamaları sıfırla";
// Add node in a sync mode (synchronize instance)
binding.addSync = "Senkronize";
binding.addSync.help = "Varsayılan olarak, sahne menüsünde ayarlanan senkronizasyon değerini kullanacaktır.";
// Binding option
binding.context.toggle = "Bağlamı değiştir";
binding.toggleTool = "Araç kısayollarını değiştir";
binding.toggleTool.help = "Bir araç kısayolunu kullanırken, mevcut kısayol aracı aktifse önceki araç seçilecektir.";
// When the key is tap once, the value will be toggled
binding.toggleTap = "Tuşa dokunulduğunda kısayolu değiştir";
// The binding force camera movement
binding.forceCamera = "Kamerayı zorla";
binding.forceCamera.help = "Kamera etkileşimini başka bir bağlama ile çakışma durumunda zorlayın.

Bu genellikle aynı bağlamanın bir araç kısayoluna ya da Ekle/Çıkar'a atanması durumunda gerçekleşebilir.";
// Same as Color Picker but it pick the material (color, roughness, metalness, etc)
binding.pickMaterial = "Malzeme Seçici";
// Same as Color Picker but it pick the material (color, roughness, metalness, etc)
binding.pickFaceGroup = "Yüz Grubu Seç";
// Edit the tool brush size/radius
binding.editRadius = "Araç Yarıçapı";
// Edit the tool brush size/radius
binding.editIntensity = "Araç yoğunluğu";
// Controller dead zone
binding.joystick = "Joystick";
binding.controller.deadZone = "Ölü bölgeyi yapıştır";
binding.controller.deadZone.help = "Kameranın hareket ettiği durumlarda, denetleyici çubuğu hareket ettirilmeden bile bu değeri artırın.";
// Snap the camera
binding.view.front = "Ön Görünüm";
binding.view.left = "Sol Görünüm";
binding.view.top = "Üst Görünüm";
// Move/Translate the view
binding.pan.left = "Sol Kaydır";
binding.pan.right = "Sağa kaydır (görünüm)";
binding.pan.forward = "Öne Kaydırmak";
binding.pan.backward = "Arkaya Kaydırmak";
binding.pan.up = "Yukarı Kaydırmak";
binding.pan.down = "Aşağı Kaydırmak";
// Snap the view (while rotating)
binding.snapViewOnRotate = "Görünümü yasla (döndürürken)";
// Open a Nomad internal project (replace current scene)
binding.project.open = "Aç (proje)";
// Open a Nomad internal project (add it to the current scene)
binding.project.add = "Ekle (proje)";
// Select all the objects in the scene
binding.selectAll = "Tümünü Seç";
// Rotate environment and the lighting
binding.rotateLighting = "Işıklandırmayı döndür";
// The Camera pivot is the point around which the camera rotates
binding.updatePivot = "Eksen";

quadremesh.adaptQuadCount = "Adaptif Kare Sayısı";
quadremesh.curvatureAdaptivness = "Adaptif Boyut";
quadremesh.curvatureAdaptivness.help = "%100'de, karelerin boyutu nesnenin eğriliğine bağlı olarak değişecek ve yüksek eğrilikte daha küçük kareler sağlayacaktır.
%0'da, karelerin boyutu düzgün olacaktır.";
quadremesh.useVertexColors = "Boyamayı koru";
quadremesh.autoDetectHardEdges = "Sert Kenarları Otomatik Algıla";
quadremesh.autoDetectHardEdges.short = "Sert Kenarlar";
quadremesh.reprojectVertex = "Düğüm Noktasını Yeniden Projeksiyon";
quadremesh.reprojectVertex.short = "Düğüm Noktasını Yeniden Projeksiyon";
quadremesh.reprojectVertex.label = "Etkinleştirildiğinde, Nomad önceki ağda konumu yeniden projeksiyon yapacaktır.

Not: Eğer ağ katmanlara sahipse, her zaman yeniden projeksiyon yapılacaktır.";

// Privacy policy
privacyPolicy.title = "Gizlilik Politikası";
privacyPolicy.reject = "Reddet";
// Hexanomad is the company name
privacyPolicy = "Hexanomad Nomad Sculpt'tan hiçbir veri toplamaz.";

sonar.disconnect = "SonarPen'i Bağlantısını Kes";
sonar.connect = "SonarPen'i Bağla";
sonar.connect.confirm = "SonarPen'i Bağlayın mı?";
sonar.connect.confirm.warning = "Sonar Pen, kalemin basıncını algılamak için mikrofonu (ses döngüsü) kullanacaktır.";

// Color disc mode
widget.color.disc = "Disk";
widget.color.ring = "Halka";
widget.color.square = "Kare";

nomad.mainFolder = "Nomad ana klasörü";
nomad.mainFolder.warning = "Dosyalar dokunulmadan kalır.
Kopyalanmaz, silinmez veya taşınmaz.";
nomad.mainFolder.error = "Evet'i seçtikten sonra, Nomad kapanacak ve sadece yeniden başlatmanız yeterli olacak.";

license.title = "Lisans";
license.retry = "Tekrar dene";
license.key = "Lisans anahtarı";
license.activate = "Lisansı etkinleştir";
// ----------------------------------------------
license.newest = "Yeni versiyon mevcut!";
// ----------------------------------------------
license.portal.title = "Mevcut kullanıcılar";
license.portal.label = "Lisans portalı";
// ----------------------------------------------
license.checkout.title = "Yeni kullanıcılar";
license.checkout.label = "Nomad'ı Satın Al";
// ----------------------------------------------
license.device.error = "Cihaz kimliği alınamadı.";
license.device.mismatch = "Cihaz kimliği eşleşmiyor!";
// ----------------------------------------------
license.validate.error404 = "Lisans anahtarı bulunamadı.";
license.validate.error422 = "İşlenemez Varlık.";
// ----------------------------------------------
license.activate.error403 = "Maksimum cihaz sayısına ulaşıldı!
Lisans portalınızda başka bir cihazı devre dışı bırakabilirsiniz.";
license.activate.error404 = "Lisans anahtarı bulunamadı.";
license.activate.error422 = "İşlenemez Varlık.";
// ----------------------------------------------
// version trial
version.restore = "Satın almayı geri yükle";
version.buyWeb = "Web versiyonu sadece bir demodur";
version.buyFull = "Tam sürüme yükselt";
version.buyQR = "Satın Al";
version.buyQR.promo = "
Quad Remesher, dörtgen baskın ağ çıkaran bir algoritmadır.
Dörtgen dağılımı, nesnenin doğal eğriliğini takip etmeye çalışacaktır.

Algoritma, yerel eğriliğe bağlı olarak dörtgenlerin boyutunu da uyarlayabilir.

Sonuçlanan topolojiyi şu şekilde yönlendirebilirsiniz:

• Yüz Grubu $0 (daha iyi sonuç için sınırlarını düzleştirin!)

• Düzlemsel X/Y/Z simetrisi $1

• Eğri rehberleri $2

• Yoğunluk boyaması $3

Quad Remesher, https://exoside.com/ tarafından geliştirilmiştir.";

version.trialHistory = "Deneme sürümü: 4 geri alma/yineleme mümkündür";
version.trialLayer = "Deneme sürümü: Ağ örgüsü başına 1 katman";
version.trialNoImport = "Deneme sürümü: içe aktarma yok";
version.trialNoExport = "Deneme sürümü: dışa aktarma yok";

version.fullFeatures = "• Tek sefer satın alma
• Sınırsız geri alma/yineleme
• Sınırsız katman
• İçe ve dışa aktarma";

version.demo.purpose = "Bu sürüm yalnızca demo amaçlı tasarlanmıştır.";
version.demo.disable = "Özellik bu demo için etkin değil.";

// app store main page
store.name = "Nomad Sculpt";
store.headline = "3D'de şekillendir ve boyama";
store.tag = "sculpt, 3d, nomad, paint, modeling, şekillendirme, boyama, modelleme";
// ----------------------------------------------
store.description.sculpt = "• Şekillendirme araçları
Kil, düzleştir, yumuşat, mask ve birçok diğer fırçalar yaratımını şekillendirmeni sağlar.
Hardsurface amaçları için lasso, dikdörtgen ve diğer şekillerle trim boolean kesme aracını da kullanabilirsin.";
// ----------------------------------------------
store.description.stroke = "• Fırça özelleştirmesi
Falloff, alphas, döşeme, kalem basıncı ve diğer fırça parametreleri özelleştirilebilir.
Araç önceden ayarlarını da kaydedip yükleyebilirsin.";
// ----------------------------------------------
store.description.paint = "• Boyama araçları
Vertex boyama ile renk, roughness ve metalness.
Tüm malzeme ön ayarlarını kolaylıkla yönetebilirsin de.";
// ----------------------------------------------
store.description.layer = "• Katmanlar
Yaratım işlemleri sırasında şekillendirme ve boyama işlemlerini ayrı katmanlarda kaydederek iterasyonu kolaylaştır.
Hem şekillendirme hem de boyama değişiklikleri kaydedilir.";
// ----------------------------------------------
store.description.multires = "• Çoklu Çözünürlük Oymacılığı
Ağınızın birden fazla çözünürlüğü arasında ileri geri gidin ve esnek bir çalışma akışı için.";
// ----------------------------------------------
store.description.voxel = "• Voxel yeniden örgüleme
Ağını hızlıca yeniden örgüleyerek uniform detay seviyesi elde et.
Yaratım sürecinin başında kabaca bir şekil çizmek için kullanılabilir.";
// ----------------------------------------------
store.description.dynamic = "• Dinamik topoloji
Fırçan altındaki ağı yerel olarak iyileştirerek otomatik bir detay seviyesi elde et.
Katmanlarını bile koruyabilirsin, otomatik olarak güncelleneceklerdir!";
// ----------------------------------------------
store.description.topology = "• Seyreltme
Detayları mümkün olduğunca koruyarak çokgen sayısını azalt.";
// ----------------------------------------------
store.description.group = "• Yüz Grubu
Ağını yüz grubu aracı ile alt gruplara ayır.";
// ----------------------------------------------
store.description.unwrap = "• Otomatik UV açma
Otomatik UV açıcı yüz gruplarını açma işlemini kontrol etmek için kullanabilir.";
// ----------------------------------------------
store.description.baking = "• Pişirme
Renk, roughness, metalness ve küçük ölçekli detay gibi tepe verilerini doku içine aktarabilirsin.
Tersini de yapabilir, doku verilerini tepe verisi veya katmanlara aktarabilirsin.";
// ----------------------------------------------
store.description.primitive = "• İlkel şekil
Silindir, torus, tüp, torna ve diğer ilkel şekiller yeni şekiller başlatmak için hızlı bir şekilde kullanılabilir.";
// ----------------------------------------------
store.description.rendering = "• PBR görüntüleme
Varsayılan olarak güzel PBR görüntüleme, aydınlatma ve gölgeler ile.
Daha standart bir gölgelendirme için şekillendirme amaçlarına yönelik MatCap'e geçebilirsin.";
// ----------------------------------------------
store.description.postprocess = "• Son işlem
Ekran Alanı Yansıması, Alan Derinliği, Ortamsal Engel, Ton eşleme, vb.";
// ----------------------------------------------
store.description.files = "• Dışa ve İçe Aktarma
Desteklenen formatlar glTF, OBJ, STL veya PLY dosyalarını içerir.";
// ----------------------------------------------
store.description.interface = "• Arayüz
Mobil deneyim için tasarlanmış kullanımı kolay arayüz.
Özelleştirme de mümkündür!";
// ----------------------------------------------
store.description.remesher = "• Dörtgen Yeniden Örgüleme (yalnızca ayrı iç satın alım ile)
Nesneni ağ eğrilerini takip eden dörtgen dominant bir ağ ile otomatik olarak yeniden örgüle.
Kılavuzları, yüz gruplarını ve yoğunluk boyamayı destekler.";
// ----------------------------------------------