// Generic confirmation (Confirm? [yes/ok/delete, cancel])
confirm = "Konfirmasi?";
// Answer to a question (Are you sure you want to do that? [yes, cancel])
confirm.yes = "Ya";
// Answer to a question (Are you sure you want to do that? [yes, no, cancel])
confirm.no = "Tidak";
// The generic ok in a confirm box (The next operation is dangerous. [ok, cancel])
confirm.ok = "Oke";
// Cancel something after being asked (Question? [answer, cancel])
confirm.cancel = "Batal";

// Experimental feature
experimental = "Eksperimental!";

status.exit = "Perubahan yang belum disimpan! Simpan sebelum menutup?";
status.exit.yes = "Simpan";
status.exit.no = "Jangan simpan";

// On single tap (should be short)
ontap = "Pada tap";

all = "Semua";
error = "Kesalahan";

reset = "Setel ulang";
resetOrder = "Atur ulang urutan";

clipboard = "Papan klip";
clipboard.copy = "Salin";
clipboard.paste = "Tempel";

// memory size
bytes = "byte";
kB = "kB";
MB = "MB";
GB = "GB";
TB = "TB";

// Noun
instance = "Instansi";
object = "Objek";

// Same value (usually for axis, e.g: x == y == z)
uniform = "Seragam";

sync = "Sinkronkan";

// position
position.top = "Atas";
position.bottom = "Bawah";
position.left = "Kiri";
position.right = "Kanan";
position.center = "Tengah";
// direction
direction.up = "Naik";
direction.down = "Turun";
direction.left = "Kiri";
direction.right = "Kanan";
// 3D cube
cube.top = "Atas";
cube.bottom = "Bawah";
cube.left = "Kiri";
cube.right = "Kanan";
cube.front = "Depan";
cube.back = "Belakang";

// Name of an item (object, tool, etc)
item.name = "Nama";
// Add a new item (object, tool, etc)
item.new = "Baru";
// Rename an item (object, tool, etc)
item.rename = "Ganti nama";
// Add a new item (object, tool, project, etc)
item.add = "Tambahkan";
// Update an item image with a new image (synonym: Update)
item.replace = "Pengganti";
// Save an item (object, tool, etc)
item.save = "Simpan";
item.save.confirm = "Konfirmasi simpan?";
// Update an item (update camera view point, etc)
item.update = "Perbarui";
// Reload last save of an item (object, tool, etc)
item.lastSave = "Simpanan terakhir";
// Reload last save of an item (object, tool, etc)
item.lastSave.confirm = "Muat simpanan terakhir?";
// Reset an item to its initial value (object, tool, etc)
item.reset = "Setel ulang";
item.reset.confirm = "Konfirmasi reset?";
// Make an item instance, similar to clone but keeps the underlying geometry (Synonym: link? soft clone?)
item.instance = "Instans";
// Uninstance the object, make the object real
item.uninstance = "Batalkan instans";
// Clone an item (object, tool, etc)
item.clone = "Kloning";
// Delete an item (object, tool, etc)
item.delete = "Hapus";
item.delete.confirm = "Konfirmasi penghapusan?";
item.delete.confirm.yes = "Ya, hapus";
// When we delete the item but the image is used somewhere
item.delete.used = "Gambar digunakan";
// Convert the item type (mesh, light) to a simple Node type
item.toNode = "Ke Node";
// Item visibility (object, layer, etc)
item.visible = "Tampak";
// Show an item (object, layer, etc)
item.show = "Tampilkan";
// Hide an item (object, layer, etc)
item.hide = "Sembunyikan";
// Select an item (object, layer, etc)
item.select = "Pilih";
// Unselect an item (object, layer, etc)
item.unselect = "Batalkan Pilih";
// Merge an item with another one below (layer)
item.mergeDown = "Gabungkan ke bawah";
// The order of an item in a list
item.order = "Urutan";
// Focus on previous item
item.previous = "Sebelumnya";
// Focus on next item
item.next = "Sesudahnya";
// The item is locked (either it cannot be selected, edited, or we preserve its details)
item.lock = "Kunci";
// No item selected
item.none = "Tidak ada";
// Draggable, moveable
item.draggable = "";

// Search something (text entry to filter item)
search = "Cari";

// Three-state toggle button (Auto, Off, On)
toggle.on = "Hidup";
// Three-state toggle button (Auto, Off, On)
toggle.off = "Mati";
// Three-state toggle button (Auto, Off, On)
toggle.auto = "Otomatis";

// When you launch the app and we need to reprocess some resource thumbnails
loading.reprocess = "Thumbnail hilang, memproses ulang file...";
loading.reprocess.cancel = "Lewati pembuatan thumbnail?";

access.title = "Aksesibilitas";
access.window = "Jendela Asistif";
access.pinch = "Cubitan";
access.drag = "Seret";
access.rotate = "Putar";
access.roll = "Gulung";

// Color of an object
material.color = "Warna";
// Defines how blurry or sharp the reflection on a material is (opposite of glossiness)
material.roughness = "Kekasaran";
// Defines how blurry or sharp the reflection on a material is (opposite of roughness)
material.glossiness = "Kegemilangan";
// Whether the material is a metal or not
material.metalness = "Kemetalan";
// How much light a surface will reflect
material.specular = "Spekular";
// Light that the surface can emit (glow)
material.emissive = "Emisif";
// Normal map (synonym: detail, bump)
material.normal = "Normal";
// flip y coordinate
material.normal.flipY = "BalikY";
// Ambient Occlusion (AO)
material.occlusion = "Okulasi";
// Textures, basically images wrapped on models (synonym: Maps, Texture maps)
material.textures = "Tekstur";
// Textures/Image
material.texture = "Tekstur";
// A warning indicating that the mesh has no UVs
material.warningNoUVs = "Tidak ada UVs!";
// Texture filtering https://en.wikipedia.org/wiki/Texture_filtering
material.texture.filter = "Penyaringan";
// Nearest Filtering (closest sample)
material.texture.nearest = "Terdekat";
// Bilinear Filter
material.texture.linear = "Linear";
// Mipmap filtering
material.texture.mipmap = "Mipmap";
// Triplanar mapping
material.projection = "Proyeksi";
material.projection.triplanar = "Triplanar";

// Prefer low power
about.lowPower = "GPU daya rendah";
about.lowPower.confirm = "Setelah mengubah nilai ini, Anda perlu memulai ulang Nomad.";
// Wintab wacom API
about.wintab = "Gunakan WinTab";
about.wintab.help = "Jika WinTab diaktifkan, Anda mungkin harus menonaktifkan Windows Ink dalam pengaturan Wacom Anda.

Sebaliknya, jika WinTab dinonaktifkan, maka Windows Ink harus diaktifkan dalam pengaturan Wacom";
// Prefer low power
about.fullScreen = "Layar penuh";
// Minify
about.minify = "Minimize UI";
about.minify.help = "Anda juga bisa mengetuk layar Anda dengan 4 jari, jika perangkat Anda mendukungnya.";
// Turntable will rotate the whole scene on itself (as it if was on a turntable)
about.turntable = "Piringan Putar";
// Rotation center of the turntable
about.turntable.pivot = "Pusat rotasi";
// Keep current pivot
about.turntable.pivot.keep = "Tetap aktif";
// Turntable pivot will be at the center of the scene
about.turntable.pivot.scene = "Skena";
// Make the entire scene turn around (speed of the animation)
about.turntable.speed = "Kecepatan";
// Stuffs that I used to make the app
about.credits = "Kredit";
// Link to open source projects that I used for the app
about.credits.openSource = "Sumber Terbuka";
// Only translate the &
about.credits.arts = "MatCaps dan HDRIs";
// Change languages of the app
about.languages = "Bahasa";
about.languages.help = "File terjemahan tersedia di $0";
// Link to the App Website
about.website = "Situs web";
// Link to the App Forum
about.forum = "Forum";
// Link to the App Manual
about.manual = "Manual";
// Link to the App Email
about.mail = "Dukungan";
// Link to the App Twitter account
about.twitter = "Twitter";
// Link to the App Instagram account
about.instagram = "Instagram";
// Link to the App Facebook account
about.facebook = "Facebook";
// Link to the App Discord account
about.discord = "Discord";
// Link to the App Threads account
about.threads = "Threads";

// The user canceled an operation that was running
alert.aborted = "Operasi dibatalkan!";
// Empty mesh
alert.mirror.empty = "Keluaran kosong!";
// Mesh already mirrored
alert.mirror.same = "Keluaran yang sama!";
// Error when an algorithm needs the object to have an hole (usually to fill it)
alert.hole.nothing = "Objek tidak memiliki lubang!";
// No operation occured because the mesh is already manifold
alert.manifold.already = "Mesh sudah manifold!";
// Visibility of the object is off (but should be on)
alert.shape.notVisible = "Objek saat ini tidak terlihat!";
// The user tried to trim an object but the selected region didn't touch the object
alert.trim.nothing = "Tidak ada yang dipotong.";
// The user tried to trim an object but the selected region completely encompassed the object
alert.trim.full = "Batalkan pemangkasan: objek sepenuhnya dipangkas.";
// In order to extract something, the mesh needs to have painted mask
alert.extract.none = "Tidak ada yang dapat diekstrak!";
// In order to split something, the mesh needs to have painted mask
alert.extract.split.none = "Tidak ada yang dapat dipisah!";
// List of disabled features when View Mode is selected
alert.view.disabled = "Fitur yang dinonaktifkan dalam Mode Tampilan:";
// Primitive Widgets are small ui stuffs in the viewport that the user can interact with to modify an object
alert.view.disabled.widgetPrimitive = "Widget dasar";
// The object needs to have two parts disconnected
alert.separate.fail = "Tidak dapat dipisahkan: objek hanya memiliki satu bagian!";
// Remesh is when you create a new topology (mesh) on an object
alert.voxelRemesh.success = "Remesh selesai!";
alert.voxelRemesh.empty = "Batalkan remesh: mesh hasil tidak memiliki permukaan.";
// Should not happen or very rarely, input here is an object
alert.voxelRemesh.invalidInput = "Masukan tidak valid!";
// Helper popup to tell the users the object will cloned
alert.matrix.clone = "Objek akan digandakan";
// Helper popup to tell the users the object will cloned
alert.matrix.instance = "Objek akan diinstansikan";
// A pivot refers the gizmo 3D position, this mode means we are moving the pivot
alert.gizmo.editPivot = "Edit mode pivot.";
alert.mask.full = "Topeng = 100%!";
// A pivot refers the gizmo 3D position
alert.gizmo.editObject = "Edit mode objek.";
// See Glossary (DynTopo)
alert.dynamic.enable = "Topologi dinamis AKTIF";
// See Glossary (DynTopo)
alert.dynamic.disable = "Topologi dinamis MATI";
alert.colorPicker = "Seret pada objek untuk memilih warna.";
// Transform mode is when the user can move the reference (image in the background) with its two fingers
alert.backgroundTransform = "Tekan sekali untuk keluar dari mode transformasi.";
// Edit the symmetry plane with the gizmo
alert.editSymmetry = "Tekan sekali untuk keluar dari mode edit simetri.";
// Show the painted mask on the mesh
alert.mask.show = "Tampilkan masker";
// Hide the painted mask on the mesh
alert.mask.hide = "Sembunyikan masker";
// Selection refers to the objects that are currently selected
alert.selection.lock = "Kunci pilihan";
// Selection refers to the objects that are currently selected
alert.selection.unlock = "Buka kunci pilihan";
// Hide the objects that are not selected
alert.selection.isolate = "Isolasi pilihan";
// Show the objects that are hidden
alert.selection.showAll = "Tampilkan semua";
// Project quick saving
alert.quickSave = "Menyimpan...";
// Painting on the object was hidden but the user did paint the object
alert.forcePainting.fill = "Tampilkan pengecatan diaktifkan, [Warnai semua] digunakan.";
// Painting on the object was hidden but the user started to paint on the object
alert.forcePainting.tool = "Tampilkan pengecatan diaktifkan, objek telah dicat.";
// See Glossary (Multiresolution)
alert.multiresLost = "Multiresolusi akan hilang!";
// Boolean cut mode will ignore some features
alert.booleanIgnored = "Boolean akan mengabaikan area yang di-mask atau disembunyikan!";
// The user is starting an operation that can lead to a crash
alert.range.warning = "Nilai detail tinggi dan mungkin memerlukan banyak memori!";
// Autosave popup
alert.autoSave.auto = "Simpan otomatis dalam... $0d";
// The selected object doesn't have any layers
alert.needLayer = "Alat saat ini memerlukan lapisan aktif.";
// The user decided to hide the painting on the objects
alert.paintingHidden = "Pengecatan tersembunyi!";
// The user decided to hide the masking on the objects
alert.maskingHidden = "Masker tersembunyi!";
// The user decided to display hidden faces
alert.hideIgnored = "Sembunyikan diabaikan!";
// The selected object doesn't have any layers
alert.noPartialWireframe = "Gambar parsial dinonaktifkan saat wireframe ditampilkan.";
// The user has selected a tool that is more intuitive to use when the camera is in orthographic mode
alert.shapeOrthographic = "Pertimbangkan untuk menggunakan kamera ortografi jika Anda ingin menghindari distorsi frustum perspektif saat menggunakan proyektor layar.";
// Trial version has a limited number of undo
alert.state.trial = "Versi percobaan: pembatalan dibatalkan";

background = "Latar belakang";
// A flat color will be displayed in the background of the scene
background.color = "Warna";
// 2 color with rotation
background.gradient = "Gradien";
// The environment (HDRI) will be displayed in the background
background.environment = "Lingkungan";
background.blur = "Buram";
background.exposure = "Paparan";

// Image that the artist uses as a reference
background.imageEnable = "Gambar referensi";
// The image will be displayed in overlay (used as a reference by the artist)
background.imageOverlay = "Lapisan";
// Opposite of transparency (Alpha)
background.imageAlpha = "Opasitas";
background.imageReset = "Reset pengaturan";
background.imageTransform = "Transformasi";
// X screen coordinate of the image reference
background.imageX = "Posisi X";
// Y screen coordinate of the image reference
background.imageY = "Posisi Y";
// Rotation of the reference image
background.imageRotation = "Rotasi";
// Scale of the reference image
background.imageScale = "Skala";
// Auto adjust the reference when moving the camera
background.syncLock = "Sinkronkan dengan kunci kamera";

// Blend: normal
blend.normal = "Normal";
// Blend: darker
blend.darker = "Lebih Gelap";
blend.darker.darken = "Gelapkan";
blend.darker.multiply = "Kalikan";
blend.darker.linearBurn = "Bakar Linear";
blend.darker.colorBurn = "Bakar Warna";
// Blend: lighter
blend.lighter = "Lebih Terang";
blend.lighter.lighten = "Terangkan";
blend.lighter.screen = "Layar";
blend.lighter.linearDodge = "Dodge Linear";
blend.lighter.colorDodge = "Dodge Warna";
// Blend: contrast
blend.contrast = "Kontras";
blend.contrast.hardLight = "Lampu Keras";
blend.contrast.softLight = "Lampu Lembut";
blend.contrast.overlay = "Overlay";
blend.contrast.hardMix = "Campuran Mati";
blend.contrast.linearLight = "Lampu Linear";
blend.contrast.vividLight = "Lampu Hidup";
blend.contrast.average = "Rata-rata";
// Blend: inversion
blend.inversion = "Inversi";
blend.inversion.exclusion = "Pengecualian";
blend.inversion.difference = "Perbedaan";
// Blend: cancelation
blend.cancelation = "Pembatalan";
blend.cancelation.divide = "Bagi";
blend.cancelation.subtract = "Kurangi";
// Blend: component
blend.component = "Komponen";
blend.component.luminosity = "Luminositas";

// Camera (point of view in 3D)
camera = "Kamera";
cameras = "Kamera";
camera.view = "Tampilan";
// Copy the views
camera.updateView = "Perbarui sudut pandang?";
// Add a new camera
camera.addView = "Tambah Tampilan";
// Focus on the camera
camera.focus = "Fokus";
// Add on the camera camera
camera.focusOn = "Fokus pada $0";
// Camera projection, Orthographic or Perspective
camera.projection = "Proyeksi";
// Camera projection, Orthographic or Perspective
camera.projection.orthographic = "Ortografis";
// Camera projection, Orthographic or Perspective
camera.projection.perspective = "Persepektif";
// camera Vertical Field of View
camera.fov = "Bidang Pandang Vertikal";
// Camera Field of View hint
camera.focal = "fokal $0mm (sensor 35mm)";
// Rotation mode controls how the user will interact with the camera rotation
camera.rotation = "Rotasi";
// Camera interaction mode, 2 degrees of freedom (synonym: Orbit)
camera.rotation.orbit = "Pemutar";
// Camera interaction mode, 3 degrees of freedom
camera.rotation.trackball = "Bola jejak";
camera.rotation.trackball.help = "Trackball memberikan lebih banyak kebebasan, Anda juga dapat menggulir kamera dengan 2 jari.";
// Camera interaction mode, 1st person view
camera.firstPerson = "Orang Pertama";
// How sensitive the camera is (synonym: sensitivity)
camera.speed = "Kecepatan";
// Camera rotation sensitivity
camera.speed.rotation = "Rotasi";
// Camera translation sensitivity
camera.speed.panning = "Translasi";
// Camera zooming sensitivity
camera.speed.zooming = "Perbesaran";
// Reset camera position
camera.resetView = "Atur Ulang Tampilan";
// Align the view (snap to nearest 90° angle)
camera.snapView = "Tampilan Snapped";
// Warning (camera is snapped and it switched to orthographic)
camera.snapOrthographic.warning = "Kamera di-snap (ortografis)";
// Switch to orthographic view when the view is snapped
camera.snapOrthographic = "Snap Ortografis";
camera.snapOrthographic.help = "Pilihan ini juga berfungsi saat menggunakan Snap Cube di sudut.";
// The Camera pivot is the point around which the camera rotates
camera.pivot = "Perbarui pivot...";
// When we double tap on the object with the finger/stylus
camera.doubleTapMesh = "Ketuk dua kali pada objek";
// When we double tap on the background with the finger/stylus
camera.doubleTapBackground = "Ketuk dua kali pada latar belakang";
// When we double tap on the background with the finger/stylus
camera.doubleTapBackgroundFocus.toggle = "Alihkan";
// Focus on the selection
camera.doubleTapBackgroundFocus.selection = "Seleksi";
// Focus on the entire scene
camera.doubleTapBackgroundFocus.scene = "Adegan";
// When double tapping with the finger/stylus, the camera pivot will be updated
camera.doubleTapPivot = "Ketika mengetuk dua kali";
camera.doubleTapPivot.help = "Perbarui poros rotasi saat mengetuk dua kali pada permukaan objek.";
// Allow new pivot even when zooming outside the object surface
camera.airPivot = "Izinkan air pivot";
camera.airPivot.help = "Izinkan pivot baru meskipun saat memperbesar di luar permukaan objek.";
// Update the pivot when you start interacting with the camera
camera.autoPivot = "Ketika kamera mulai bergerak";
camera.autoPivot.help = "Perbarui pivot saat Anda mulai berinteraksi dengan kamera.";
// Move the camera so that it focus on the intersection point
camera.doubleTapFocus = "Fokus";
camera.doubleTapFocus.help = "Saat mengetuk dua kali pada objek, kamera akan bergerak dan fokus pada titik yang dipilih.";
// Disable XY panning when unzomming
camera.centerZoomOut = "Pusatkan tampilan saat memperkecil zoom";
camera.panZoomOut.help = "Ketika opsi ini dinonaktifkan, posisi poros ini akan tetap terjaga.";

// Toolbox context (when expanded), multiple objects are selected
context.multiselection = "Multiseleksi";
// There is 0 nodes/items selected
context.noSelection = "Tidak ada seleksi";

// Curve type, presets lets the user chooses between predefined curves
curve.preset = "Prasetel";
// Quick curve x side shift
curve.shift = "Pergeseran";
// Curve type, https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline
curve.catmull = "Catmull-Rom";
// Curve curve, https://en.wikipedia.org/wiki/Spline_(mathematics)
curve.spline = "Spline";
curve.bspline = "B-spline";
curve.precision = "Ketepatan";
// merge or collapse 1 point into another
curve.merge = "Gabungkan";
// snap
curve.snap = "Tangkap";
curve.snap.offset = "Pergerakan";
curve.snap.offset.help = "Nilai 100% sama dengan jari-jari tabung.";
curve.snap.surface = "Permukaan";
curve.snap.vertex = "Verteks";
curve.snap.grid = "Grid (jika dijepit)";
// Regular spaced sampling
curve.uniform = "Seragam";
curve.uniform.help = "Kurva akan diambil sampel pada jarak teratur, untuk memastikan kepadatan seragam.

Anda dapat menonaktifkan opsi ini untuk sedikit mengontrol loop tepi dengan menambahkan titik kontrol baru pada kurva.";
// Display the falloff curve in a symmetric way
curve.symmetric.help = "Tampilkan efek jatuh simetris.

Opsi ini hanya merupakan isyarat visual, tidak mempengaruhi efek jatuh itu sendiri";
curve.radius = "Radius";
curve.twist = "Putar";
curve.spiral = "Spiral";
curve.spiral.twist = "Sudut puntir";
curve.spiral.scale = "Skala";
curve.spiral.offset = "Pergerakan";
curve.spiral.angle = "Offset sudut";
curve.pivot = "Poros";
curve.pivot.self = "Sendiri";
curve.pivot.children = "Anak";

// Set the desired FPS (frame per second, refresh rate)
debug.limitFps = "Target FPS";
debug.limitFps.help = "Ketika dinonaktifkan, nilai default berarti akan sinkron dengan laju penyegaran layar.";

// Warning about UVs (using extra memory)
debug.uvPrimitive.warning = "Nonaktifkan opsi ini jika Anda tidak memerlukan UVs.

Mesh dengan UVs akan menggunakan lebih banyak memori.";
// Debug option, Normalize means transforming the data so that it fits in [0-1] the range
debug.uvNormalize = "Normalisasi UVs";
debug.uvNormalize.help = "Nomad akan menormalisasi UVs di dalam ubin [0-1].";

// Debug option, display an window with some debugging logs
debug.logs = "Log";
// Model shortcut window
debug.shortcut = "Tombol pintas jendela";
// Debug option, overrides the rendering to display the depth buffer
debug.heightmap = "Peta Tinggi";
// Debug options, graphical stuffs
debug.graphics = "Grafik";
// Debug options, generate screenshots with size compatible with the iOS store
debug.thumbnails = "Buat thumbnail toko";

// Open file explorer
file.explore = "Jelajahi";
// Empty list: there is no projects
file.project.load = "Muat ulang proyek saat memulai";
// Empty list: there is no projects
file.project.empty = "Anda belum memiliki proyek yang disimpan!";
// The current opened project has some unsaved changes
file.project.unsaved = "Perubahan yang tidak disimpan!";
// The user will loose its project's unsaved changes
file.project.loseUnsaved = "Anda akan kehilangan perubahan yang belum disimpan!";
// Indicates to the user that the project thumbnail corresponds to the last manual save
file.project.lastManualSave = "Pratinjau penyimpanan manual terakhir";

file.project = "Proyek";
// Save current project (or overwrite if the project has already been saved once)
file.project.save = "Simpan";
// E.g: Save "my_project"?
file.project.save.confirm = "Simpan $0?";
// Make a copy
file.project.saveAs = "Simpan Sebagai";
// Overwrite another project
file.project.overwrite = "Timpa";
// E.g: Overwrite "my_other_project"?
file.project.overwrite.confirm = "Timpa $0?";
// Open a project
file.project.open = "Buka";
// E.g: Open "my_project"?
file.project.open.confirm = "Buka $0?";
// E.g: Clone "my_project"?
file.project.clone.confirm = "Klon $0?";
// Load another project and add/append all its data to the current scene
file.project.add = "Tambahkan ke adegan";
// E;g: Add "my_other_project" to the scene?
file.project.add.confirm = "Tambahkan $0 ke adegan?";
// Reset the scene and create a new project
file.project.new = "Baru";
file.project.new.confirm = "Buat adegan baru?";
// Delete a project (not corresponding to the currently opened one)
file.project.delete.confirm = "Hapus $0?";
// Delete a project (corresponding to the currently opened one)
file.project.delete.confirmActive = "Hapus $0?

Ini adalah proyek aktif saat ini!";

// Auto save section
file.autoSave = "Simpan Otomatis";
file.autoSave.confirm = "Nonaktifkan Simpan Otomatis?";
file.autoSave.help = "Simpan proyek Anda dalam berkas terpisah secara teratur.

Berkas autoSave dapat ditemukan di:";
// Interval in minutes in which the auto save popup will appear
file.autoSave.popup = "Batas waktu pop-up";
// In minutes
file.autoSave.minutes = "Timer pop-up";
// Delete the current autoSave data
file.autoSave.delete = "Buang Simpan Otomatis";
// Open the outdated auto save
file.autoSave.open.manual = "Buka simpan manual yang usang";
file.autoSave.open.auto = "Buka auto simpan yang usang";

// color space (linear or srgb), do not translate linear/srgb if there is a doubt
file.colorSpace = "Ruang Warna";
file.colorSpace.help = "Coba aktifkan opsi ini jika warna terlihat salah.";
file.colorSpace.linear = "Linear";
file.colorSpace.srgb = "sRGB";

// Configure imports option
file.importSettings = "Opsi impor";

// Load interface preference settings when opening a scene file
file.import.guiSettings = "Simpan pengaturan gui";
file.import.guiSettings.help = "Saat membuka atau menimpor file proyek, semua pengaturan terkait gui yang disematkan dalam proyek akan dimuat.";
// OBJ have "groups" and "objects", by default groups are ignored, use this option to consider groups as separate objects
file.import.obj.splitByGroup = "Pisahkan OBJ berdasarkan grup";
file.import.obj.splitByGroup.help = "Ketika diaktifkan, Nomad akan memisahkan grup OBJ menjadi objek terpisah.";
// Merge all the object layers at when loading a file (deleting them in the process)
file.import.mergeLayers = "Gabungkan Lapisan";
// Ignore the textures present in the file to load
file.import.skipTextures = "Lewati tekstur";
// Do not fiddle with the object topology when loading the file
file.import.keepTopology = "Pertahankan topologi";
file.import.keepTopology.help = "Gunakan opsi ini jika Anda tidak ingin Nomad bermain dengan topologi mesh yang diimpor.

Ini akan menonaktifkan pengaturan ulang verteks/wajah, penghapusan duplikat verteks/wajah dan penghapusan verteks yang tidak digunakan.";

// Import file section
file.import.title = "Impor";
file.import.title.help = "Format yang didukung:";
// The user imports a scene file that will replace the current scene
file.import.open = "Buka";
file.import.open.confirm = "Impor file baru?";
// The user imports a scene file that will be added/appended the current scene
file.import.add = "Tambahkan ke adegan";
file.import.add.confirm = "Impor file baru?";

// Export scene file
file.export = "Ekspor";

// Filter nodes that we want to export
file.select.include = "Termasuk";
file.select.all = "Semua";
file.select.visible = "Terlihat";
file.select.selected = "Dipilih";
file.select.unselected = "Tidak terpilih";

// Export each node in a separate file
file.export.separate = "Satu file per objek";

// Export the current selected objects instead of the entire scene
file.onlySelection = "Hanya sertakan objek yang dipilih";
file.onlySelection.help = "Hanya sertakan seleksi, bukan seluruh adegan.";
// Tries to generate quad (rectangle polygon) from triangles
file.convertToQuad = "Membangun kembali quad";
file.convertToQuad.help = "Membangun kembali quad dari segitiga dengan memasangkan segitiga (jika berdekatan dalam file).";
// ----------------------------------------------
// Whether we include the textures in the exported file
file.export.texture = "Tekstur";
// Baking means transfering/converting
file.export.texture.help = "Opsi ini tidak memanggang warna puncak ke dalam tekstur.

Ini hanya termasuk tekstur jika objek memiliki tekstur pada materiilnya.";
// ----------------------------------------------
file.export.color0 = "Warna vertex";
file.export.color1 = "Cat PBR";
file.export.color1.help = "Ekspor kekasaran, kilap dan pewarnaan mask. Ini akan diabaikan oleh perangkat lunak lain.";
// ----------------------------------------------
// Whether we include normals vector in the exported file
file.export.normal = "Norma";
file.export.normal.help = "Centang opsi ini jika Anda ingin membuka file di perangkat lunak lain.

Nomad selalu mengabaikan norma karena akan menghitung ulang norma tersebut.";
// ----------------------------------------------
file.export.tangent = "Tangen";
file.export.tangent.help = "Periksa opsi ini jika Anda ingin membuka file dalam perangkat lunak lain.

Tangen hanya digunakan jika model memiliki peta normal.

Nomad selalu mengabaikan tangen karena akan menghitung ulang.";
// ----------------------------------------------
file.export.nomad.help = "Format file internal Nomad Sculpt.

Format ini tidak akan memuat di perangkat lunak lain, ini terutama untuk tujuan impor ulang.";
// ----------------------------------------------
// Whether we include layers in the exported file (see glossary for layer)
file.export.gltf.layer = "Lapisan";
file.export.gltf.layer.help = "Ekspor lapisan sebagai morph. Resmi didukung oleh glTF sehingga seharusnya berfungsi di perangkat lunak lain juga.";
// Whether we include painting of layers in the exported file (see glossary for layer)
file.export.gltf.layerPaint = "Melukis lapisan";
file.export.gltf.layerPaint.help = "Ekspor pengecatan lapisan. Biasanya diabaikan oleh perangkat lunak lain.";
// ----------------------------------------------
file.export.obj.warning = "Lapisan dan pengecatan tambahan (kesat logam dan topeng) akan hilang.";
// Whether we include the vertex color in the exported file
file.export.obj.color = "Warna verteks";
file.export.obj.color.help = "Beberapa perangkat lunak 3D akan dapat membacanya tetapi tidak semuanya.";
file.export.obj.color.help.append = "Lampirkan informasi warna setelah verteks.";
file.export.obj.color.help.hexa = "Cara alternatif untuk mengkode warna. Ini juga mendukung data mask.";
file.export.obj.faceGroup = "Grup Bentangan";
file.export.obj.object = "Tulis Objek";
file.export.obj.object.help = "Jaga objek tetap terpisah.

Menonaktifkan opsi ini akan mengekspor semua sebagai satu kesatuan.
Anda perlu menonaktifkan opsi ini jika ingin menggunakan fitur 'Mesh ID / Polygroup' di Substance Painter.";
file.export.obj.archive = "Jenis";
file.export.obj.archive.folder = "Folder";
file.export.obj.archive.zip = "Zip";
file.export.obj.archive.help = "Beberapa aplikasi (Google Drive, One Drive, dll.) tidak mendukung impor folder, jadi Anda bisa menggunakan Zip sebagai gantinya.";
// ----------------------------------------------
file.export.ply.warning = "Lapisan dan pengecatan tambahan (kesat, logam, dll) akan hilang.";
// ----------------------------------------------
file.export.stl.warning = "Lapisan dan pengecatan tambahan (kesat, logam, dll) akan hilang.";
// Whether we include the vertex color in the exported file
file.export.stl.color = "Warna puncak";
file.export.stl.color.help = "Beberapa perangkat lunak 3D akan dapat membacanya tetapi tidak semuanya.";
// ----------------------------------------------
file.export.usd.skew = "Izinkan skew";
file.export.usd.skew.help = "Izinkan skew dalam transformasi matriks.

Ketika dinonaktifkan, Nomad akan memisahkan matriks skew menjadi dua transformasi pemahaman dan rotasi.";
// ----------------------------------------------
// Advanced settings
settings.advanced = "Lanjutan";
// Means that all these options will be resetted when the app restarts
settings.notSaved = "Opsi ini tidak disimpan dalam pengaturan.";
settings.reset.title = "Pengaturan";
settings.reset.title.help = "Ini akan mengatur ulang pengaturan preferensi aplikasi.

Beberapa sumber daya disimpan secara terpisah dan TIDAK akan diatur ulang, termasuk:
• Proyek
• Pengikatan Tombol
• Preset Alat
• Lingkungan HDR
• MatCaps
• Alphas
• Tekstur (kuas)
• Gambar Referensi

Catat bahwa semua hal yang terkait dengan proyek akan tetap utuh, seperti pencahayaan, Proses Pasca, perspektif kamera, dll";

// Reset preference settings button
settings.reset = "Reset ke default";
settings.reset.confirm = "Reset pengaturan preferensi?";

// Render a screenshot of the scene
file.render = "Render";
// If we include the App Interface in the exported screenshot
file.render.showInterface = "Tampilkan antarmuka";
// Resolution ratio of the exported screenshot
file.render.renderRatio = "Rasio render";
file.render.renderRatio.help = "Nilai 1,0 berarti bahwa Nomad akan merender pada resolusi yang sama dengan ukuran gambar yang diminta di bawah.

Gunakan opsi ini jika Anda tidak dapat merender pada resolusi tertentu (crash karena kurangnya memori).";
// Desired size of the exported screenshot
file.render.size = "Ukuran akhir";
// Desired size of the exported screenshot (custom vs predefined size)
file.render.size.custom = "Kustom";
// Screen resolution parameters for the export screenshot features
file.render.screenResolution = "Layar";
// width of exported screenshot
file.render.width = "Lebar";
// height of exported screenshot
file.render.height = "Tinggi";
// export screenshot of the scene
file.render.warn = "Resolusi ekspor tinggi ($0x$1)!

Pastikan untuk menyimpan proyek Anda jika perangkat kehabisan VRAM dan mengalami crash.";
// If true, then the exported screenshot will have transparency data in the image
file.render.transparent = "Latar belakang transparan";
file.render.transparent.help = "Pilihan ini berguna jika Anda ingin memasukkan mesh ke dalam perangkat lunak pembuatan 2D.

Transparansi objek parsial belum didukung saat ini.";

// Disable this option to have per-tool pressure settings (instead of shared settings)
pressure.useGlobal = "Gunakan pengaturan global";
pressure.useGlobal.help = "Secara default, alat berbagi pengaturan tekanan yang sama.

Hapus centang opsi ini jika Anda menginginkan pengaturan tekanan khusus untuk alat ini.";

// Pencil pressure
pressure.title = "Tekanan";
// Pencil/Stylus pressure will be ignored
pressure.noTool = "Alat ini tidak menggunakan tekanan pensil.";
// The tool can support pressure but its selected stroke type will ignore it
pressure.noGrab = "Jenis sapuan Grab akan mengabaikan pengaturan tekanan.";
// The stylus pressure will impact the tool radius (more pressure -> bigger radius)
pressure.radius = "Radius";
// The stylus pressure will impact the tool intensity (more pressure -> stronger intensity)
pressure.intensity = "Intensitas";
// Average pencil pressure event to get smoother result
pressure.average = "Pelunakan tekanan";
pressure.average.help = "Rata-rata peristiwa tekanan pensil untuk hasil yang lebih halus.";
// Limit pressure to 100%
pressure.limit = "Batasi tekanan pada 100%";
pressure.limit.help = "Ini adalah pengaturan global.

Gunakan opsi ini untuk memastikan tekanan stylus tidak pernah melebihi 100%.";

// list of inputs allowing camera interaction
gesture.camera = "Kamera";
// list of inputs allowing sculpting interaction
gesture.sculpt = "Membuat patung";
// Select object
gesture.select = "Pilih objek";
// Finger/Touch input
gesture.finger = "Jari";
// Stylus/Pencil
gesture.stylus = "Stylus";
// Mouse/Trackpad
gesture.mouse = "Mouse";

// long press to pick the color/material under the cursor
gesture.dropper = "Pemilihan material";
gesture.dropper.help = "Pemilih warna/material dapat diaktifkan dengan menekan lama pada kanvas.

Perhatikan bahwa ini hanya berfungsi jika kuas saat ini mengaktifkan pengecatan.";

camera.airStroke = "Izinkan goresan udara";
camera.airStroke.help = "Izinkan goresan patung dimulai meskipun kursor awal meleset dari mesh.

Pilihan ini hanya aktif untuk input dengan patung diaktifkan dan kamera dinonaktifkan.";

// Three fingers on screen
gesture.three.title = "Tiga jari";
gesture.three.light = "Putar pencahayaan";
gesture.three.light.help = "Putar lingkungan, lampu, dan MatCap.";
gesture.three.radius = "Radius Alat";
gesture.three.intensity = "Intensitas Alat";

// If this option is enabled, finger inputs on screen will use the smoothing tool
gesture.finger.smooth = "Jari selalu meratakan";
gesture.finger.smooth.help = "Opsi ini hanya aktif jika alat pemahat aktif.";
// If enabled, the pressure will be taken into account even if it's not coming from a recognized stylus
gesture.unknownPressure = "Izinkan tekanan yang tidak dikenali";
gesture.unknownPressure.help = "Centang opsi ini jika tekanan tidak berfungsi dengan pensil Anda atau jika Anda memerlukan tekanan jari.";

// Action when we press an Android pencil button
gesture.pencilAction.android = "Tombol pensil";
// Action when we use the Pencil double Tap
gesture.pencilAction.ios = "Ketuk ganda pensil";
gesture.pencilAction.ios.help = "Hanya aktif untuk Apple Pencil generasi 2.";
// Pencil button (or iOS pencil double tap) action: Nothing
gesture.pencilAction.none = "Tidak ada";
// Pencil button (or iOS pencil double tap) action: flip adding/substracting sculpt matter setting
gesture.pencilAction.alt = "Tambah/Kurang";

// Enable Mask gesture by tapping once on the screen
gesture.mask.oneTap = "Jalan pintas satu ketuk";
gesture.mask.oneTap.help = "Izinkan pintasan Mask dengan mengetuk layar sekali, tanpa harus menahan pintasan tombol mask.

Ini akan memungkinkan gerakan berikut:
• ketuk latar belakang untuk membalikkan mask
• ketuk area bertopeng untuk mengaburkan mask
• ketuk area tanpa mask untuk mempertajam mask";
// Hold the finger on screen to toggle between two tools: Mask and SelMask
gesture.mask.holdStroke = "Garis";
gesture.mask.holdStroke.help = "Tekan panjang akan beralih antara Mask dan SelMask dan memulai garis baru.

Di akhir garis, alat sebelumnya dipilih kembali.";
gesture.mask.holdIdle = "Alat";
gesture.mask.holdIdle.help = "Tekan panjang dan lepaskan tanpa bergerak untuk beralih antara Mask dan SelMask.";

// Shortcut customization, choose the action that the shortcut will performan (select tool, etc)
gesture.shortcut = "Jalan pintas";

// Shortcuts to undo/redo
gesture.history = "Jalan pintas riwayat";
gesture.history.help = "• Urungkan: ketuk dengan 2 jari
• Ulangi: ketuk dengan 3 jari";
gesture.history.hold = "Tekan lama";
gesture.history.hold.help = "Tahan 2/3 jari di layar.";

// Size rejection is when we try to ignore the palm of the hand when we interact with a tablet
gesture.palmRejection = "Penolakan telapak";
gesture.palmRejection.confirm = "Pastikan untuk menonaktifkan opsi ini jika Anda mengalami kesulitan berinteraksi dengan kanvas!";
gesture.palmRejection.help = "Tolak input jika ukuran area kontak lebih besar dari nilai ini.

Mungkin tidak bekerja di setiap perangkat.";
// Size in pixel for the palm rejection feature
gesture.palmRejection.size = "Ambang batas ukuran maksimal";

// Smoothing strategy
extract.polish.all = "Semua";
extract.polish.sharp = "Tepi tajam";
extract.polish.border = "Hanya tepi";
// Smooth the border in a way that it matches completely with its dual
extract.polish.syncBorder = "Sinkronisasi tepi";
// topology of extracted mesh
extract.edgeLoop = "Siklus tepi (samping)";
extract.edgeLoop.auto = "Otomatis siklus tepi";
extract.edgeLoop.division = "Pembagian";
// The thickness of the extracted mesh (from the painted mask)
extract.thickness = "Ketebalan";
// Carve the mask into the surface
extract.carve = "Ukir";
// Extract a new mesh from the painted mask
extract = "Ekstrak";
// Preview extract
extract.preview = "Pratinjau";
// Extract two new mesh from the painted mask and from the unmasked area
extract.split = "Pisah";
// How should we close the topology of the extracted object
extract.action = "Aksi penutupan";
extract.action.help = "• Tidak ada
Cukup ekstrak bagian dan biarkan terbuka.

• Isi
Lubang diisi dan diratakan.
Jangan gunakan opsi ini untuk permukaan datar.

• Cangkang
Tutup bentuk diekstraksi dengan ketebalan tertentu.

• Lapisan
Ekstrak perbedaan lapisan (hanya sub-menu lapisan).";
// Do not close the mesh (leave it open)
extract.action.none = "Tidak ada";
// Close the mesh with a hole-filling algorithm
extract.action.fill = "Isi";
// Close the mesh by adding a thickness on the surface
extract.action.shell = "Kulit";
// Close the mesh by using the layer data as a difference thickness
extract.action.layer = "Lapisan";

// uv part of revolution surface
genus.main = "Utama";
genus.hole = "Lubang";
genus.bottom = "Bawah";
genus.top = "Atas";

// History, list of undo/redo
history = "Riwayat";
// First "undo" state
history.root = "Akar";
history.undoConfirm = "Apakah Anda mengonfirmasi untuk membatalkan semua operasi ini?";
history.undoWarning = "Jika Anda melakukan pengeditan setelahnya, Anda mungkin kehilangan banyak perubahan.";
// Settings concerning the history stack of undo/redo
history.stack = "Tumpukan";
// Actions to include in the undo/redo stack
history.include = "Sertakan tindakan";
// include lighting editing in the undo/redo
history.includeLights = "Cahaya";
history.includeLights.help = "Jika opsi ini dinonaktifkan, memindahkan lampu dengan Gizmo masih akan diperhitungkan, karena dapat mempengaruhi objek lain dalam hirarki scene.";
// include postProcess editing in the undo/redo
history.includePostProcess = "Pemrosesan Pasca";
// include shading parameters (MatCap & HDRIs) editing in the undo/redo
history.includeShading = "MatCaps & HDRIs";
// Can limit the stack of undo/redo size
history.limitSize = "Batas Riwayat";
history.limitSize.help = "Ukuran maksimum riwayat.

Riwayat akan diperbarui pada operasi yang direkam berikutnya.";
// Limit the number of undo in the history stack
history.limitStack = "Batas tumpukan";
history.limitStack.help = "Jumlah operasi maksimum yang dapat disimpan oleh aplikasi.

Riwayat akan diperbarui pada operasi yang direkam berikutnya.";
// Value where you define how many operations you can undo before it displays a warning
history.rangeProtect = "Jumlah maksimum yang dapat dibatalkan";
history.rangeProtect.help = "Jika Anda melangkah jauh ke dalam sejarah, itu akan meminta dialog konfirmasi sebelum membatalkan banyak operasi.";
// When enabled, each time the user undo an operation it will undo the camera position as well
history.restoreCamera = "Kembalikan kamera";
history.restoreCamera.help = "Aktifkan opsi ini untuk mengembalikan tampilan kamera yang disimpan ketika Anda membatalkan/mengulangi sebuah tindakan.";
// Undo
history.undo = "Batalkan";
// Redo
history.redo = "Ulangi";
// Shown during undo
history.state.undo = "Batalkan: $0";
// Shown during redo
history.state.redo = "Ulangi: $0";
// Shown during undo/redo
history.state.voxelRemesh = "Remesh voxel";
// Shown during undo/redo
history.state.surfaceRemesh = "Permukaan remesh";
// Shown during undo/redo
history.state.multiresLevel = "Perubahan resolusi";

// Debugging/Inspect object material (view channel separately color, roughness, normal, uv, etc)
inspect = "Inspektur";
// Inspector but SHORT
inspect.short = "Periksa";
// Display the material channel on the background
inspect.onBackground = "Pada Latar Belakang";
// Display the material channel on the mesh
inspect.onMesh = "Pada Mesh";
// Show UV seams
inspect.seams = "Jahitan";

// Interface customization
interface = "Antarmuka";

// Resize window (should be short)
interface.resize = "Ubah ukuran";

// UI customization: one item row will stands on one line (synonym: Inlined)
interface.compact = "UI: Kompak";

// UI customization: each row of the list will be bigger
interface.expandList = "UI: Perbesar daftar";
// UI customization: each row of the list will be bigger
interface.expandList.help = "Hanya opsi antarmuka untuk memudahkan pengelolaan daftar.";

// Add shortcuts buttons to the bottom of the screen
interface.shortcut.bottom = "Tambahkan pintasan (bawah)...";
// Floating window
interface.shortcut.float = "Tambahkan pintasan (jendela)...";

// Interface option (main base color)
interface.colorBase = "Warna dasar";
// Interface option (accent widget color)
interface.colorSelect = "Widget warna";
// Interface option (if the menus are transparent or opaque)
interface.panelTransparent = "Panel transparan";
// Interface option (panel blurriness, if the menus are transparent)
interface.blurFactor = "Kekuatan kabur";
// Interface option (color of panels, if the menus are transparent)
interface.colorBaseTransparent = "Panel warna";

// Interface color style
interface.preset.title = "Preset";

// Reset interface settings
interface.resetAll = "Atur ulang gaya";
interface.resetAll.confirm = "Setel ulang pengaturan antarmuka?";
// help popup when hovering
interface.hoverHelp = "Popup bantuan saat melayang";
// Interface option (main base color)
interface.iconSupport = "Tombol kontras tinggi";
interface.iconSupport.help = "Gaya alternatif untuk tombol yang membuatnya lebih terlihat saat diaktifkan.

Jika diatur ke Auto, Nomad akan menggunakan mode ini ketika kontras warna antarmuka antara diaktifkan/dinonaktifkan rendah.";
// Interface customization
interface.flipTop = "Cermin bilah atas";
// Interface customization
interface.flipBottom = "Cermin bilah bawah";
// Interface customization
interface.flipMiddle = "Cermin bilah samping";
// list of tools
interface.toolbox = "Kotak peralatan";
// hide toolbox by default
interface.toolbox.hide = "Tersembunyi";
// Interface customization (the toolbox is a grid, we can adjust the column count)
interface.toolbox.columns = "Kolom";
// Interface customization (the toolbox is a grid, we can adjust the column count)
interface.toolbox.rows = "Baris";
// Reset the tool's order in the toolbox
interface.toolbox.resetOrder = "Atur ulang urutan";
// Colored text and icon
interface.toolbox.color = "Berwarna";
// Top bar
interface.top.title = "Bar atas";
interface.top.responsive = "Responsif";
interface.top.responsive.help = "Opsi ini lebih relevan untuk layar kecil.";
interface.top.responsive.multiline = "Multiline";
interface.top.responsive.scroll = "Gulir";
interface.top.responsive.collapse = "Runtuhkan";
interface.top.alt = "Urutan alternatif";
interface.top.alt.help = "Ikon urutan alternatif untuk menu atas.

Menu yang terkait dengan penyuntingan mesh sebagian besar berada di sisi yang berlawanan dengan menu scene, yang dapat membantu dalam penyuntingan scene.";
// Scale the interface
interface.scale = "Skala keseluruhan";
// Spacing between widgets
interface.cursorStep = "Jarak vertikal";
// Width of the interface panels
interface.panelWidth = "Lebar panel";
// Size of fonts
interface.fontScale = "Skala huruf";
// Inset
interface.inset.title = "Offset tepi";
interface.inset.title.help = "Anda hanya dapat mengubah nilai-nilai ini jika Anda mengalami masalah dengan tombol-tombol di tepi layar.

Jika penggeser dinonaktifkan, Nomad akan menggunakan nilai area aman yang dikembalikan oleh perangkat itu sendiri.";

// (see Glossary for Layer)
layer = "Lapisan";
layers.syncTransform = "Sinkronisasi transformasi";
layers.syncTransform.help = "Jika diaktifkan, semua lapisan yang tidak dipilih akan disesuaikan tergantung pada rotasi transformasi, skala dan kemiringan.

Nonaktifkan opsi ini jika lapisan lain dimaksudkan untuk digunakan tanpa transformasi baru yang Anda terapkan.

Ketika diatur otomatis, hanya lapisan yang terlihat yang akan disesuaikan.";
// (see Glossary for Layer)
layers.lock = "Tetap detail lapisan atas";
// (see Glossary for Layer)
layers.lock.yes = "Kunci lapisan atas?";
// (see Glossary for Layer)
layers.lock.warning = "Selama memahat, deformasi dari lapisan atas akan diabaikan.

Namun, detail dari lapisan ini masih akan terlihat.

Opsi ini hanya berfungsi jika lapisan atas memiliki detail skala yang relatif kecil.";
// (see Glossary for Layer)
layers.addLayer = "Tambah lapisan";
// (see Glossary for Layer)
layer.factors = "Faktor saluran";
// (see Glossary for Layer)
layer.factor = "Faktor";
// (see Glossary for Layer)
layer.offset = "Ofset";
// Layer blend mode
layer.blendMode = "Mode Lapisan";
// (see Glossary for Layer)
layer.base = "Dasar";
layer.base.nothing = "Tidak ada yang dapat diekstrak!";
layer.base.background = "Material latar belakang";
layer.base.background.help = "Jika aktif, hanya nilai material yang berbeda dari material latar belakang yang akan diekstrak.";
// (see Glossary for Layer)
layers = "Lapisan";
layers.title = "Lapisan";
// (see Glossary for Layer)
layers.title.help = "Lapisan dapat merekam offset posisi dan pengecatan, ini bisa berguna untuk alur kerja non-linear.
Misalnya dengan bereksperimen berbagai ekspresi wajah tanpa mengandalkan tumpukan riwayat untuk membatalkan perubahan.

Untuk data pengecatan, lapisan diurutkan dari atas ke bawah; jadi lapisan di atas akan menutupi lapisan bawah.

Anda dapat menghapus bagian dari lapisan dengan menggunakan alat `DelLayer`.";
layers.primitive = "Lapisan tidak tersedia untuk primitif.";
// When there is no layer selected (see Glossary for Layer)
layers.baseSelected = "Tidak ada";

light = "Cahaya";
lights = "Lampu";
// Intensity of light
light.intensity = "Intensitas";
// Color of light
light.color = "Warna";
// Kelvin (the temperature unit)
light.kelvin = "Kelvin";
// Temperature in Kelvin (Alternative way to compute the color of the light)
light.temperature = "Temperatur";
// The attachment of a light defines how it will move when the user moves the camera
light.attachment = "Lampiran";
// The light will stay still even if the user moves the camera
light.attachment.fixed = "Tetap";
// The light will move along the camera
light.attachment.camera = "Kamera";
light.attachment.help = "• Ditetapkan
Orientasi lampu tidak akan berubah.

• Kamera
Orientasi lampu bergantung pada sudut pandang kamera.";
// Light type (directional, spot, point)
light.type = "Tipe";
// Directional light (synonym: sun light)
light.type.directional = "Arah";
light.type.sun = "Matahari";
// Directional light (synonym: sun light)
light.type.environment = "Lingkungan";
light.type.hdri = "HDRI";
// Spot light emits light in a single direction, restricted by a cone shape.
light.type.spot = "Titik";
// Point light emits lights everywhere (synonym: omni, omnidirectional)
light.type.point = "Titik";
// For directional light (angle jitter)
light.angle = "Sudut";
// For point/spot light (offset jitter)
light.size = "Ukuran";
// Cone angle for spot angles
light.spot.angle = "Sudut kerucut";
// Softness of the spot light
light.spot.softness = "Kelembutan";
// Position of the light
light.position = "Posisi";
// Enable or disable shadows for a light
light.shadow.cast = "Bayangan";
// Point light only works with "screenspace" shadow type (not "shadow map")
light.shadow.pointTip = "Cahaya titik hanya mendukung bayangan ruang layar.";
light.shadow.type = "Jenis bayangan";
// https://en.wikipedia.org/wiki/Shadow_mapping
light.shadow.type.shadowMap = "Peta bayangan";
// Shadows computed with only the information visible on screen
light.shadow.type.screenspace = "Ruang layar";
light.shadow.type.screenspace.help = "Fitur eksperimental, mungkin akan dihapus pada rilis mendatang.

Opsi ini dimaksudkan untuk digunakan dengan fitur bayangan lembut.";
// Adjustment to fix artefacts
light.shadow.bias = "Penyesuaian";
// How blurry the shadow is
light.shadow.softness = "Kelembutan";
// Contact shadows are more precise shadows on small distance (synonym: cavity shadows?)
light.contact = "Kontak";
light.contact.help = "Jika otomatis dipilih, hanya cahaya yang paling dominan yang akan memiliki bayangan kontak.";
// Thickness threshold for screen-space shadows (synonym: threshold, bias)
light.shadow.tolerance = "Toleransi";
// Activated the light
light.visible = "Tampilkan";
// Move the light in front of the camera (but keeps its inner orientation)
light.resetPosition = "Pusatkan ulang";

// Object's material
material = "Bahan";
// See glossary
material.pbrRoughnessMetalness.warning = "Kekasaran dan Metalness memerlukan mode bayangan PBR.";
// See glossary
material.pbrReflectance.warning = "Reflektansi memerlukan mode bayangan PBR.";
// See glossary
material.pbrRefraction.warning = "Pembiasan memerlukan mode bayangan PBR.";
// See glossary
material.pbrSubsurface.warning = "Subpermukaan memerlukan mode bayangan PBR.";
// Value that says how much light will change direction when hitting the surface
material.ior = "Indeks Pembiasan";
// an object-level value that overrides the roughness interior/surface of the mesh
material.paintingOverride = "Lepaskan kekasaran";
// The roughness in the inside is turbidity
material.paintingOverride.help = "Ada dua kekasaran yang bermain, satu untuk permukaan dan satu di dalamnya.

Namun hanya ada satu kekasaran yang dapat dicat, sehingga kedua kekasaran memiliki nilai yang sama.";
// Glossiness is simply the opposite of roughness
material.refraction.surface = "Permukaan";
// Synonym: turbidity
material.refraction.interior = "Bagian Dalam";
// Set the roughness of the object with a value of 0
material.paintGlossy = "Mengecat berkilau";
material.paintGlossy.help = "Ini akan mewarnai objek dengan kekasaran dan metalik menjadi 0, sehingga memungkinkan refraksi tajam.

Ini sama seperti masuk ke menu pengecatan dan menggunakan fitur cat semua dengan warna dinonaktifkan.";
// Simulate the light being absorbed when it travels through the volume.
material.absorptionEnable = "Penyerapan";
material.absorptionEnable.help = "Simulasikan cahaya diserap ketika itu bergerak melalui volume.

Bagian tipis akan lebih terang saat memungkinkan lebih banyak cahaya lewat, sementara area yang tebal akan lebih gelap.

Efek ini sangat bergantung pada bentuk objek, hanya perkiraan ketebalan objek yang digunakan.";
material.absorptionFactor = "Faktor";
// Depth means how far the light can travel under the surface
material.subsurfaceDepth = "Kedalaman";
// Enable translucency (same as subsurface but only affect lights that enter a solid and escape from the other side)
material.translucency = "Translusensi";
material.translucency.help = "Anda perlu memiliki cahaya yang memancarkan bayangan untuk melihat translusensi.";
// Opacity factor, the opposite of transparency (synonym: Alpha)
material.opacity = "Opasitas";
// Fully opaque material
material.type.opaque = "Opak";
material.type.opaque.help = "Ini adalah jenis materi default.

Alpha vertex yang dicat, tekstur opacitas atau saluran alpha dari saluran warna akan tetap diperhitungkan melalui dithering.

Hanya slider opacitas utama yang akan diabaikan.";
// Fully opaque material
material.type.shadowCatcher = "Penangkap bayangan";
material.type.shadowCatcher.help = "Buat objek sepenuhnya transparan, kecuali bayangan yang diciptakan oleh cahaya.

Mode ini biasanya digunakan pada geometri bidang.";
material.type.shadowCatcher.warning = "Tidak ada lampu dengan bayangan di dalam skenamu, Shadow Caster akan tidak aktif.

Sebaliknya, jika shadow catcher sepenuhnya metalik, Shadow Catcher dapat memantulkan adegan jika Post Process SSR (Refleksi) diaktifkan.";
// See glossary
material.type.subsurface = "Subpermukaan";
material.type.subsurface.help = "Untuk mendapatkan hasil terbaik, Anda dapat beralih ke mode bayangan PBR dan menggunakan setidaknya satu cahaya arah, idealnya dengan lingkungan redup.";
// Transparency mode, alpha blendingd
material.type.blending = "Pencampuran";
material.type.blending.help = "Buat objek setengah transparan dengan mengatur nilai opasitas.

Perhatikan bahwa karena batasan waktu nyata, Anda dapat memiliki artifak visual yang terlihat jika objek Anda memiliki bentuk yang kompleks.";
// Transparency mode
material.type.additive = "Tambah";
material.type.additive.help = "Buat objek setengah transparan dengan mengatur nilai opasitas.

Metode ini cenderung memiliki lebih sedikit artifak dibandingkan metode pencampuran, tetapi objek akan lebih cerah.";
// Transparency mode based on dithering
// https://en.wikipedia.org/wiki/Dither
material.type.dithering = "Dithering";
material.type.dithering.help = "Buat objek setengah transparan dengan cara membuang beberapa piksel secara acak.";
// Simulate glass-like material
material.type.refraction = "Pembiasan";
material.type.refraction.help = "Mode ini dapat digunakan untuk mensimulasikan bahan kaca.

Karena batasan waktu nyata, pembiasan sendiri atau pembiasan berlapis terbatas.";
material.castShadows = "Pantulkan bayangan";
material.receiveShadows = "Terima bayangan";
// Lights are ignored, the object will be displayed with color only
material.alwaysUnlit = "Selalu tidak berlampu";
// Inverse the side of the object triangles
// https://en.wikipedia.org/wiki/Back-face_culling
material.flipCulling = "Pembalikan pemangkasan";
// How much light a surface will reflect (synonym: specular)
material.reflectance = "Reflektansi";
material.reflectance.help = "Kendalikan jumlah pantulan yang diterima material untuk bahan non-logam.

Sebagian besar waktu, nilai default harus digunakan (yang sesuai dengan 4% cahaya yang dipantulkan standar pada sudut normal).";
// Material preview in the viewport
material.preview = "Pratinjau tampilan material";
material.preview.help = "Saat Anda memodifikasi material, pratinjau akan ditampilkan di viewport pada objek yang dipilih.

Pratinjau ditampilkan saat Anda berinteraksi dengan penggeser warna, kehalusan, kilauan logam, opasitas, dan intensitas.";
// Menu name
menu.files = "File";
// Menu name
menu.scene = "Pemandangan";
// Menu name
menu.multires = "Multiresolusi";
// Menu name
menu.voxel = "Voxel";
// Menu name
menu.dynamic = "DynTopo";
// Menu name (Synonym: Misc, Other)
menu.topology = "Lainnya";
// Menu name
menu.primitive = "Primitif";
// Menu name
menu.render = "Render";
// Menu name
menu.material = "Material";
// Menu name
menu.postprocess = "PascaProses";
// Menu name
menu.camera = "Kamera";
// Menu name
menu.background = "Latar Belakang";
// Menu name
menu.tool = "Alat";
// Menu name
menu.stroke = "Garis";
// Menu name
menu.alpha = "Alpha";
// Menu name
menu.filter = "Filter";
// Menu name
menu.falloff = "Penurunan";
// Menu name
menu.paint = "Lukis";
// Menu name
menu.symmetry = "Simetri";
// Menu name
menu.operation = "Operasi";
// Menu name (pencil pressure)
menu.pressure = "Tekanan";
// Menu name
menu.gesture = "Gestur";
// Menu name
menu.layers = "Lapisan";
// Menu name
menu.settings = "Pengaturan";
// Menu name
menu.interface = "Antarmuka";
// Menu name
menu.bindings = "Pengikatan";
// Menu name
menu.history = "Sejarah";
// Menu name
menu.historySettings = "Pengaturan";
// Menu name
menu.about = "Tentang";
// Menu name
menu.debug = "Debug";

// Operation on the object (action)
mesh.holes = "Lubang";
// If the object has holes, the algorithm will close them
mesh.holes.close = "Tutup lubang";
// Says how dense (number of triangles) the algorithm will use in order to fill holes
mesh.holes.detail = "Rincian";
// If the mesh has disconnected parts, it will be split/separated into objects
mesh.separate = "Pisahkan";
// When converting the object to a triplanar primitive, some object features will be lost
mesh.triplanar.warning = "Layer, lukisan dan multi-resolusi akan hilang.";
// Resolution of the triplanar grid
mesh.triplanar.resolution = "Resolusi";
// Make the triplanar a regular cube (all 3 dimension equal)
mesh.triplanar.cubic = "Paksa kubik";
// Covnert an object to a triplanar primitive
mesh.triplanar.convert = "Konversi";
// Static object means "static topology"
mesh.static = "Mesh";
// See glossary
mesh.multires = "Multires";
// Dynamic topology
mesh.dynamic = "DynTopo";

// Disable this option to have per-tool material settings (instead of shared settings)
paint.useGlobal = "Material global";
paint.useGlobal.help = "Jika opsi ini diaktifkan, material yang dipilih akan sama dengan tools lainnya.

Catatan bahwa ini hanya mempertimbangkan pengaturan kekasaran, kekuatan logam dan warna.";
// The current tool will paint the object if this option is enabled
paint.usePainting = "Lukisan garis";
// If true save the textures data into
paint.preset.embed = "Sematkan tekstur";
paint.preset.embed.help = "Tekstur dapat ditemukan dalam folder Nomad textures/.
Presets material dapat ditemukan dalam folder Nomad materials/.

Ketika opsi ini dimatikan, preset material hanya mengacu pada tekstur dalam folder textures/.

Anda bisa mengaktifkan opsi ini untuk membuat salinan tekstur dalam preset material.
Ini bisa berguna jika Anda ingin berbagi preset dengan tekstur tanpa menyediakan tekstur terkait.";
paint.preset.embed.apply = "Terapkan ke semua bahan";
// Factor/Opacity of paint tool
paint.intensity = "Intensitas lukisan";
// Apply the paint on the object
paint.paintAll = "Lukis semua";
paint.paintAll.help = "Terapkan material saat ini ke objek.";
paint.paintAll.help.mask = "Area yang diberi mask tidak akan terpengaruh.";
paint.paintAll.help.hide = "Area tersembunyi tidak akan terpengaruh.";
paint.paintAll.help.opacity = "Gunakan faktor pengecatan alat di atas.";
paint.paintAll.help.layer = "Area yang tidak dicat pada layer tidak akan terpengaruh.";
paint.strokePainting.title = "Melukis";
// Brush stroke texture
paint.texture.warningEnable = "Lukisan garis perlu diaktifkan untuk mengizinkan proyeksi tekstur (kotak centang di atas)!";
paint.texture.warningIgnored = "Alat saat ini tidak dapat menggunakan tekstur!";
// use stencil mode
paint.stencil = "Stensil";
// Inherit stroke falloff option for the painting
paint.tool.help = "Gunakan alat alpha, falloff, dan pengacak untuk memodulasi intensitas goresan lukisan.

Pilihan ini diabaikan untuk fitur semua lukisan, tetapi alpha diperhitungkan untuk varian triplanar.";
// when the user choose a new item name (through iOS/Android virtual keyboard)
input.name = "Nama baru";
// when the user choose a new number value (through iOS/Android virtual keyboard)
input.number = "Nilai baru";
// when the user choose a new color (through iOS/Android virtual keyboard)
input.hexcolor = "Warna baru (format hex)";

// Post process effect
postprocess = "Pemrosesan pasca";
// Denoise
postprocess.denoise = "Peredam bising";
postprocess.denoise.help = "Terapkan pengurangan bising setelah semua bingkai terkumpul.";
postprocess.denoise.warning = "Ini adalah operasi mahal, aktifkan efek ini hanya jika gambar berisik.";
// Quality vs performance
postprocess.quality = "Kualitas";
postprocess.quality.help = "Aktifkan opsi-opsi ini untuk meningkatkan kualitas dengan mengorbankan kinerja.";
// More samples means better quality but slower performance
postprocess.maxSamples = "Sampel maksimum";
// Full resolution (1:1 resolution) instead of half resolution
postprocess.fullResolution = "Resolusi penuh";
// Number of frames that we accumulate (higher value means better quality)
postprocess.accumulateCount = "Pengambilan sampel bingkai maksimum";
postprocess.accumulateCount.help = "Jumlah maksimum frame yang diakumulasikan sebelum render berhenti.

Saat rendering berhenti, Nomad tidak akan melakukan apapun, sehingga menghemat baterai.

Banyak fitur rendering diuntungkan dari pengumpulan frame, terutama:
• Bayangan Lembut
• Iluminasi Global
• Refleksi (SSR)
• Ambang Occlusion
• Subpermukaan
• Kedalaman Bidang Pandang

Jumlah frame tinggi paling dibutuhkan untuk Bayangan Lembut dan Iluminasi Global.
Nomad dapat menghentikan rendering lebih cepat jika fitur-fitur di atas dinonaktifkan.";
// The value is a ratio (0.5 means half resolution 2 means twice the resolution)
postprocess.renderRatio = "Resolusi render";
postprocess.renderRatio.warning = "Digantikan oleh efek Pixel Art.";
postprocess.renderRatio.help = "Opsi ini sangat mempengaruhi kinerja.
Dianjurkan untuk mempertahankan nilai di bawah x1.25.

Opsi ini tidak disimpan dalam pengaturan.";
// Temporal Anti-Aliasing (no need to translate "TAA")
postprocess.taa = "Anti-aliasing (TAA)";
postprocess.taa.help = "Mengurangi kedipan saat Anda menggerakkan Kamera.";
// Ditherhing pixel
postprocess.dithering = "Pelicinan";
postprocess.dithering.help = "Pelicinan piksel untuk mengurangi artefak pita.";
// Screen-Space Reflection (no need to translate "SSR")
postprocess.ssr = "Refleksi (SSR)";
postprocess.ssr.warning = "SSR memerlukan mode pencahayaan PBR.";
// Screen-Space Global Illumination (no need to translate "SSGI")
postprocess.ssgi = "Pencahayaan Global (SSGI)";
// Thickness threshold for ssgi tracing algorithm (synonym: threshold, bias)
postprocess.ssgi.tolerance = "Toleransi";
postprocess.ssgi.warning = "SSGI memerlukan mode pencahayaan PBR.";
// Screen-space ambient occlusion (SSAO)
// https://en.wikipedia.org/wiki/Ambient_occlusion
postprocess.ssao = "Penghalang Ambient";
// How far the effect spreads
postprocess.ssao.radius = "Ukuran";
// How strong the effect is
postprocess.ssao.factor = "Kekuatan";
// Adjustment to fix artefacts
postprocess.ssao.bias = "Bias kurva";
postprocess.ssao.bias.help = "Seberapa sensitif efek tergantung pada kelengkungan permukaan.";
// Depth of Field (bokeh)
// https://en.wikipedia.org/wiki/Depth_of_field
postprocess.dof = "Kedalaman Resmi";
// The blur factor behind the focused point
postprocess.dof.blurFar = "Pengaburan jauh";
// The blur factor in front of the focused point
postprocess.dof.blurNear = "Pengaburan dekat";
postprocess.dof.focusTip = "Ketuk objek untuk mengubah titik fokus.";
// Bloom (light bleeding)
// https://en.wikipedia.org/wiki/Bloom_(shader_effect)
postprocess.bloom = "Kembang";
// Intensity of the effect
postprocess.bloom.intensity = "Intensitas";
// How far the effect spreads
postprocess.bloom.radius = "Jari-jari";
postprocess.bloom.radius.help = "Seberapa luasnya efek kembang.";
// Luminosity threshold (below this value, no bloom is generated)
postprocess.bloom.threshold = "Ambang Batas";
postprocess.bloom.threshold.help = "Ambang batas luminositas untuk memutuskan apakah suatu piksel akan memancarkan kembang atau tidak.
Jika nilai sama dengan 0, semuanya akan menerima kembang.";
// https://en.wikipedia.org/wiki/Tone_mapping
postprocess.tone = "Pemetaan Nada";
postprocess.tone.exposure = "Eksposur";
postprocess.tone.contrast = "Kontras";
postprocess.tone.saturation = "Kejenuhan";
postprocess.tone.hue = "Hue";
// No tonemapping operator is used
postprocess.tone.mapping.none = "Tidak ada";
// A neutral tonemapping is used
postprocess.tone.mapping.neutral = "Netral";
// Color curves
postprocess.curve = "Pengurutan Warna";
// Curve for pixel luminance
postprocess.curve.luminance = "Utama";
postprocess.curve.red = "Merah";
postprocess.curve.green = "Hijau";
postprocess.curve.blue = "Biru";
// Reset color grading curves
postprocess.curve.resetAll = "Atur Ulang Semua";
// https://en.wikipedia.org/wiki/Chromatic_aberration
postprocess.chromatic = "Aberasi Kromatik";
postprocess.chromatic.factor = "Kekuatan";
// Darking on the edges
postprocess.vignette = "Vinyet";
// How far the effect spreads
postprocess.vignette.size = "Ukuran";
// How sharp the edge of the effect is
postprocess.vignette.hardness = "Kekerasan";
// Unblur the image (sharpening)
// https://en.wikipedia.org/wiki/Unsharp_masking
postprocess.sharpness = "Ketajaman";
postprocess.sharpness.factor = "Kekuatan";
// Filmic Grain
// https://en.wikipedia.org/wiki/Film_grain
postprocess.grain = "Butir";
postprocess.grain.factor = "Kekuatan";
// Accentuate the edges of the model
postprocess.curvature = "Kelengkungan";
// main strength of curvatre
postprocess.curvature.factor = "Faktor";
// Color/Strength of concave curvature
postprocess.curvature.cavity = "Rongga";
// Color/Strength of convex curvature
postprocess.curvature.bump = "Tonjolan";
// https://en.wikipedia.org/wiki/Pixel_art
postprocess.pixelArt = "Seni Piksel";
// Override frame accumulation feature
postprocess.pixelArt.allowAccumulate = "Izinkan pengambilan sampel bingkai";
// Simulate scanline rendering (horizontal line)
postprocess.scanline = "Garis pindai";
postprocess.scanline.factor = "Faktor";
// Spacing between lines
postprocess.scanline.spacing = "Jarak";

// Geometry Primitive (box, sphere, cylinder, etc)
primitive = "Primitif";
primitive.box = "Kotak";
primitive.sphereCube = "Bola Kubus";
primitive.sphereUV = "Bola UV";
primitive.icosahedron = "Ikosahedron";
primitive.cylinder = "Silinder";
primitive.cone = "Kerucut";
primitive.torus = "Donat";
primitive.lathe = "Mesin Bubut";
primitive.tube = "Tabung";
primitive.plane = "Bidang";
primitive.triplanar = "Triplanar";
primitive.needValidate = "Primitif harus divalidasi!";

// If enabled, we can edit primitive inside the viewport
primitive.edit = "Sunting";
primitive.edit.help = "Izinkan pengeditan 3d di dalam jendela pandang.

Anda dapat menonaktifkan fitur ini jika Anda ingin berinteraksi dengan Gizmo atau alat Transformasi tanpa memodifikasi primitif.";

// Primitive configuration
primitive.mainConfig = "Parameter";
// Interface section where we change the topology (number of triangles/polygons)
primitive.topology = "Topologi";
// Interface section where we change the geometry (shape of the primitive)
primitive.geometry = "Geometri";

// Validating the primitive (then it can be sculpted)
primitive.validate = "Validasi";
// Maximum number of faces of the primitives
primitive.maxFaces = "Muka maksimum";
primitive.maxFaces.help = "Jumlah maksimum muka yang dapat dimiliki sebuah primitif.

Batas ini hanya aktif selama primitif belum divalidasi, setelah itu perlindungan tidak ada lagi.";
// Synonym: Flat subdivision
primitive.linear = "Pembagian linier";
// Post as "subdivision that occurs after the primitive computation"
primitive.subdivision = "Pembagian pasca";

// Radius (of a sphere, torus, etc)
primitive.radius = "Radius";
// Make sure the two end-point of a primitive (cylinder, tube, etc) have the same size
primitive.radius.sync = "Radius sama";
primitive.radius.start = "Awal radius";
primitive.radius.end = "Akhir radius";
// Size (of cube x dimension)
primitive.size = "Ukuran";
primitive.sizeX = "Ukuran X";
primitive.sizeY = "Ukuran Y";
primitive.sizeZ = "Ukuran Z";
// Division only impacts the topology (synonym: resolution)
primitive.division = "Pembagian";
primitive.divisionX = "Pembagian X";
primitive.divisionY = "Pembagian Y";
primitive.divisionZ = "Pembagian Z";
// Angle of torus, etc
primitive.angleX = "Sudut X";
primitive.angleY = "Sudut Y";
primitive.angleZ = "Sudut Z";
// It means we try to keep regular sized quad (square) instead of highly distorted rectangule
primitive.constantDensity = "Kepadatan konstan";
// Make sure the shape is perfectly spherical
primitive.projectOnSphere = "Proyek pada bola";
primitive.projectOnSphere.help = "Menyelaraskan titik pada bola yang sempurna.";

// triplanar
primitive.triplanar.title = "Triplanar";
primitive.triplanar.title.help = "Triplanar menggunakan informasi dari 3 bidang untuk mengisi grid voxel yang kemudian dipoligonisasi.

Jika Anda berinteraksi dengan slider pembagian atau ukuran, informasi lukisan akan direset (kehalusan baik-baik saja).

Anda mungkin sebaiknya menonaktifkan simetri karena mungkin tidak berfungsi seperti yang diharapkan.

Anda dapat menggunakan opsi `Topologically connected` di panel mask untuk melukis bidang yang mempengaruhi bidang lainnya.";
// Make sure the box is a regular cube (same 3 dimension)
primitive.triplanar.sameSize = "Ukuran Sama (Kubus)";
primitive.triplanar.polish = "Kelembutan";
// Mask refers to the painted mask on the triplanar planes
primitive.triplanar.resetMask = "Reset masker";
// One side of a cube (the back plane)
primitive.isolate.back = "Belakang";
// One side of a cube (the right plane)
primitive.isolate.right = "Kanan";
// One side of a cube (the bottom plane)
primitive.isolate.bottom = "Bawah";
// Plane
primitive.planeSameSize = "Ukuran sama (persegi)";
// Make the plane a disk/ellipse instead of a rectangle
primitive.planeDisk = "Cakram";
// Box
primitive.boxRegular = "Ukuran sama (kubus)";
// Torus
primitive.torus.radiusOuter = "Radius luar";
primitive.torus.radiusInner = "Radius dalam";
primitive.torus.angle = "Sudut";
primitive.torus.angleOffset = "Offset sudut";
// Cylinder
primitive.cylinder.height = "Tinggi";
// Cone
primitive.cone.radius = "Radius";
primitive.cone.height = "Tinggi";
// Hole sub menu (cylinder, tube, etc)
primitive.hole = "Lubang";
// Make a hole in the primitive to make it hollow
primitive.hasHole = "Ada lubang";
// Curve profile (synonym: profile, curve)
primitive.profile = "Profil";
primitive.profile.viewport = "Tampilkan di viewport";
// If the revolution surface has caps (E.g: cylinder)
primitive.cap = "Tutup";

// Singular of Repeaters (Nodes that make many copies of its children (type of mirror/curve/array/radial))
repeater = "Pengulang";
// All the new items will be inserted inside the bound rather than outside
repeater.array.fitInside = "Pas di dalam";
// The object will follow the curve
repeater.curve.align = "Sejajarkan";

// Import resource (Alpha, Textures, MatCaps, etc)
resource.import = "Impor...";
// iOS Photos gallery
resource.import.ios.photos = "Foto";
// iOS Files App
resource.import.ios.files = "Berkas";

scene.title = "Adegan";
scene.title.help = "Saat menggunakan tombol terlihat/pilih, tahan dan geser jari Anda untuk memilih objek lain dengan mudah.

Anda juga dapat menekan lama tombol terlihat/pilih untuk mempengaruhi anak-anaknya juga.";
// The view will focus on the item when we click on it
scene.focus = "Antarmuka: Fokus pada item saat ketuk dua kali";
// Add new object on gizmo position
scene.addOnGizmo = "Di atas gizmo";
scene.addOnGizmo.help = "Pindahkan node ke posisi gizmo (jika alat gizmo dipilih)";
// Select the gizmo tool after adding a new object
scene.addSelectGizmo = "Pilih gizmo";
scene.addSelectGizmo.help = "Pilih alat gizmo saat menambahkan node baru";
// Icon size in pixel (min/max)
scene.iconSize = "Ukuran ikon";
// Min size of icon
scene.iconSize.min = "Min";
// Max size of icon
scene.iconSize.max = "Maks";
// display hierarchy lines (visibility helper)
scene.showHierarchy = "Garis Hirarki";
scene.showHierarchy.help = "Tampilkan garis antara induk dan anaknya di jendela pandang.";
scene.showHierarchyNomadPivot = "Gunakan pivot Nomad";
scene.showHierarchyNomadPivot.help = "Pivot Nomad adalah pivot yang digunakan oleh alat Transform dan Gizmo.

Jika opsi ini dinonaktifkan, akan menggunakan pivot dasar natural.
Dalam beberapa kasus, pivot dasar ini bisa jauh dari pusat objeknya!";
// The view will focus on the item when we click on it
scene.syncVisible = "Sinkronisasi visibilitas";
scene.syncVisible.help = "Saat diaktifkan, menggunakan ikon visibilitas (mata) akan mempengaruhi semua item yang dipilih.";
// Merge 2 objects without modifying the geometry or the topology
scene.join = "Gabung";
// Group the selected object with a new created Empty Node as a parent
scene.group = "Grup";
// Move the item outside its parent (synonym: ungroup)
scene.unparent = "Lepas dari Induk";
// Mirror node type, a node that make many copies of its children (mirror symmetry)
scene.mirror = "Cermin";
// Curve node type, a node that make many copies of its children (along a curve)
scene.curve = "Kurva";
// Array node type, a node that make many copies of its children (grid repetition pattern)
scene.array = "Array";
// Radial node type, a node that make many copies of its children (radial symmetry)
scene.radial = "Radial";
// Nodes that make many copies of its children (type of mirror/curve/array/radial)
scene.repeaters = "Pengulang";
scene.repeaters.help = "Node pengulang yang membuat instance dari geometri apa pun di bawahnya dalam hirarki scene.";
// Validate button
scene.validateGroup = "Validasi";
// Keep instances in the scene
scene.validateGroup.keepInstances = "Jaga instance";
// If we should join children
scene.validateGroup.joinChildren = "Gabungkan anak-anak";
// Merge/weld 2 objects by recomputing all the topology and creating a new object
scene.mergeVoxel = "Gabung voxel";
scene.voxelResolution = "Resolusi";
// The hidden objects will be "substracted" (the object will carve the other object)
scene.subtractionTip = "Pengurangan: Objek tersembunyi";
// If all the objects are hidden, only the parts where they intersect (collide) will be kep
scene.intersectionTip = "Intersect: Semua objek tersembunyi";

// Need at least to select one object
scene.noneButNeedAtLeastOne = "Tidak ada objek yang dipilih, silakan pilih minimal satu objek.";
// Need to select one object only
scene.noneButNeedOne = "Tidak ada objek yang dipilih, silakan pilih satu objek.";
// Need to select one object only
scene.onlyOneObject = "Beberapa objek dipilih, silakan pilih hanya satu objek.";
// Boolean operation
scene.boolean = "Boolean";
scene.boolean.help = "Gabungkan, kurangi, atau silangkan objek dengan melakukan operasi boolean.

Operasi dapat gagal jika beberapa objek tidak merupakan manifold atau tidak kedap air.

Jika boolean gagal, Anda selalu dapat menggunakan remesher voxel pada objek yang bermasalah untuk memastikan itu merupakan manifold yang kedap air.";
// Weld intersection
scene.boolean.mergeIntersection = "Las potongan";

// General scene display settings
settings.display.title = "Pengaturan tampilan";
// Wireframe (show triangles and quad edges)
settings.wireframe = "Kerangka kawat";
// Display the material texture
settings.debugChannel = "Tampilkan Tekstur";
// Display the material texture in the background
settings.debugChannel.onBackground = "Dalam Latar belakang";
// Display the material texture on the mesh
settings.debugChannel.onMesh = "Pada Mesh";
// If the object is opened (a simple plane for example), two sided means we'll be able to see if from the two sides of the planes
settings.twoSided = "Dua sisi";
settings.twoSided.help = "Bidang akan terlihat dari kedua sisi.";
// If we colorize the inverted side of faces
settings.backface.color = "Warna bagian belakang";
// Color of the inverted side of faces
settings.backface.colored = "Bagian belakang berwarna";
// Outline (contour highlight around the selected object)
settings.outline = "Garis tepi";
// Outline (contour highlight around the selected object)
settings.outline.help = "Objek yang dipilih akan diberikan garis tepi.";
settings.outline.thickness = "Ketebalan";
// Navigation cube (easy to snap/align the view)
settings.snapCube = "Snap kubus";
// Move the navigation cube to the bottom of the screen
settings.snapCube.bottom = "Bawah";
// Move the navigation cube on the left side of the screen
settings.snapCube.left = "Kiri";
// Flip the camera (rotate 180° to see the other side)
settings.snapCube.flip = "Balik 180°";
settings.snapCube.flip.help = "Balikkan tampilan jika tampilan sudah diselaraskan.";
// Alignment (can be auto/on/off)
settings.snapCube.align = "Batasi penyelarasan";
settings.snapCube.align.help = "Sejajarkan tampilan dengan sumbu dunia. Jika diaktifkan, hanya 6 tampilan penyelarasan yang mungkin.

Di Auto, pembatasan akan terjadi jika kamera dalam mode Orbit.";
// Stats (information logs about the scene displayed on screen)
settings.stats = "Statistik";
settings.stats.right = "Kanan";
settings.stats.all = "Tampilkan seluruh adegan";
// Grid
settings.grid = "Kisi";
// Cursor
settings.cursor.title = "Kursor";
settings.cursor.whileSculpting = "Tampilkan lingkaran saat memahat";
// A small indicator dot
settings.cursor.showDot = "Tampilkan titik kecil";
settings.cursor.showDot.help = "Titik dapat muncul sebagai titik pivot kamera atau saat Anda memahat.";
settings.cursor.showRope = "Tampilkan penstabil tali";
// indicator
settings.indicator.title = "Indikator";
settings.indicator.title.help = "Tampilkan indikator visual (tutorial, tangkapan layar, dll).";
settings.indicator.size = "Ukuran";
// Highlight (the object glows when we select it)
settings.highlight.selection = "Sorot pilihan";
// Highlight settings
settings.highlight = "Sorot";
settings.highlight.duration = "Durasi";
// Mesh that are not selected will be dark
settings.darkenUnselected = "Kurangi kegelapan objek yang tidak dipilih";
// https://en.wikipedia.org/wiki/Shading
settings.smoothShading = "Bayangan halus";
// Experimental feature
settings.partialDraw = "Gambar sebagian";
settings.partialDraw.help = "Fitur eksperimental!

Gunakan jika Anda sedang memahat bagian yang relatif kecil dari mesh ber-poli tinggi.

Ini harus membuat pemahatan lebih halus, tetapi Anda tidak boleh mengaktifkan kerangka!

Ini juga dapat menambahkan artefak visual selama sapuan kuas";
settings.partialDraw.warning = "Jangan lupa untuk mematikan opsi ini jika artefak visual terlalu mengganggu!";
// Disable this option to force a white uniform paint instead of showing the objects painting
settings.showPainting = "Tampilkan lukisan";
// Show and use the masking on the mesh
settings.showMasking = "Tampilkan topeng";
// Disable this option to force show the hidden faces
settings.showDiscard = "Gunakan Sembunyikan";
// Show icon on the canvas
settings.icon = "Ikon";
// Show icons on the canvas
settings.icons = "Ikon";
// Tooltip
settings.icons.help = "Tampilkan ikon di kanvas agar Anda dapat memilih dan mengeditnya secara langsung.";
// Hole filling settings
settings.hole = "Pengisian lubang";
// Allow the hole filling algorithm to handle non-manifold (non regular topology)
settings.hole.nonManifold = "Isi non-manifold";
settings.hole.nonManifold.help = "Mencoba untuk mengisi lubang non manifold.
Opsi ini tidak disimpan dalam pengaturan.";
// Maximum number of vertices (points)
settings.multires.maxVertices = "Jumlah maksimal titik puncak";
settings.multires.maxVertices.help = "Nomad tidak melakukan pemeriksaan memori sebelum subdivisi, jumlah poligon yang tinggi dapat dengan mudah menyebabkan gangguan.";
settings.multires.lowResVertices = "Ambang resolusi rendah";
settings.multires.lowResVertices.help = "Resolusi yang lebih rendah dari mesh dapat ditampilkan saat Anda menggerakkan kamera.

Anda dapat meningkatkan nilai ini jika ingin menampilkan resolusi mesh yang lebih tinggi.";

// The main rendering mode
shading = "Pencahayaan";
// Main rendering mode (PBR stands for Physically Based Rendering)
shading.pbr = "Terang (PBR)";
shading.pbr.help = "Dalam mode ini, Anda dapat menambahkan cahaya (dengan bayangan), serta lingkungan HDR.

Anda juga dapat mewarnai metalness dan roughness, sehingga memungkinkan kontrol yang lebih baik untuk tampilan material Anda.";
// Fast rendering mode for sculpting purpose
shading.matcap = "MatCap";
shading.matcap.help = "Singkatan dari MATerial CAPture, MatCap menangani informasi cahaya dan material dalam satu gambar.

Ini adalah mode rendering cepat, cocok untuk pemahatan kasar.";
// Unlit rendering mode, it simply displays a solid/flat color
shading.unlit = "Tanpa pencahayaan";
shading.unlit.help = "Mode shading warna solid, tanpa pencahayaan.";
// Helper rendering mode that display solid colors
shading.object = "ID Objek";
shading.object.help = "Mode rendering tanpa cahaya di mana setiap objek diberi warna acak.

Ini sangat berguna ketika Anda memiliki banyak objek dalam scene.";
// Helper rendering mode that display solid colors
shading.instance = "ID Instansi";
shading.instance.help = "Sama seperti ID Objek, tetapi instansi akan memiliki warna yang sama.";
// Helper rendering mode that display solid colors
shading.material = "ID Material";
shading.material.help = "Tampilkan warna solid untuk setiap instance material.";
// Randomize colors
shading.id.randomize = "Acak id";
shading.textures = "Gunakan tekstur";
shading.textures.help = "Saat ini, Anda tidak dapat membuat atau mengedit tekstur di dalam Nomad.

Namun, jika Anda mengimpor file yang berisi tekstur, seharusnya ini akan berfungsi.

• Tekstur yang didukung
Opasitas: Lit, MatCap, Unlit
Normal: Lit, MatCap
Warna: Lit, Unlit
Emisif: Lit
Kasar: Lit
Komposisi logam: Lit";
// Lights
shading.lights = "Cahaya";
shading.lights.addLight = "Tambah cahaya";
shading.lights.warning = "Cahaya membutuhkan mode shading PBR.";
// Environment based lighting (synonym: HDRI)
shading.environment = "Lingkungan";
shading.environment.import = "Impor HDR";
shading.environment.exposure = "Pencahayaan";
shading.environment.backgroundBlur = "Blur (latar belakang)";
shading.environment.rotation = "Rotasi";
shading.environment.rotation.help = "Anda dapat memutar lingkungan dengan mendrag 3 jari secara horizontal pada view.";
// The environment will always be aligned with the camera (so that the lighting is consistent)
shading.environment.attachedToCamera = "Tautkan ke kamera";
shading.environment.attachedToCamera.help = "Sambungkan lingkungan ke kamera.

Ini akan memaksa pencahayaan tetap konsisten, yang dapat berguna untuk tujuan pemahatan.";
shading.matcap.rotation = "Rotasi";
shading.matcap.rotation.help = "Anda dapat memutar MatCap dengan menarik 3 jari secara horizontal di viewport.";
shading.matcap.global = "Gunakan MatCap global";
shading.matcap.global.help = "Hapus centang pada opsi ini untuk menggunakan MatCap yang berbeda untuk mesh ini.";

// bottom shortcut buttons (should be SHORT)
shortcut.maskVisible = "Mask";
shortcut.solo = "Solo";
shortcut.xray = "X-Ray";
shortcut.voxelRemesh = "Voxel";
shortcut.wireframe = "Kawat";
shortcut.cameraReset = "Atur Ulang";
shortcut.cameraSnap = "Sejajar";
shortcut.lockSelection = "Kunci";
shortcut.lockSelection.help = "Ketika diaktifkan, Anda tidak dapat mengubah pilihan dengan mengetuk pada mesh.";
shortcut.grid = "Grid";

// Memory taken by the scene
stat.ramScene = "Scene";
// Vram = Video RAM (Video Memory, the memory of the graphic card)
stat.vramScene = "Vram Scene";
// Vram = Video RAM (Video Memory, the memory of the graphic card)
stat.vramRender = "Vram Render";
// Vram = Video RAM (Video Memory, the memory of the graphic card)
stat.vramTextures = "Vram Textures";
// Memory taken by the undo/redo history
stat.ramHistory = "Riwayat";
// Memory taken by other stuffs
stat.ramOther = "Lainnya";
// Memory used by the app (RAM, not storage!)
stat.usedMemory = "Memori yang Digunakan";
// Memory available for the app (RAM, not storage!)
stat.freeMemory = "Memori Bebas";
// RAM, not storage!
stat.ram = "RAM";
stat.used = "Digunakan: $0";
stat.free = "Bebas: $0";
stat.faces = "Bidang";
stat.triangles = "Segitiga";
stat.vertices = "Titik";
// quadrangular polygon (polygon with 4 sides)
stat.quads = "Empat Sisi";
stat.vertex = "Verteks";
stat.scene.face = "Wajah scene";
stat.scene.vertex = "Vertices scene";

// Brush stroke
stroke = "Goresan";
// The brush radius is either screen-space (fixed size on the screen) or world-space (fixed size in the scene)
stroke.useWorldRadius = "Radius ruang dunia";
// The settings is shared among every tools
stroke.useWorldRadius.help = "Ini dibagikan di antara semua alat.";
// Share the radius value among every tools.
stroke.useShareRadius = "Bagikan radius";
stroke.useShareRadius.help = "Bagikan nilai radius di antara semua alat.";
// When doing a brush stroke, the spacing is the distance between 2 sculpt operations
stroke.spacing = "Jarak antar stroke";
// Adjust the brush intensity to ensure consistent deformation depending on the stroke spacing.
stroke.spacing.adjust = "Sesuaikan intensitas jarak";
stroke.minSpacingAdjustIntensity.help = "Sesuaikan intensitas kuas untuk memastikan deformasi konsisten tergantung pada jarak stroke.";
stroke.minSpacing.help = "Jarak antar setiap stroke, relatif terhadap radius alat.

Nilai yang lebih rendah memungkinkan stroke lebih halus tetapi kinerja akan menurun.";
// Brush stroke smoothing
stroke.lazySmooth = "Penghalusan stroke";
stroke.lazySmooth.help = "Rata-rata posisi beberapa penunjuk untuk mendapatkan stroke yang lebih halus.

Dengan nilai tinggi, stroke akan tertunda dibandingkan dengan penunjuk tetapi akhirnya akan menyusul.";
// Make the brush stroke lags behind the pointer cursor
stroke.lazyRadius = "Stabilisator tali malas";
stroke.lazyRadius.help = "Stroke akan tertinggal di belakang posisi penunjuk menurut jarak tertentu.

Ini dapat digunakan untuk menggambar garis yang halus.";
// It is not a per-tool settings
stroke.globalSettings = "Ini adalah pengaturan global";
// Start the brush stroke from the last sculpted position to ensure there is no discontinuity
stroke.snapRadius = "Jari-jari snap";
stroke.snapRadius.help = "'Snap' stroke jika penanda berada dekat dengan stroke yang terakhir direkam.

Ini bisa berguna ketika menggambar garis panjang yang terus menerus, sambil sering berhenti.";
// offset between the cursor and the brush stroke (for fat finger on small screen)
stroke.sculptOffset = "Offset stroke";
stroke.sculptOffset.help = "Terapkan offset konstan pada stroke.

Opsi ini ada untuk membantu saat menggunakan jari pada layar kecil, sehingga jari Anda tidak menutupi stroke.";
stroke.accumulate = "Akumulasi stroke";
stroke.accumulate.help = "Jika opsi ini diaktifkan, tidak ada batasan seberapa banyak materi yang bisa Anda tambahkan/hapus per stroke.";
// The tool can use DynTopo
stroke.useDynamic = "Izinkan topologi dinamis";
// Only sculpt the part that are linked topologically
stroke.connect = "Topologi terhubung";
stroke.connect.help = "Opsi ini hanya akan memahat vertex yang terhubung ke permukaan yang dipilih.

Ini biasanya digunakan untuk alat Move, contohnya jika Anda ingin memindahkan khusus bagian yang melakukan perpotongan sendiri dengan bagian lain.";
stroke.connect.short = "Terhubung";
// sculpt on hide or mask
stroke.protect = "Lindungi area";
stroke.protect.hide.help = "Ketika diatur ke otomatis, wajah tersembunyi akan diedit jika wireframe pada wajah tersembunyi terlihat (lihat menu wireframe).";
// Only sculpt the vertex that points toward the camera
stroke.culling = "Hanya verteks menghadap depan";
stroke.culling.help = "Opsi ini akan mengabaikan verteks yang menghadap belakang.

Ini bisa berguna jika Anda ingin mewarnai bagian dari geometri tipis tanpa mempengaruhi sisi lain.

Ini juga berfungsi untuk pemahatan tetapi Anda mungkin menemui beberapa artefak.";
// Infinite depth, move everything under the circle, disregarding depth
stroke.silhouette = "Siluet";
stroke.silhouette.view = "Tampilan";
stroke.silhouette.snapped = "Jika terjepit";
stroke.silhouette.closest = "Terdekat";
// Only sculpt the vertex that points toward the direction of the deformation
stroke.sameSide = "Hanya verteks sisi yang sama";
stroke.sameSide.help = "Abaikan verteks yang menunjuk ke arah yang berlawanan arah dengan deformasi.";
// determine normal direction
stroke.normal.direction = "";
stroke.normal.direction.help = "";
stroke.normal.direction.normal = "";
stroke.normal.direction.normal.help = "";
stroke.normal.direction.screen = "";
stroke.normal.direction.screen.help = "";
stroke.normal.direction.auto = "";
stroke.normal.direction.auto.help = "";
stroke.normal.direction.auto.threshold = "";
stroke.normal.direction.auto.threshold.help = "";
// small tip/warning
stroke.onlyLasso = "Pengaturan hanya aktif untuk alat lasso.";

// Here sampling refers to the app gathering information under the mouse
stroke.area = "Pengambilan sampel area";
stroke.area.help = "Beberapa kuas atau opsi stroke membutuhkan bidang normal ke permukaan agar berfungsi.
Anda dapat mengontrol bagaimana cara menghitung bidang rata-rata ini dengan mengatur area sampel sebagai perbandingan radius alat.

Pada 100%, setiap titik dalam lingkaran pemilihan diperhitungkan.
Pada 0%, hanya verteks atau segitiga terdekat yang diperhitungkan.";
// Sampling radius size (percent)
stroke.area.normal.radius = "Radius normal";
// Sampling radius size (percent)
stroke.area.point.radius = "Radius posisi";
// Sampling averaging
stroke.area.normal.average = "Rata-rata normal";
// Sampling averaging
stroke.area.point.average = "Rata-rata posisi";
// Keep sharp edges
stroke.normalFilter = "Filter normal";
stroke.normalFilter.help = "Kecualikan titik yang normalnya terlalu berbeda dari normal permukaan.

Ini akan mengubah cara area bidang dihitung (Pengambilan sampel area).

Opsi ini dapat berguna untuk alat berbasis perataan, atau jika Anda ingin mewarnai permukaan planar tanpa tumpahan.";

// Only paint the part of the mesh above a certain height
stroke.depthFilter = "Pemasangan kedalaman";
stroke.depthFilter.help = "Tidak termasuk titik yang berada di atas atau di bawah jarak tertentu dari bidang yang dihitung (pengambilan sampel area).

Sebagai contoh, ini dapat digunakan untuk melukis tonjolan atau lekukan.";
stroke.depthFilter.max = "Area atas";
stroke.depthFilter.min = "Area bawah";
stroke.depthFilter.offset = "Penggeseran tinggi";

// Invert the pixel (black <-> white)
stroke.alpha.invert = "Balik piksel";
// Repeat the alpha image (pattern)
stroke.alpha.wrap = "Jubin";
// No repeat pattern
stroke.alpha.wrap.none = "Tidak ada";
// Repeat the alpha in a regular manner (tiles with seams)
stroke.alpha.wrap.repeat = "Ulangi";
// Repeat the alpha in a mirrored (seamless tiling)
stroke.alpha.wrap.mirror = "Cermin";
// Tight fit when using tiling
stroke.alpha.fit = "Pas ketat (gambar non-persegi)";
stroke.alpha.fit.help = "Opsi ini hanya relevan jika tekstur alpha dan kuas tidak persegi.

Saat diaktifkan, setiap gambar akan dipetakan secara independen tanpa jarak.
Anda dapat menonaktifkan opsi ini jika ingin menjaga alpha dan gambar lainnya tetap sinkron, jika rasio mereka tidak sama.";
// Alpha rotation
stroke.alpha.rotation = "Rotasi";
stroke.alpha.rotation.lock.help = "Kunci orientasi alpha.

Jika rotasi tidak terkunci, orientasi akan mengikuti arah sapuan secara real-time.";
// Repeat the image
stroke.alpha.tiling = "Jubin";
// Scale the image (make it bigger or smaller)
stroke.alpha.scale = "Skala";
stroke.alpha.scale.help = "Pada nilai minimum, kotak alpha berada di dalam jari-jari lingkaran alat.";
// Middle-point value at which no deformation occurs
stroke.alpha.midValue = "Nilai tengah";
stroke.alpha.midValue.help = "Nilai titik tengah di mana tidak terjadi deformasi.

(Nilai tengah = 0)
• Hitam: tidak ada perpindahan
• Putih: perpindahan positif

(Nilai tengah = 0,5)
• Hitam: perpindahan negatif
• Putih: perpindahan positif

(Nilai tengah = 1)
• Hitam: perpindahan negatif
• Putih: tidak ada perpindahan";
// Synonymous: Scatter/Jitter/Randomize
stroke.jitter = "Acak";
// Sculpt and paint along the brush stroke at regular spacing
stroke.type.dot = "Titik";
// Sculpt and paint along with alpha spaced by brush radius
stroke.type.roll = "Gulung";
// Sculpt and paint with alpha projected on screen stencil
stroke.type.tile = "Jubin";
// Sculpt and paint with alpha projected on 3 axis
stroke.type.triplanar = "Triplanar";
// Sculpt continuously
stroke.type.drag = "Seret";
// Lock a region and move it around
stroke.type.grab = "Ambil";
// Lock a point of interest and sculpt it by changing the tool radius
stroke.type.grabRadius = "Kunci + jari-jari";
// Lock a region and sculpt it by changing the tool intensity
stroke.type.grabIntensity = "Kunci + intensitas";

stroke.falloffProject = "Pengaruh";
stroke.falloffProject.help = "• Bola (3d)
Pengaruh dihitung dengan mengambil jarak dari vertex ke pusat kuas.

• Lingkaran (2d)
Vertex pertama diproyeksikan pada bidang area, sebelum mengambil jaraknya ke pusat kuas.
Ini mirip dengan cara alphas disampel.";
stroke.falloffProject.sphere = "Bola";
stroke.falloffProject.circle = "Lingkaran";
stroke.falloffProject.cylinder = "Silinder";

// Symmetry
symmetry = "Simetri";
symmetry.enable = "Diaktifkan";
symmetry.primitiveWarning = "Simetri kuas hanya tersedia untuk primitif yang divalidasi, kecuali Triplanar.";
symmetry.plane.title = "Bidang";
symmetry.toolIgnore = "Alat saat ini mengabaikan simetri.";
// Instead of planar symmetry, use a radial symmetry
symmetry.radial.title = "Radial";
symmetry.radialX = "Radial X";
symmetry.radialY = "Radial Y";
symmetry.radialZ = "Radial Z";
// A warning indicating that we limit the number of repetitions ($0 is a number)
symmetry.limited = "Jumlah pengulangan dibatasi hingga $0!";
// Synonym: Offset
symmetry.offset.title = "Pengimbangan";
symmetry.offsetX = "Pengimbangan X";
symmetry.offsetY = "Pengimbangan Y";
symmetry.offsetZ = "Pengimbangan Z";
// Number of clones
symmetry.count.title = "Jumlah";
symmetry.countX = "Jumlah X";
symmetry.countY = "Jumlah Y";
symmetry.countZ = "Jumlah Z";
// method
symmetry.method = "Metode:";
symmetry.method.help = "• Lokal
Bidang simetri akan bergerak seiring dengan mesh saat Anda menggunakan salah satu alat transform (Gizmo atau Transform).

• Dunia
Bidang simetri tetap dan tidak akan bergerak.";
// Local means: in the coordinate of the scene (synonym: absolute)
symmetry.method.world = "Dunia";
// Local means: in the coordinate of the object (synonym: relative)
symmetry.method.local = "Lokal";
// Move the object to the other side of the symmetry (mirror it as well)
symmetry.flip = "Balik objek";
// Cut half of the mesh
symmetry.cut = "Potong";
// after mirroring, separate into multiple output (synonym: split, separate)
symmetry.split = "Pisah";
// Reapply the mesh mirror, does not impact the topology
symmetry.mirror = "Cerminkan";
symmetry.mirror.help = "Cobalah untuk menerapkan kembali simetri tanpa mempengaruhi topologi.

Simetri radial akan diabaikan.

Jika topologi tidak bisa dipertahankan karena tidak dianggap simetris, anda akan mendapatkan opsi untuk memaksakan pencerminan.";
// indicate that applying the mirror will keep the mesh topology
symmetry.mirror.keepTopology = "jaga topologi";
symmetry.mirrorFail = "Gagal mendeteksi simetri.

Apakah anda ingin memaksakan simetri dengan mencerminkan mesh?";
symmetry.mirrorUseMasking = "Lindungi area yang ditandai";
symmetry.mirrorUseMasking.help = "Jaga area yang ditandai tetap utuh.

Opsi ini akan diabaikan dengan topologi yang tidak simetris (atau permukaan yang terputus, seperti sepasang mata).";
// Reset the symmetry plane position
symmetry.reset = "Atur ulang";
// Reset the symmetry plane positon to the object center
symmetry.reset.centerMesh = "Pusat objek";
// Reset the symmetry plane positon to the scene (world) center
symmetry.reset.centerWorld = "Pusat dunia";
// Reset the symmetry plane orientation
symmetry.reset.direction = "Orientasi";
// Display a line on the object (to show where the symmetry lies)
symmetry.showLine = "Tampilkan garis";
// Display the symmetry plane in 3D
symmetry.showPlane = "Tampilkan bidang";
// Allow the editing of the symmetry plane with the gizmo
symmetry.edit = "Edit Gizmo";
symmetry.edit.warning = "Pengeditan simetri bersifat eksperimental.";
symmetry.edit.help = "Anda bisa dengan bebas menetapkan bidang simetri.

Fitur ini agak eksperimental dan sebaiknya tidak digunakan.";

// Ideally <10 chars
tool.dynamic = "DynTopo";
// Ideally <10 chars (Symmetry)
tool.symmetry = "Sim";
// Ideally <10 chars (Mirror primitive)
tool.mirror = "Cermin";
// Ideally <10 chars
tool.clay = "Tanah Liat";
// Ideally <10 chars (Subtract)
tool.clay.sub = "Kurang";
// Ideally <10 chars
tool.brush = "Kuas";
// Ideally <10 chars
tool.move = "Pindah";
// Ideally <10 chars (Normal vector, perpendicular to surface)
tool.move.normal = "Normal";
// Ideally <10 chars
tool.drag = "Tarik";
// Ideally <10 chars (Smooth the surface by erasing the details)
tool.smooth = "Haluskan";
// Ideally <10 chars (Tries to smooth the topology by making the polygons more regular)
tool.smooth.relax = "Santai";
// Ideally <10 chars (Paint mask)
tool.mask = "Topeng";
// Ideally <10 chars
tool.mask.unmask = "Lepas Topeng";
// Ideally <10 chars (Selector Mask, use lasso/ellipse,etc shape to mask the mesh)
tool.maskSelector = "SelTopeng";
// Ideally <10 chars (Smudge the paint of the object)
tool.smudge = "Bercak";
// Ideally <10 chars (Flatten the surface)
tool.flatten = "Datar";
// Ideally <10 chars (Flatten the surface, more strongly than Flatten)
tool.planar = "Dataran";
// Ideally <10 chars (Flatten the surface by offsetting the surface in the opposite direction)
tool.flatten.fill = "Isi";
// Ideally <10 chars (Layer brush)
tool.layer = "Lapisan";
// Ideally <10 chars
tool.crease = "Kerut";
// Ideally <10 chars (Cut part of the mesh cleanly)
tool.trim = "Pangkas";
// Ideally <10 chars (Cut part of the mesh cleanly into two separate meshes)
tool.split = "Pisah";
// Ideally <10 chars (Project part of the object onto a curve)
tool.project = "Proyek";
// Ideally <10 chars
tool.inflate = "Kembung";
// Ideally <10 chars
tool.pinch = "Cubitan";
// Ideally <10 chars
tool.nudge = "Dorongan";
// Ideally <10 chars
tool.stamp = "Cap";
// Ideally <10 chars (Delete Layer, a tool that can cancel the Layer deformation/paint)
tool.clearLayer = "HapusLapisan";
// Ideally <10 chars (Select multiple objects with a lasso tool)
tool.select = "Pilih";
// Ideally <10 chars (Rotate, Translate and Scale the object)
tool.gizmo = "Gizmo";
// Ideally <10 chars
tool.gizmo.editPivot = "Poros";
// Ideally <10 chars (Snap angle)
tool.gizmo.rotateSnap = "Paskan";
// Ideally <10 chars (Snap translation)
tool.gizmo.moveSnap = "Paskan";
// Ideally <10 chars (Local/Relative space)
tool.gizmo.local = "Lokal";
// Ideally <10 chars (Align/Snap the gizmo to world axis)
tool.gizmo.align = "Sejajarkan";
// Ideally <10 chars (Pin the gizmo, so that it stays in place when switching between objects)
tool.gizmo.pin = "Pin";
// Ideally <10 chars (Rotate, Translate and Scale the object)
tool.transform = "Ubah";
// Ideally <10 chars (Translate the object)
tool.transform.move = "Pindah";
// Ideally <10 chars (Rotate the object)
tool.transform.rotate = "Putar";
// Ideally <10 chars (Scale the object)
tool.transform.scale = "Skala";
// Ideally <10 chars (Snap the object on another object surface)
tool.transform.snap = "Paskan";
// Ideally <10 chars (Measure distance between 2 points)
tool.measure = "Ukuran";
// Ideally <10 chars (Lattice, deformer)
tool.lattice = "Kerangka";
// If an option is shared among the tools
tool.all = "Semua";
// Ideally <10 chars (Quad Remesher)
tool.remesh = "Quad Remesher";
tool.remesh.guides = "Panduan";
tool.remesh.density = "Kepadatan";
tool.remesh.same = "Sama";
tool.remesh.half = "Setengah";
// Ideally <10 chars (FaceGroup)
tool.faceGroup = "Grup Wajah";
tool.faceGroup.autoPick = "Auto-pilih";
tool.faceGroup.flush = "Hapus yang tidak digunakan";
tool.faceGroup.skip = "Lewati grup kecil berdasarkan:";
tool.faceGroup.skipFace = "Jumlah wajah";
tool.faceGroup.skipFace.help = "Jangan membuat grup baru jika jumlah wajah lebih kecil atau sama dengan ambang batas ini.";
tool.faceGroup.skipArea = "Luas permukaan";
tool.faceGroup.skipArea.help = "Jangan buat grup baru jika luas permukaan grup baru lebih kecil dari ambang batas ini.

Ambang batas diberikan sebagai persentase dari total area objek.";
// Ideally <10 chars (Hide)
tool.hide = "Sembunyi";
// Ideally <10 chars (View tool, do nothing in particular)
tool.view = "Tampilan";
// Ideally <10 chars (Revolving surface along a line)
tool.lathe = "Bubut";
// Ideally <10 chars (Revolving surface along a curve)
tool.tube = "Tabung";
// Ideally <10 chars (Insert object into the scene)
tool.insert = "Masukkan";
// Ideally <10 chars (Flip/Invert/Negate the shape)
tool.shape.flip = "Balik";
// Ideally <10 chars (No shape selected, same as Camera mode, does nothing in particular)
tool.shape.view = "Tampilan";
// Ideally <10 chars (Lasso selection)
tool.shape.lasso = "Tali";
// Ideally <10 chars (Curve selection, same as Lasso and it's an open shape)
tool.shape.curve = "Lengkung";
// Ideally <10 chars (Polygon selection, same as Lasso but with more precision)
tool.shape.polygon = "Poligon";
// Ideally <10 chars (Path selection, same as Lasso but with more precision and it's an open shape)
tool.shape.path = "Jalur";
// Ideally <10 chars (Rectangular selection)
tool.shape.rectangle = "Rect";
// Ideally <10 chars (Ellipse selection)
tool.shape.ellipse = "Elips";
// Ideally <10 chars (Line selection, split the screen in half)
tool.shape.line = "Garis";
// Ideally <10 chars (Whether a shape is closed or not, a tube is open, a torus is closed)
tool.shape.closed = "Tutup";

// Radius of the tool (size)
tool.radius = "Jari-jari";
// Intensity of the tool (force)
tool.intensity = "Intensitas";

tool.settings = "Pengaturan";
tool.settings.none = "Alat ini tidak memiliki pengaturan khusus.";

tool.crease.pinchFactor = "Faktor Cubitan";
tool.crease.offsetFactor = "Faktor Ofset";

tool.layer.removeInfluence = "Gunakan Data Lapisan";
tool.layer.removeInfluence.help = "Opsi ini hanya aktif jika ada lapisan yang dipilih.

Akan menggunakan data lapisan untuk membatasi perpindahan pada sapuan.";
tool.layer.noLayerSelected = "Opsi ini hanya tersedia jika ada lapisan yang terpilih";

tool.flatten.planeLockOrigin = "Kunci Asal Bidang";
tool.flatten.planeLockNormal = "Kunci Arah Bidang";

// Option for Tube, Lathe and Insert tool
tool.syncInstance = "Sinkron";
tool.syncInstance.message = "Objek baru akan ditambahkan pada semua instance lainnya!";

// The vertex on the border of the mesh will stay still even if we try to smooth the border
tool.smooth.stickyBorder = "Vertex yang menempel pada batas";
tool.smooth.screen = "Melembutkan layar";
tool.smooth.screen.help = "Gunakan opsi ini untuk mendapatkan penghalusan yang tidak bergantung pada topologi, bahkan pada poligon tinggi.";
tool.smooth.screen.samples = "Sampel layar";
tool.smooth.stable = "Pelembutan stabil";
tool.smooth.stable.help = "Mencoba membuat topologi pelembutan menjadi independen.

Mode ini bekerja paling baik dengan kepadatan topologi yang bervariasi dan dengan nilai intensitas pelembutan yang tinggi.";

tool.paint = "Melukis";
// Erase the painting
tool.paint.erase = "Hapus";
// Only paint the part of the mesh that was already painted in the layer (repainting)
tool.paint.layerFilter = "Penyaringan Layer";
tool.paint.layerFilter.help = "Gunakan opsi ini jika Anda hanya ingin melukis ulang area yang sudah dilukis pada layer.";

// Clear the painted mask
tool.mask.clear = "Bersihkan";
tool.mask.clearAll = "Hapus semua";
// Invert the painted mask
tool.mask.invert = "Balik";
// Mask or Unmask a region (leave other region that unconnected intact)
tool.mask.flipConnected = "Balik masker (terhubung)";
// Blur the painted mask
tool.mask.blur = "Kabur";
// Sharpen the edge of the painted mask area
tool.mask.sharpen = "Mempertajam";
// Transform/Matrix
tool.matrix = "Matriks";
// The target of the transform is either the Matrix or the Vertex of the object
tool.matrix.target = "Sasaran";
// Automatic
tool.matrix.target.auto = "Otomatis";
tool.matrix.target.auto.help = "Secara default, ini akan bekerja mirip dengan opsi Grup.
Jika mesh memiliki masking, atau jika simetri diaktifkan, itu akan bekerja sama seperti Vertex.";
// Auto apply the transform on the vertices
tool.matrix.target.vertex = "Titik";
tool.matrix.target.vertex.help = "Cobalah untuk menerapkan transformasi pada vertex, ini tidak akan bekerja pada primitif yang belum divalidasi.
Instans juga akan terpengaruh.";
// Transform the object alone (the children stands still)
tool.matrix.target.object = "Objek";
tool.matrix.target.object.help = "Pindahkan objek saja, mengabaikan simetri dan masking.
Hanya node yang diedit yang akan bergerak, yang anak akan tetap diam.";
// Transform the object and its children
tool.matrix.target.group = "Grup";
tool.matrix.target.group.help = "Pindahkan node, mengabaikan simetri dan masking.
Sisa dari hierarki juga akan ditransformasi.";
// Operation on the mesh
tool.matrix.action = "Operasi";
tool.matrix.action.origin = "Pindahkan ke asal";
tool.matrix.action.origin.help = "Pindahkan mesh ke asal dunia.";
tool.matrix.action.bake = "Panggang";
tool.matrix.action.bake.help = "Terapkan matriks ke simpul dan atur ulang matriks. Secara visual, tidak ada yang harus berubah.";
tool.matrix.action.reset = "Atur Ulang";
tool.matrix.action.reset.help = "Atur ulang transformasi mesh ke identitas.";

// Synonym: shear, https://en.wikipedia.org/wiki/Shear_matrix or https://en.wikipedia.org/wiki/Shear_mapping
tool.matrix.skew = "Miring";
tool.matrix.translation = "Translasi";
tool.matrix.rotation = "Rotasi";
tool.matrix.scale = "Skala";
tool.matrix.uniformScale = "Skala Uniform";

tool.transform.tip = "Ketuk sekali dengan jari kedua untuk mengganti mode";

// Size of the gizmo
tool.gizmo.size = "Ukuran Gizmo";
// If true, there is less spacing between gizmo handlers (rotate, scale, etc)
tool.gizmo.compact = "Kompak";
// When enabled, tapping one the gizmo widget will open a numerical input popup
tool.gizmo.allowInput = "Masukan numerik";
tool.gizmo.allowInput.help = "Izinkan masukan numerik saat mengetuk salah satu widget gizmo";
// Angle threshold
tool.gizmo.linearRollThreshold = "Ambang gulir tangensial";
tool.gizmo.linearRollThreshold.help = "Ambang sudut untuk memilih metode gulir linear atau sirkular.

Nilai di atas ambang ini akan menggunakan gulir sirkular.

Jika Anda lebih suka gulir linear (arah tangen), cukup atur nilai ini ke 90°.";
// Partially hide/fade the gizmo when we interact with it
tool.gizmo.autoHide = "Sembunyikan saat berinteraksi";
tool.gizmo.tap = "Sekali ketuk";
tool.gizmo.tap.help = "Opsi ini mengontrol cara memindahkan pivot saat mengetuk sekali pada permukaan mesh.";
tool.gizmo.tap.none = "Tidak ada";
tool.gizmo.tap.none.help = "Tidak ada yang terjadi saat mengetuk mesh.";
tool.gizmo.tap.normal = "Normal";
tool.gizmo.tap.normal.help = "Pindahkan gizmo ke persimpangan pertama dan sesuaikan dengan normal permukaan.";
tool.gizmo.tap.first = "Pertama";
tool.gizmo.tap.first.help = "Pindahkan gizmo pada persimpangan pertama.";
tool.gizmo.tap.medial = "Medial";
tool.gizmo.tap.medial.help = "Pindahkan gizmo di tengah dari dua persimpangan pertama.";

// The lathe generator is a vertical line and cannot be rotated
tool.lathe.axisFixed = "Tetap";
tool.lathe.axisOnly = "Hanya Sumbu";
tool.lathe.stable = "Stabil";
tool.lathe.axis = "Sumbu";

// Fill the object's hole
tool.hole = "Pengisian lubang";
tool.hole.fillHoles = "Isi lubang";
// synonym: Alternative method
tool.hole.method.fill = "Isi";
tool.hole.method.legacy = "Warisan";
tool.hole.method.boolean = "Boolean";
tool.hole.bridges = "Layar Boolean";
tool.hole.bridges.help = "Jika opsi ini diaktifkan, Anda dapat membuat lubang di volume.
Kemiringan potongan juga akan lebih mengikuti bentuk potongan.";
tool.hole.threshold = "Ambang batas epsilon";
tool.hole.threshold.help = "Mengatur nilai ini mungkin membantu dengan algoritma pengisian lubang.";
tool.hole.smoothing = "Penghalusan lubang";

tool.smudge.quality = "Kualitas";
tool.smudge.quality.help = "Ini mengubah resolusi piksel proyeksi, nilai yang lebih rendah berarti guratan lebih cepat.";

// Shape for the tools: Trim / Split / Project / SelMask
tool.shape = "Bentuk";
// Auto-validate the drawn shape
tool.shape.autoValidate = "Otomatis validasi";
// Force the rectangle selection to be a square
tool.shape.rectangleSquare = "Persegi";
// The selection rectangle will be centered around the cursor
tool.shape.rectangleCentered = "Tereduksi";
// Force the ellipse selection to be a circle
tool.shape.ellipseCircle = "Lingkaran";
// The selection ellipse will be centered around the cursor
tool.shape.ellipseCentered = "Tereduksi";
// Rotate by step (angle value)
tool.shape.lineRotateStep = "Putar langkah";

// Show a yellow dot on the golden ratio point
tool.measure.goldenRatio = "Rasio emas";
// volume of a mesh
tool.measure.volume = "Volume";
// Surface of a mesh
tool.measure.surface = "Permukaan";

// Always display the camera shortcut buttons on the viewport
tool.view.stickyCamera = "Pintasan kamera (selalu)";

// Topology
topology = "Topologi";
// Synynom: detail value, density
topology.dynamic.detail = "Detail";
// See glossary
topology.multires = "Multiresolution";
topology.multires.help = "Pertahankan beberapa resolusi dari sebuah mesh.

Jika Anda membuat perubahan pada resolusi lebih rendah, detail dari resolusi lebih tinggi akan diproyeksikan ulang ketika Anda beralih kembali.

Layer tersedia di setiap resolusi.";
// Synonym: Unsubdivide, Un-subdivide
topology.multires.reverse = "Balikkan";
topology.multires.reverse.confirm = "Tidak dapat membuat subdivisi dasar.

Topologi saat ini mungkin bukan hasil dari subdivisi.";
topology.multires.subdivide = "Subdivisi";
topology.multires.subdivide.confirm = "Mesh akan memiliki $0M vertex, apakah Anda yakin?";
// Prevents the user from subdivide the object again, a warning is displayed (with a UI link to increase this limit)
topology.multires.subdivide.limit = "Batas subdivisi terlampaui, lihat $0";
topology.multires.deleteLower = "Hapus lebih rendah";
topology.multires.deleteHigher = "Hapus lebih tinggi";
topology.multires.keepTriangles = "Pertahankan segitiga";
topology.multires.lock = "Kunci (LV0)";
// Navigate toward multiple resolutions (go to higher level)
topology.multires.up = "Level Multires →";
// Navigate toward multiple resolutions (go to lower level)
topology.multires.down = "Level Multires ←";
// Synonym: Flat subdivision
topology.multires.linear = "Subdivisi linear";
topology.multires.linear.help = "Cukup subdivisi mesh tanpa menerapkan pelapisan";
// Only show the lowest resolution wireframe
topology.multires.minWireframe = "Hanya level 0";
// Create a new object by recomputing a new topology
topology.remesh = "Ulang Jaring";
// Create a new object by recomputing a new topology, by using voxels (see Glossary)
topology.voxel = "Ulang Jaring Voxel";
topology.voxel.help = "Remesh dengan mencontoh mesh pada sebuah grid.

Jika objek tidak tertutup (kedap air), algoritma pengisian lubang akan diterapkan terlebih dahulu.

Layer diproyeksikan ulang setelah remesh tetapi kualitas akan menurun.";
topology.voxel.resolution = "Resolusi";
topology.voxel.sharp = "Pertahankan tepi tajam";
topology.voxel.sharp.help = "Opsi ini terutama berguna untuk operasi boolean primitif sederhana.

Ini akan memperkenalkan distorsi di beberapa area karena titik yang ditarik pada tepi.";
topology.voxel.subLevel = "Bangun multiresolusi";
topology.voxel.subLevel.help = "Anda dapat membangun kembali hierarki multiresolusi dari hasil output voxel remesher.

Ini juga akan berjalan lebih cepat dan menggunakan sedikit memori, terutama jika nilai detail voxel tinggi.
Namun jika nilai detail voxel rendah dan Anda meminta banyak level multires, Anda akan kehilangan detail.";
// Dynamic topology (DynTopo)
topology.surface.remesh = "Ulang Jaring";
topology.surface.detail = "Detil";
topology.surface.detail.help = "Berbeda dengan remeshing voxel, remeshing permukaan tidak memerlukan mesh ditutup.

Dapat juga mendukung mask sehingga Anda dapat melindungi beberapa bagian dari mesh dari perubahan topologi.

Layer diperbarui dengan benar.";
topology.surface.method = "Metode";
// Uniformisation means we can both add and remove triangles/quads
topology.surface.method.uniformisation = "Uniformisasi";
// We can only add triangles/quads (synonym: Refine)
topology.surface.method.subdivision = "Subdivisi";
// We can only remove triangles/quads (synonym: Simplify)
topology.surface.method.decimation = "Dekimasi";
topology.surface.method.help = "Perilaku topologi dinamis:
• Pembauran: tambahkan dan hapus detail
• Subdivisi: tambahkan detail
• Dekimasi: hapus detail";
topology.surface.useMasking = "Lindungi area yang dimasker";
topology.surface.useMasking.help = "Area yang dimasker akan melindungi topologi dari perubahan.";
topology.surface.extrapolate = "Ekstrapolasi Vertex";
// DynTopo
topology.dynamic = "Topologi dinamis";
topology.dynamic.global = "Global aktif/non-aktif";
topology.dynamic.activate = "Diaktifkan";
topology.dynamic.activate.help = "Dengan topologi dinamis, alat sculpting dapat membagi atau menyederhanakan mesh secara lokal dalam waktu nyata.

Fitur ini dapat berdampak nyata pada kinerja.

Layer diperbarui dengan benar.";
topology.dynamic.method = "Detail berdasarkan...";
topology.dynamic.method.screen = "Layar";
topology.dynamic.method.radius = "Radio";
topology.dynamic.method.constant = "Konstan";
topology.dynamic.method.help = "• Zoom
Tingkat detail didasarkan pada seberapa jauh Anda dari permukaan.

• Radius
Radius alat menentukan jumlah detail.

• Konstan
Detailnya tetap, nilai detail juga dibagikan dengan penggeser voxel.";
topology.dynamic.quality = "Lebih mengutamakan...";
topology.dynamic.quality.help = "Jika Anda memilih Kualitas, 2 perbedaan utama adalah:
• penyempurnaan diterapkan sebelum operator pemahatan, Anda akan mendapatkan artefak interpolasi lebih sedikit saat melukis atau memahat detail yang sangat kecil
• penyempurnaan tidak diterapkan secara bertahap, jika Anda memahat detail yang sangat kecil atau membuat goresan cepat, topologi akan selalu disempurnakan dengan benar";
topology.dynamic.quality.speed = "Kecepatan";
topology.dynamic.quality.quality = "Kualitas";
// Whether the pencil pressure can impact the level of detail
topology.dynamic.usePressure = "Gunakan tekanan pada radius";
topology.dynamic.usePressure.help = "Gunakan opsi ini jika Anda ingin tekanan pena pada radius alat memengaruhi tingkat detail.";
topology.dynamic.useFalloff = "Gunakan penurunan sapuan";
// Decimate
topology.decimate.title = "Dekimasi";
topology.decimate.title.help = "Mengurangi jumlah polygon dengan mencoba mempertahankan sebanyak mungkin detail.

Fitur ini dapat berguna jika Anda ingin mengekspor untuk pencetakan 3D.
Namun, Anda sebaiknya tidak menggunakannya jika ingin terus memodelkannya, karena dapat menghasilkan segitiga yang tidak rata.

Perhatikan bahwa area yang dimasker tidak akan dikecilkan.";
// Synonym: Simplify (Decimate reduce the number of triangles/quads while retaining details as much as possible)
topology.decimate = "Dekimasi";
topology.decimatePaintWeight = "Pelihara lukisan";
topology.decimatePaintWeight.help = "Nilai yang lebih tinggi akan mencoba memelihara lukisan.

Setel nilai ini ke 0 jika Anda tidak peduli dengan lukisan itu.";
topology.decimateUniform = "Wajah Seragam";
topology.decimateUniform.help = "Nilai lebih tinggi akan menghasilkan segitiga dengan ukuran serupa.";
topology.decimatePreserveBorders = "Pertahankan batas";
topology.decimatePreserveBorders.help = "Jangan dekonstruksi batas mesh.";
// Target a certain number of triangles, faces and vertices
topology.target.triangles = "Targetkan segitiga";
topology.target.faces = "Targetkan wajah";
topology.target.quads = "Targetkan kuad";
topology.target.points = "Targetkan titik";
// Quad remesher
topology.qremesh = "Quad Remesh";
topology.qremesh.angle = "Sudut lipatan";
topology.qremesh.border = "Pertahankan batas";
topology.qremesh.onlyQuad = "Hanya kuad";
topology.qremesh.hole = "Maksimal isi lubang";
topology.qremesh.hole.help = "Algoritma kadang dapat menghasilkan lubang yang tidak diinginkan.

Jika suatu lubang memiliki lebih sedikit puncak dari nilai ini, maka akan diisi.";

// Unwrapping means compute UV (texture coordinates), with uvs you can appliy (wrap) a texture onto the model
topology.uv.title = "Buka UV";
// UV Unwrap but as a Verb
topology.uv.unwrap = "Buka";
// The operation can be very slow
topology.uv.atlas.warning = "Dapat sangat lambat, target <100k puncak!";
// Handles are topological holes (synonym: genus, hole)
topology.uv.bff.warning = "Dapat terjadi tumpang tindih jika Mesh memiliki pegangan!";
// Solo patch
topology.uv.bff.seamless = "Patch mulus";
topology.uv.bff.seamless.help = "Opsi ini dapat memperkenalkan distorsi penting.

Biasanya, ini dapat digunakan ketika grup wajah telah diatur dengan cermat.";
// Synonym: Point count? Singularity count ?
topology.uv.bff.cones = "Jumlah kerucut";
topology.uv.bff.help = "Nilai lebih tinggi akan mengurangi distorsi untuk objek yang kompleks.

Nilai lebih tinggi berarti waktu komputasi lebih lama.";
topology.uv.delete = "Hapus UV";

// Transfer the vertex painting in the texture, bake means "create texture (from mesh data)"
topology.bake.title = "Bakar";
// Bake here means "create texture (from mesh data)"
topology.bake.title.help = "Baking tekstur akan membuat tekstur dengan memproyeksikan objek lain yang terlihat di dalam pemandangan.

Berikut adalah alur kerja tipikal untuk baking:
• Anda memiliki mesh dengan detail halus dan lukisan
• Menggandakannya
• Menguranginya (atur `Preserve painting` ke 0!)
• Membuka UV-nya
• Bakinglah!

Anda sekarang harus memiliki mesh beresolusi rendah yang mempertahankan sebagian besar cat dan detail dari objek sebelumnya.

Setelah operasi, warna vertex akan dipindahkan ke layer baru yang dinonaktifkan, sehingga diabaikan alih-alih dikalikan dengan tekstur berwarna.

Untuk memilih objek mana yang digunakan untuk baking, logika berikut ini akan diterapkan:
- semua objek yang dipilih dan objek utama yang dipilih akan dibake (sorotan terkuat di menu scene)
- jika hanya ada satu objek yang dipilih, maka Nomad akan mempertimbangkan semua objek yang terlihat
- jika semua objek disembunyikan (misalnya dengan menggunakan Solo), maka seluruh scene akan dipertimbangkan";
// Bake here means "create texture (from mesh data)"
topology.bake.self = "Dari diri sendiri";
// Bake here means "create texture (from another mesh data)"
topology.bake.other = "Dari resolusi tinggi";
topology.bake.resolution = "Resolusi";
// Cage is a specific term, synonyom: "Bake offset"
topology.bake.offset = "Offset sinar";
topology.bake.radius = "Jari-jari kandang";
// Bake opacity (from mask data)
topology.bake.opacityFromMask = "Masker -> Opasitas";
topology.bake.backup = "Cadangan";

// project a high resolution mesh details onto another
topology.reproject.title = "Proyeksi ulang";
topology.reproject.title.help = "Proyeksikan detail pahatan, lukisan, dan lapisan dari objek yang terlihat terdekat.

Ini biasanya digunakan juga pada mesh resolusi tinggi, dengan topologi yang bersih.";
// tweaking value
topology.reproject.rayBias = "Bias sinar";
topology.reproject.rayBias.help = "Dua metode digunakan untuk reproyeksi:
• terdekat: titik terdekat di permukaan
• sinar: titik potong melalui arah normal

Nilai bias yang lebih tinggi akan lebih memilih perpotongan sinar daripada permukaan terdekat.";
topology.reproject.normalOffset = "Offset normal";
topology.reproject.shpereCast = "Fallback untuk sphere cast";
topology.reproject.shpereCast.help = "Jika reproyeksi normal sinar gagal, Nomad akan kembali ke perpotongan permukaan terdekat.";
// number of iteration the algorithm will take
topology.reproject.iterations = "Iterasi";
topology.reproject.relax = "Santai";
topology.reproject.relax.help = "Relaksasi harus diutamakan saat mesh berpoligon rendah.";
topology.reproject.layers.help = "Transfer lapisan lain ke mesh yang dipilih.";

topology.manifold = "Multikeberagaman";
topology.nonManifold = "Bukan multikeberagaman";
topology.manifold.clean = "Bersihkan";
topology.manifold.collapse = "Hapus wajah kecil";
topology.manifold.title = "Paksa Multikeberagaman";
topology.manifold.title.help = "Mencoba untuk membersihkan tepi non-manifold.

Ini bisa berguna untuk perangkat lunak eksternal yang tidak mendukung tepi dengan lebih dari 2 wajah yang umumnya.";

// Reset key-bindings/shortcuts
binding.reset = "Reset pengikatan";
// Add node in a sync mode (synchronize instance)
binding.addSync = "Sinkron";
binding.addSync.help = "Secara default, akan menggunakan nilai sinkron yang ditetapkan di menu scene.";
// Binding option
binding.context.toggle = "Alihkan konteks";
binding.toggleTool = "Alihkan pintasan alat";
binding.toggleTool.help = "Saat menggunakan salah satu pintasan alat, alat sebelumnya akan dipilih jika alat pintasan saat ini aktif.";
// When the key is tap once, the value will be toggled
binding.toggleTap = "Beralih pintasan pada ketukkan tombol";
// The binding force camera movement
binding.forceCamera = "Paksa Kamera";
binding.forceCamera.help = "Paksa interaksi kamera jika ada konflik dengan pengikatan lain.

Ini biasanya terjadi jika pengikatan yang sama ditetapkan ke pintasan alat atau Tambah/Kurang.";
// Same as Color Picker but it pick the material (color, roughness, metalness, etc)
binding.pickMaterial = "Pilih Material";
// Same as Color Picker but it pick the material (color, roughness, metalness, etc)
binding.pickFaceGroup = "Pilih Grup Wajah";
// Edit the tool brush size/radius
binding.editRadius = "Radius Alat";
// Edit the tool brush size/radius
binding.editIntensity = "Intensitas Alat";
// Controller dead zone
binding.joystick = "Joystick";
binding.controller.deadZone = "Stik zona mati";
binding.controller.deadZone.help = "Tingkatkan nilai ini jika kamera bergerak meskipun stik pengontrol tidak disentuh.";
// Snap the camera
binding.view.front = "Tampilan Depan";
binding.view.left = "Tampilan Kiri";
binding.view.top = "Tampilan Atas";
// Move/Translate the view
binding.pan.left = "Geser ke Kiri";
binding.pan.right = "Geser ke Kanan";
binding.pan.forward = "Geser ke Depan";
binding.pan.backward = "Geser ke Belakang";
binding.pan.up = "Geser ke Atas";
binding.pan.down = "Geser ke Bawah";
// Snap the view (while rotating)
binding.snapViewOnRotate = "Tampilan jepret (saat berputar)";
// Open a Nomad internal project (replace current scene)
binding.project.open = "Buka (proyek)";
// Open a Nomad internal project (add it to the current scene)
binding.project.add = "Tambahkan (proyek)";
// Select all the objects in the scene
binding.selectAll = "Pilih Semua";
// Rotate environment and the lighting
binding.rotateLighting = "Putar pencahayaan";
// The Camera pivot is the point around which the camera rotates
binding.updatePivot = "Perbarui poros...";

quadremesh.adaptQuadCount = "Hitung Kuad Adaptif";
quadremesh.curvatureAdaptivness = "Ukuran Adaptif";
quadremesh.curvatureAdaptivness.help = "Pada 100%, ukuran kuad akan bervariasi tergantung pada lekukan objek, memungkinkan kuad lebih kecil pada lekukan tinggi.
Pada 0%, ukuran kuad akan seragam.";
quadremesh.useVertexColors = "Lestarikan lukisan";
quadremesh.autoDetectHardEdges = "Deteksi Tepi Keras Otomatis";
quadremesh.autoDetectHardEdges.short = "Lampu Keras";
quadremesh.reprojectVertex = "Proyeksikan Ulang Vertex";
quadremesh.reprojectVertex.short = "Proyeksikan Ulang Vertex";
quadremesh.reprojectVertex.label = "Saat diaktifkan, Nomad akan memproyeksikan ulang posisi pada mesh sebelumnya.

Perhatikan bahwa jika mesh memiliki layer, reproyeksi akan selalu digunakan.";

// Privacy policy
privacyPolicy.title = "Kebijakan Privasi";
privacyPolicy.reject = "Tolak";
// Hexanomad is the company name
privacyPolicy = "Hexanomad tidak mengumpulkan data apa pun dari Nomad Sculpt.";

sonar.disconnect = "Putuskan SonarPen";
sonar.connect = "Hubungkan SonarPen";
sonar.connect.confirm = "Hubungkan SonarPen?";
sonar.connect.confirm.warning = "Sonar Pen akan menggunakan mikrofon (umpan balik audio) untuk mendeteksi tekanan pena.";

// Color disc mode
widget.color.disc = "Cakram";
widget.color.ring = "Cincin";
widget.color.square = "Persegi";

nomad.mainFolder = "Folder utama Nomad";
nomad.mainFolder.warning = "File dibiarkan tidak tersentuh.
Mereka tidak disalin, dihapus, atau dipindahkan.";
nomad.mainFolder.error = "Setelah Anda memilih ya, Nomad akan menutup dan Anda bisa melanjutkan dengan meluncurkannya kembali.";

license.title = "Lisensi";
license.retry = "Coba Lagi";
license.key = "Kunci lisensi";
license.activate = "Aktifkan lisensi";
// ----------------------------------------------
license.newest = "Versi baru tersedia!";
license.encrypt.error = "Tidak dapat mengenkripsi!";
// ----------------------------------------------
license.grace = "Offline - Masa tenggang yang tersisa:";
license.grace.hours = "jam";
license.grace.days = "hari";
// ----------------------------------------------
license.portal.title = "Pengguna yang sudah ada";
license.portal.label = "Portal lisensi";
// ----------------------------------------------
license.checkout.title = "Pengguna baru";
license.checkout.label = "Beli Nomad";
// ----------------------------------------------
license.device.error = "Tidak dapat mendapatkan ID perangkat.";
license.device.mismatch = "ID perangkat tidak cocok!";
// ----------------------------------------------
license.error429 = "Terlalu banyak permintaan (tunggu).";
// ----------------------------------------------
license.validate.error404 = "Kunci lisensi tidak ditemukan.";
license.validate.error422 = "Entity tidak dapat diproses.";
// ----------------------------------------------
license.activate.error403 = "Jumlah maksimum perangkat telah tercapai!
Anda dapat menonaktifkan perangkat lain di portal lisensi Anda.";
license.activate.error404 = "Kunci lisensi tidak ditemukan.";
license.activate.error422 = "Entity tidak dapat diproses.";
// ----------------------------------------------
// version
version.update = "Pembaruan tersedia!";
version.restore = "Pulihkan pembelian";
version.buyWeb = "Versi web hanya untuk demonstrasi";
version.buyFull = "Tingkatkan ke versi penuh";
// ----------------------------------------------
// QuadRemesh
version.qr.unlock = "Buka kunci (beli, pulihkan, coba)";
version.qr.desktop = "Di desktop, QuadRemesher didistribusikan oleh Hexanomad, tetapi Hexanomad tidak menangani penjualan atau lisensi.
Semua pengelolaan lisensi dilakukan oleh Exoside.";
version.qr.buy = "Pembelian";
version.qr.promo = "
Quad Remesher adalah algoritma yang menghasilkan mesh dominan empat sisi.
Distribusi quad akan mencoba mengikuti kelengkungan alami objek.

Algoritma juga dapat menyesuaikan ukuran quad tergantung pada kelengkungan lokal.

Anda juga dapat memandu topologi hasil dengan:

• Grup Wajah $0 (pastikan untuk menghaluskan batas mereka untuk hasil yang lebih baik!)

• Simetri Planar X/Y/Z $1

• Panduan kurva $2

• Penggambaran Kerapatan $3

Quad Remesher dikembangkan oleh https://exoside.com/.";
// ----------------------------------------------
version.trialLayer = "Versi uji coba: 1 lapis per objek";
version.trialNoExport = "Versi percobaan: Tidak ada ekspor";
// ----------------------------------------------
version.fullFeatures = "• Pembelian satu kali
• Undo/Redo tanpa batas
• Lapisan tanpa batas
• Ekspor & Impor";
// ----------------------------------------------
version.demo.purpose = "Versi ini dibuat khusus untuk tujuan demonstrasi.";
version.demo.disable = "Fitur tidak diaktifkan untuk demo.";
// ----------------------------------------------
version.demo = "Demo Uji";
version.demo.sculpt = "Membuat patung";
version.demo.sculpt.help = "Semua kuas tersedia tetapi Anda tidak dapat menyimpan atau mengekspor.

Mode ini sebagian besar dimaksudkan untuk bereksperimen dengan kuas atau menguji dukungan tekanan.

Fitur lain mungkin juga terbatas (riwayat, lapisan).";
version.demo.file = "Impor & Ekspor";
version.demo.file.help = "Anda dapat mengimpor dan mengekspor model tetapi kuas membuat patung dinonaktifkan.

Mode ini paling bermanfaat untuk pengguna seluler yang tidak dapat membuka proyek .nom besar karena keterbatasan memori seluler.";
// ----------------------------------------------
// app store main page
store.name = "Nomad Sculpt";
store.headline = "Membentuk, melukis, dan menciptakan dalam 3D";
store.tag = "bentuk, 3d, nomad, lukis, pemodelan";
// ----------------------------------------------
store.description.sculpt = "• Alat pemahat
Clay, flatten, smooth, mask dan banyak kuas lainnya akan memungkinkan Anda membentuk kreasi Anda.
Anda juga dapat menggunakan alat potong boolean trim dengan lasso, persegi panjang dan bentuk lainnya untuk tujuan permukaan keras.";
// ----------------------------------------------
store.description.stroke = "• Kustomisasi Goresan
Falloff, alpha, ubin, tekanan pensil, dan parameter goresan lainnya dapat disesuaikan.
Anda juga dapat menyimpan dan memuat preset alat Anda.";
// ----------------------------------------------
store.description.paint = "• Alat Lukisan
Melukis vertex dengan warna, kekasaran, dan metalness.
Anda juga dapat dengan mudah mengelola semua preset material Anda.";
// ----------------------------------------------
store.description.layer = "• Lapisan
Rekam operasi pemodelan dan lukisan Anda dalam lapisan terpisah untuk iterasi yang lebih mudah selama proses pembuatan.
Perubahan dalam pemodelan dan lukisan keduanya direkam.";
// ----------------------------------------------
store.description.multires = "• Pahat multiresolusi
Bergerak bolak-balik antara beberapa resolusi mesh Anda untuk alur kerja yang fleksibel.";
// ----------------------------------------------
store.description.voxel = "• Voxel remeshing
Cepat mengerjakan ulang mesh Anda untuk mendapatkan tingkat detail yang seragam.
Dapat digunakan untuk dengan cepat membuat sketsa bentuk kasar pada awal proses penciptaan.";
// ----------------------------------------------
store.description.dynamic = "• Topologi dinamis
Pernis lokal mesh Anda di bawah kuas Anda untuk mendapatkan tingkat detail otomatis.
Anda bahkan dapat mempertahankan lapisan Anda, karena mereka akan diperbarui secara otomatis!";
// ----------------------------------------------
store.description.topology = "• Desimasi
Kurangi jumlah poligon sambil mempertahankan sebanyak mungkin detail.";
// ----------------------------------------------
store.description.group = "• Grup Wajah
Segmentasi mesh Anda ke dalam subgrup menggunakan alat grup wajah.";
// ----------------------------------------------
store.description.unwrap = "• Unwrap UV otomatis
Unwrapper UV otomatis dapat menggunakan grup wajah untuk mengontrol proses unwrapping.";
// ----------------------------------------------
store.description.baking = "• Baking
Anda dapat mentransfer data vertex seperti warna, kekasaran, metalness, dan detail berskala kecil ke dalam tekstur.
Anda juga dapat melakukan sebaliknya, mentransfer data tekstur ke dalam data vertex atau lapisan.";
// ----------------------------------------------
store.description.primitive = "• Bentuk Primitif
Silinder, torus, tabung, mesin bubut, dan primitif lainnya dapat digunakan untuk dengan cepat memulai bentuk baru dari awal.";
// ----------------------------------------------
store.description.rendering = "• Rendering PBR
Rendering PBR yang indah secara default, dengan pencahayaan dan bayangan.
Anda selalu dapat beralih ke matcap untuk pencahayaan yang lebih standar untuk tujuan pemodelan.";
// ----------------------------------------------
store.description.postprocess = "• Pasca proses
Refleksi Ruang Layar, Kedalaman Bidang, Penghalangan Lingkungan, Pemeta Suara, dll";
// ----------------------------------------------
store.description.files = "• Ekspor dan Impor
Format yang didukung mencakup file glTF, OBJ, STL, atau PLY.";
// ----------------------------------------------
store.description.interface = "• Antarmuka
Antarmuka yang mudah digunakan, dirancang untuk pengalaman seluler.
Personalisasi juga memungkinkan!";
// ----------------------------------------------
store.description.remesher = "• Quad Remesher (pembelian dalam aplikasi terpisah hanya)
Remesh objek Anda secara otomatis dengan mesh dominan yang mengikuti kurvatur mesh.
Mendukung panduan, grup wajah, dan pewarnaan densitas.";
// ----------------------------------------------