// Generic confirmation (Confirm? [yes/ok/delete, cancel])
confirm = "Xác nhận?";
// Answer to a question (Are you sure you want to do that? [yes, cancel])
confirm.yes = "Có";
// Answer to a question (Are you sure you want to do that? [yes, no, cancel])
confirm.no = "Không";
// The generic ok in a confirm box (The next operation is dangerous. [ok, cancel])
confirm.ok = "Đồng ý";
// Cancel something after being asked (Question? [answer, cancel])
confirm.cancel = "Hủy bỏ";

// Experimental feature
experimental = "Thử nghiệm!";

status.exit = "Thay đổi chưa lưu! Lưu trước khi đóng?";
status.exit.yes = "Lưu";
status.exit.no = "Không lưu";

// On single tap (should be short)
ontap = "Chạm đơn";

all = "Tất cả";
error = "Lỗi";

reset = "Đặt lại";
resetOrder = "Đặt lại thứ tự";

clipboard = "Bảng nhớ tạm";
clipboard.copy = "Sao chép";
clipboard.paste = "Dán";

// memory size
bytes = "byte";
kB = "kB";
MB = "MB";
GB = "GB";
TB = "TB";

// Noun
instance = "Phiên bản";
object = "Đối tượng";

// Same value (usually for axis, e.g: x == y == z)
uniform = "Đồng nhất";

sync = "Đồng Bộ";

// position
position.top = "Trên";
position.bottom = "Dưới";
position.left = "Trái";
position.right = "Phải";
position.center = "Giữa";
// direction
direction.up = "Lên";
direction.down = "Xuống";
direction.left = "Trái";
direction.right = "Phải";
// 3D cube
cube.top = "Đỉnh";
cube.bottom = "Dưới";
cube.left = "Trái";
cube.right = "Phải";
cube.front = "Trước";
cube.back = "Sau";

// Name of an item (object, tool, etc)
item.name = "Tên";
// Add a new item (object, tool, etc)
item.new = "Mới";
// Rename an item (object, tool, etc)
item.rename = "Đổi tên";
// Add a new item (object, tool, project, etc)
item.add = "Thêm";
// Update an item image with a new image (synonym: Update)
item.replace = "Thay thế";
// Save an item (object, tool, etc)
item.save = "Lưu";
item.save.confirm = "Xác nhận lưu?";
// Update an item (update camera view point, etc)
item.update = "Cập nhật";
// Reload last save of an item (object, tool, etc)
item.lastSave = "Lưu lần cuối";
// Reload last save of an item (object, tool, etc)
item.lastSave.confirm = "Tải lần lưu cuối?";
// Reset an item to its initial value (object, tool, etc)
item.reset = "Đặt lại";
item.reset.confirm = "Xác nhận đặt lại?";
// Make an item instance, similar to clone but keeps the underlying geometry (Synonym: link? soft clone?)
item.instance = "Mẫu";
// Uninstance the object, make the object real
item.uninstance = "Không mẫu";
// Clone an item (object, tool, etc)
item.clone = "Nhân bản";
// Delete an item (object, tool, etc)
item.delete = "Xóa";
item.delete.confirm = "Xác nhận xóa?";
item.delete.confirm.yes = "Có, xóa";
// When we delete the item but the image is used somewhere
item.delete.used = "Hình ảnh đã được sử dụng";
// Convert the item type (mesh, light) to a simple Node type
item.toNode = "Tới nút";
// Item visibility (object, layer, etc)
item.visible = "Có thể thấy";
// Show an item (object, layer, etc)
item.show = "Hiển thị";
// Hide an item (object, layer, etc)
item.hide = "Ẩn";
// Select an item (object, layer, etc)
item.select = "Chọn";
// Unselect an item (object, layer, etc)
item.unselect = "Bỏ chọn";
// Merge an item with another one below (layer)
item.mergeDown = "Ghép dưới";
// The order of an item in a list
item.order = "Thứ tự";
// Focus on previous item
item.previous = "Trước";
// Focus on next item
item.next = "Tiếp theo";
// The item is locked (either it cannot be selected, edited, or we preserve its details)
item.lock = "Khóa";
// No item selected
item.none = "Không có";
// Draggable, moveable
item.draggable = "";

// Search something (text entry to filter item)
search = "Tìm kiếm";

// Three-state toggle button (Auto, Off, On)
toggle.on = "Bật";
// Three-state toggle button (Auto, Off, On)
toggle.off = "Tắt";
// Three-state toggle button (Auto, Off, On)
toggle.auto = "Tự động";

// When you launch the app and we need to reprocess some resource thumbnails
loading.reprocess = "Thiếu hình thu nhỏ, đang xử lý lại tệp...";
loading.reprocess.cancel = "Bỏ qua tạo hình thu nhỏ?";

access.title = "Truy cập";
access.window = "Cửa sổ trợ giúp";
access.pinch = "Nhúm";
access.drag = "Kéo";
access.rotate = "Xoay";
access.roll = "Lăn";

// Color of an object
material.color = "Màu sắc";
// Defines how blurry or sharp the reflection on a material is (opposite of glossiness)
material.roughness = "Độ nhám";
// Defines how blurry or sharp the reflection on a material is (opposite of roughness)
material.glossiness = "Độ bóng";
// Whether the material is a metal or not
material.metalness = "Kim loạ";
// How much light a surface will reflect
material.specular = "Gương";
// Light that the surface can emit (glow)
material.emissive = "Phát sáng";
// Normal map (synonym: detail, bump)
material.normal = "Thường";
// flip y coordinate
material.normal.flipY = "Lật Y";
// Ambient Occlusion (AO)
material.occlusion = "Tắc nghẽn";
// Textures, basically images wrapped on models (synonym: Maps, Texture maps)
material.textures = "Kết cấu";
// Textures/Image
material.texture = "Kết cấu";
// A warning indicating that the mesh has no UVs
material.warningNoUVs = "Không có UV!";
// Texture filtering https://en.wikipedia.org/wiki/Texture_filtering
material.texture.filter = "Lọc";
// Nearest Filtering (closest sample)
material.texture.nearest = "Gần nhất";
// Bilinear Filter
material.texture.linear = "Tuyến tính";
// Mipmap filtering
material.texture.mipmap = "Mipmap";
// Triplanar mapping
material.projection = "Phép Chiếu";
material.projection.triplanar = "Triplanar";

// Prefer low power
about.lowPower = "GPU tiêu thụ điện thấp";
about.lowPower.confirm = "Sau khi thay đổi giá trị này, cần khởi động lại Nomad.";
// Wintab wacom API
about.wintab = "Sử dụng WinTab";
about.wintab.help = "Nếu WinTab được bật, bạn nên tắt Windows Ink trong cài đặt Wacom của mình.

Tương tự, nếu WinTab bị tắt, thì Windows Ink nên được bật trong cài đặt Wacom.";
// Prefer low power
about.fullScreen = "Toàn màn hình";
// Minify
about.minify = "Thu nhỏ UI";
about.minify.help = "Bạn cũng có thể chạm vào màn hình bằng 4 ngón tay nếu thiết bị của bạn hỗ trợ.";
// Turntable will rotate the whole scene on itself (as it if was on a turntable)
about.turntable = "Đĩa xoay";
// Rotation center of the turntable
about.turntable.pivot = "Trung tâm xoay";
// Keep current pivot
about.turntable.pivot.keep = "Giữ nguyên hiện tại";
// Turntable pivot will be at the center of the scene
about.turntable.pivot.scene = "Cảnh";
// Make the entire scene turn around (speed of the animation)
about.turntable.speed = "Tốc độ";
// Stuffs that I used to make the app
about.credits = "Lời cảm ơn";
// Link to open source projects that I used for the app
about.credits.openSource = "Mã nguồn mở";
// Only translate the &
about.credits.arts = "MatCaps & HDRIs";
// Change languages of the app
about.languages = "Ngôn ngữ";
about.languages.help = "Các tệp bản dịch có sẵn tại $0";
// Link to the App Website
about.website = "Trang web";
// Link to the App Forum
about.forum = "Diễn đàn";
// Link to the App Manual
about.manual = "Hướng dẫn";
// Link to the App Email
about.mail = "Hỗ trợ";
// Link to the App Twitter account
about.twitter = "Twitter";
// Link to the App Instagram account
about.instagram = "Instagram";
// Link to the App Facebook account
about.facebook = "Facebook";
// Link to the App Discord account
about.discord = "Discord";
// Link to the App Threads account
about.threads = "Threads";

// The user canceled an operation that was running
alert.aborted = "Hoạt động bị hủy!";
// Empty mesh
alert.mirror.empty = "Xuất kết quả rỗng!";
// Mesh already mirrored
alert.mirror.same = "Xuất kết quả giống nhau!";
// Error when an algorithm needs the object to have an hole (usually to fill it)
alert.hole.nothing = "Đối tượng không có lỗ!";
// No operation occured because the mesh is already manifold
alert.manifold.already = "Lưới đã là mặt khối!";
// Visibility of the object is off (but should be on)
alert.shape.notVisible = "Đối tượng hiện tại không hiển thị!";
// The user tried to trim an object but the selected region didn't touch the object
alert.trim.nothing = "Không có gì để cắt bớt.";
// The user tried to trim an object but the selected region completely encompassed the object
alert.trim.full = "Dừng cắt bớt: đối tượng đã cắt hoàn toàn.";
// In order to extract something, the mesh needs to have painted mask
alert.extract.none = "Không có gì để trích xuất!";
// In order to split something, the mesh needs to have painted mask
alert.extract.split.none = "Không có gì để chia tách!";
// List of disabled features when View Mode is selected
alert.view.disabled = "Tính năng bị vô hiệu hóa ở Chế độ Xem:";
// Primitive Widgets are small ui stuffs in the viewport that the user can interact with to modify an object
alert.view.disabled.widgetPrimitive = "Tiện ích nguyên thủy";
// The object needs to have two parts disconnected
alert.separate.fail = "Không thể tách rời: đối tượng chỉ có một phần!";
// Remesh is when you create a new topology (mesh) on an object
alert.voxelRemesh.success = "Lưới đã được tái cấu trúc!";
alert.voxelRemesh.empty = "Dừng tái cấu trúc: lưới kết quả không có bề mặt.";
// Should not happen or very rarely, input here is an object
alert.voxelRemesh.invalidInput = "Dữ liệu nhập không hợp lệ!";
// Helper popup to tell the users the object will cloned
alert.matrix.clone = "Đối tượng sẽ được nhân đôi";
// Helper popup to tell the users the object will cloned
alert.matrix.instance = "Đối tượng sẽ được gán định";
// A pivot refers the gizmo 3D position, this mode means we are moving the pivot
alert.gizmo.editPivot = "Chỉnh sửa chế độ trục.";
alert.mask.full = "Mặt nạ = 100%!";
// A pivot refers the gizmo 3D position
alert.gizmo.editObject = "Chỉnh sửa chế độ đối tượng.";
// See Glossary (DynTopo)
alert.dynamic.enable = "Trên Đỉnh động";
// See Glossary (DynTopo)
alert.dynamic.disable = "Tắt Đỉnh động";
alert.colorPicker = "Kéo trên đối tượng để chọn màu.";
// Transform mode is when the user can move the reference (image in the background) with its two fingers
alert.backgroundTransform = "Chạm nhẹ để thoát chế độ biến đổi.";
// Edit the symmetry plane with the gizmo
alert.editSymmetry = "Chạm nhẹ để thoát chế độ chỉnh sửa đối xứng.";
// Show the painted mask on the mesh
alert.mask.show = "Hiển thị mặt nạ";
// Hide the painted mask on the mesh
alert.mask.hide = "Ẩn mặt nạ";
// Selection refers to the objects that are currently selected
alert.selection.lock = "Khóa phần đã chọn";
// Selection refers to the objects that are currently selected
alert.selection.unlock = "Mở khóa phần đã chọn";
// Hide the objects that are not selected
alert.selection.isolate = "Cô lập phần đã chọn";
// Show the objects that are hidden
alert.selection.showAll = "Hiển thị tất cả";
// Project quick saving
alert.quickSave = "Đang lưu...";
// Painting on the object was hidden but the user did paint the object
alert.forcePainting.fill = "Hiển thị vẽ đã kích hoạt, [Vẽ tất cả] đã được sử dụng.";
// Painting on the object was hidden but the user started to paint on the object
alert.forcePainting.tool = "Hiển thị vẽ đã kích hoạt, đối tượng đã được vẽ.";
// See Glossary (Multiresolution)
alert.multiresLost = "Multiresolution sẽ bị mất!";
// Boolean cut mode will ignore some features
alert.booleanIgnored = "Phép toán Boolean sẽ bỏ qua các khu vực bị che hoặc ẩn!";
// The user is starting an operation that can lead to a crash
alert.range.warning = "Giá trị chi tiết cao và có thể yêu cầu nhiều bộ nhớ!";
// Autosave popup
alert.autoSave.auto = "Tự động lưu trong... $0s";
// The selected object doesn't have any layers
alert.needLayer = "Công cụ hiện tại yêu cầu một lớp đang hoạt động.";
// The user decided to hide the painting on the objects
alert.paintingHidden = "Vẽ đang bị ẩn!";
// The user decided to hide the masking on the objects
alert.maskingHidden = "Mặt nạ bị ẩn!";
// The user decided to display hidden faces
alert.hideIgnored = "Ẩn bị bỏ qua!";
// The selected object doesn't have any layers
alert.noPartialWireframe = "Vẽ một phần bị tắt khi hiển thị khung dây.";
// The user has selected a tool that is more intuitive to use when the camera is in orthographic mode
alert.shapeOrthographic = "Hãy sử dụng camera trực quan nếu bạn muốn tránh biến dạng phối cảnh khi dùng máy chiếu màn hình.";
// Trial version has a limited number of undo
alert.state.trial = "Phiên bản thử nghiệm: hoàn tác đã bị hủy";

background = "Nền";
// A flat color will be displayed in the background of the scene
background.color = "Màu sắc";
// 2 color with rotation
background.gradient = "Màu gradient";
// The environment (HDRI) will be displayed in the background
background.environment = "Môi trường";
background.blur = "Làm mờ";
background.exposure = "Phơi sáng";

// Image that the artist uses as a reference
background.imageEnable = "Hình ảnh tham khảo";
// The image will be displayed in overlay (used as a reference by the artist)
background.imageOverlay = "Trồng chéo";
// Opposite of transparency (Alpha)
background.imageAlpha = "Độ mờ đục";
background.imageReset = "Đặt lại cài đặt";
background.imageTransform = "Chuyển đổi";
// X screen coordinate of the image reference
background.imageX = "Vị trí X";
// Y screen coordinate of the image reference
background.imageY = "Vị trí Y";
// Rotation of the reference image
background.imageRotation = "Xoay vòng";
// Scale of the reference image
background.imageScale = "Tỉ lệ";
// Auto adjust the reference when moving the camera
background.syncLock = "Đồng bộ hóa với khóa máy ảnh";

// Blend: normal
blend.normal = "Thường";
// Blend: darker
blend.darker = "Tối Hơn";
blend.darker.darken = "Đậm hơn";
blend.darker.multiply = "Nhân lên";
blend.darker.linearBurn = "Thiêu đốt tuyến tính";
blend.darker.colorBurn = "Thiêu đốt màu sắc";
// Blend: lighter
blend.lighter = "Sáng hơn";
blend.lighter.lighten = "Làm sáng";
blend.lighter.screen = "Màn hình";
blend.lighter.linearDodge = "Dodge tuyến tính";
blend.lighter.colorDodge = "Dodge màu sắc";
// Blend: contrast
blend.contrast = "Độ tương phản";
blend.contrast.hardLight = "Ánh sáng cứng";
blend.contrast.softLight = "Ánh sáng mềm";
blend.contrast.overlay = "Chồng chéo";
blend.contrast.hardMix = "Hỗn hợp cứng";
blend.contrast.linearLight = "Ánh sáng tuyến tính";
blend.contrast.vividLight = "Ánh sáng sống động";
blend.contrast.average = "Trung bình";
// Blend: inversion
blend.inversion = "Đảo ngược";
blend.inversion.exclusion = "Loại trừ";
blend.inversion.difference = "Khác biệt";
// Blend: cancelation
blend.cancelation = "Hủy bỏ";
blend.cancelation.divide = "Chia sẻ";
blend.cancelation.subtract = "Trừ đi";
// Blend: component
blend.component = "Thành phần";
blend.component.luminosity = "Độ sáng";

// Camera (point of view in 3D)
camera = "Máy ảnh";
cameras = "Máy ảnh";
camera.view = "Xem";
// Copy the views
camera.updateView = "Cập nhật điểm nhìn?";
// Add a new camera
camera.addView = "Thêm góc nhìn";
// Focus on the camera
camera.focus = "Lấy nét";
// Add on the camera camera
camera.focusOn = "Lấy nét vào $0";
// Camera projection, Orthographic or Perspective
camera.projection = "Chiếu";
// Camera projection, Orthographic or Perspective
camera.projection.orthographic = "Trực quan";
// Camera projection, Orthographic or Perspective
camera.projection.perspective = "Phối cảnh";
// camera Vertical Field of View
camera.fov = "Trường nhìn thẳng đứng";
// Camera Field of View hint
camera.focal = "tiêu cự $0mm (cảm biến 35mm)";
// Rotation mode controls how the user will interact with the camera rotation
camera.rotation = "Xoay";
// Camera interaction mode, 2 degrees of freedom (synonym: Orbit)
camera.rotation.orbit = "Bàn xoay";
// Camera interaction mode, 3 degrees of freedom
camera.rotation.trackball = "Bi lăn";
camera.rotation.trackball.help = "Bi lăn cho phép tự do nhiều hơn, có thể lăn camera bằng 2 ngón tay.";
// Camera interaction mode, 1st person view
camera.firstPerson = "Góc nhìn thứ nhất";
// How sensitive the camera is (synonym: sensitivity)
camera.speed = "Tốc độ";
// Camera rotation sensitivity
camera.speed.rotation = "Xoay";
// Camera translation sensitivity
camera.speed.panning = "Dịch";
// Camera zooming sensitivity
camera.speed.zooming = "Phóng to thu nhỏ";
// Reset camera position
camera.resetView = "Đặt lại chế độ xem";
// Align the view (snap to nearest 90° angle)
camera.snapView = "Chụp nhanh chế độ xem";
// Warning (camera is snapped and it switched to orthographic)
camera.snapOrthographic.warning = "Camera được chụp nhanh (trực giao)";
// Switch to orthographic view when the view is snapped
camera.snapOrthographic = "Chụp nhanh trực giao";
camera.snapOrthographic.help = "Tùy chọn này cũng hoạt động khi sử dụng Khối Chụp ở góc.";
// The Camera pivot is the point around which the camera rotates
camera.pivot = "Cập nhật tâm xoay...";
// When we double tap on the object with the finger/stylus
camera.doubleTapMesh = "Chạm hai lần vào đối tượng";
// When we double tap on the background with the finger/stylus
camera.doubleTapBackground = "Chạm hai lần vào nền";
// When we double tap on the background with the finger/stylus
camera.doubleTapBackgroundFocus.toggle = "Chuyển đổi";
// Focus on the selection
camera.doubleTapBackgroundFocus.selection = "Lựa chọn";
// Focus on the entire scene
camera.doubleTapBackgroundFocus.scene = "Cảnh";
// When double tapping with the finger/stylus, the camera pivot will be updated
camera.doubleTapPivot = "Khi chạm hai lần";
camera.doubleTapPivot.help = "Cập nhật tâm xoay khi chạm hai lần trên bề mặt đối tượng.";
// Allow new pivot even when zooming outside the object surface
camera.airPivot = "Cho phép tâm xoay giữa không trung";
camera.airPivot.help = "Cho phép tâm xoay mới ngay cả khi phóng to bên ngoài bề mặt đối tượng.";
// Update the pivot when you start interacting with the camera
camera.autoPivot = "Khi camera bắt đầu chuyển động";
camera.autoPivot.help = "Cập nhật tâm xoay khi bạn bắt đầu tương tác với camera.";
// Move the camera so that it focus on the intersection point
camera.doubleTapFocus = "Tiêu điểm";
camera.doubleTapFocus.help = "Khi chạm hai lần vào đối tượng, camera sẽ dịch và tập trung vào điểm đã chọn.";
// Disable XY panning when unzomming
camera.centerZoomOut = "Chỉnh tâm khi thu nhỏ";
camera.panZoomOut.help = "Khi tùy chọn này bị vô hiệu hóa, vị trí tâm này sẽ được giữ nguyên.";

// Toolbox context (when expanded), multiple objects are selected
context.multiselection = "Lựa chọn nhiều";
// There is 0 nodes/items selected
context.noSelection = "Không có lựa chọn";

// Curve type, presets lets the user chooses between predefined curves
curve.preset = "Thiết lập sẵn";
// Quick curve x side shift
curve.shift = "Phím Shift";
// Curve type, https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline
curve.catmull = "Catmull-Rom";
// Curve curve, https://en.wikipedia.org/wiki/Spline_(mathematics)
curve.spline = "Spline";
curve.bspline = "B-spline";
curve.precision = "Độ chính xác";
// merge or collapse 1 point into another
curve.merge = "Gộp";
// snap
curve.snap = "Chụp";
curve.snap.offset = "Độ dịch chuyển";
curve.snap.offset.help = "Một giá trị 100% tương đương với bán kính của ống.";
curve.snap.surface = "Bề mặt";
curve.snap.vertex = "Đỉnh";
curve.snap.grid = "Lưới (nếu được chụp)";
// Regular spaced sampling
curve.uniform = "Đồng đều";
curve.uniform.help = "Đường cong sẽ được lấy mẫu ở khoảng cách đều đặn, để đảm bảo mật độ đồng đều.

Bạn có thể vô hiệu hóa tùy chọn này để kiểm soát một chút vòng lặp biên bằng cách thêm các điểm điều khiển mới trên đường cong.";
// Display the falloff curve in a symmetric way
curve.symmetric.help = "Hiển thị sự giảm trong một cách đối xứng.

Tùy chọn này chỉ là một chỉ dẫn hình ảnh, nó không ảnh hưởng đến bản thân sự giảm";
curve.radius = "Bán kính";
curve.twist = "Xoắn";
curve.spiral = "Xoắn ốc";
curve.spiral.twist = "Góc xoắn";
curve.spiral.scale = "Phóng to";
curve.spiral.offset = "Tiêu đề phụ";
curve.spiral.angle = "Dịch góc";
curve.pivot = "Trục xoay";
curve.pivot.self = "Tự thân";
curve.pivot.children = "Con";

// Set the desired FPS (frame per second, refresh rate)
debug.limitFps = "Mục tiêu FPS";
debug.limitFps.help = "Khi bị vô hiệu hóa, giá trị mặc định có nghĩa là nó sẽ đồng bộ với tần số làm mới của màn hình.";

// Warning about UVs (using extra memory)
debug.uvPrimitive.warning = "Tắt tùy chọn này nếu bạn không cần UVs.

Mesh có UVs sẽ dùng nhiều bộ nhớ hơn.";
// Debug option, Normalize means transforming the data so that it fits in [0-1] the range
debug.uvNormalize = "Bình thường hóa UVs";
debug.uvNormalize.help = "Nomad sẽ bình thường hóa UVs trong khung [0-1].";

// Debug option, display an window with some debugging logs
debug.logs = "Nhật ký";
// Model shortcut window
debug.shortcut = "Cửa sổ phím tắt";
// Debug option, overrides the rendering to display the depth buffer
debug.heightmap = "Bản đồ chiều cao";
// Debug options, graphical stuffs
debug.graphics = "Đồ họa";
// Debug options, generate screenshots with size compatible with the iOS store
debug.thumbnails = "Tạo ảnh nhỏ cho cửa hàng";

// Open file explorer
file.explore = "Khám phá";
// Empty list: there is no projects
file.project.load = "Tải lại dự án khi khởi động";
// Empty list: there is no projects
file.project.empty = "Bạn chưa có dự án nào được lưu!";
// The current opened project has some unsaved changes
file.project.unsaved = "Thay đổi chưa lưu!";
// The user will loose its project's unsaved changes
file.project.loseUnsaved = "Bạn sẽ mất các thay đổi chưa lưu!";
// Indicates to the user that the project thumbnail corresponds to the last manual save
file.project.lastManualSave = "Xem trước lần lưu thủ công cuối cùng";

file.project = "Dự án";
// Save current project (or overwrite if the project has already been saved once)
file.project.save = "Lưu";
// E.g: Save "my_project"?
file.project.save.confirm = "Lưu $0?";
// Make a copy
file.project.saveAs = "Lưu dưới dạng";
// Overwrite another project
file.project.overwrite = "Ghi đè";
// E.g: Overwrite "my_other_project"?
file.project.overwrite.confirm = "Ghi đè $0?";
// Open a project
file.project.open = "Mở";
// E.g: Open "my_project"?
file.project.open.confirm = "Mở $0?";
// E.g: Clone "my_project"?
file.project.clone.confirm = "Nhân bản $0?";
// Load another project and add/append all its data to the current scene
file.project.add = "Thêm vào cảnh";
// E;g: Add "my_other_project" to the scene?
file.project.add.confirm = "Thêm $0 vào cảnh?";
// Reset the scene and create a new project
file.project.new = "Mới";
file.project.new.confirm = "Tạo cảnh mới?";
// Delete a project (not corresponding to the currently opened one)
file.project.delete.confirm = "Xóa $0?";
// Delete a project (corresponding to the currently opened one)
file.project.delete.confirmActive = "Xóa $0?

Đây là dự án đang hoạt động hiện tại!";

// Auto save section
file.autoSave = "Tự động lưu";
file.autoSave.confirm = "Tắt tự động lưu?";
file.autoSave.help = "Lưu dự án của bạn vào tệp riêng sau khoảng thời gian quy định.

Tệp tự động lưu có thể được tìm thấy tại:";
// Interval in minutes in which the auto save popup will appear
file.autoSave.popup = "Thời gian chờ popup";
// In minutes
file.autoSave.minutes = "Popup hẹn giờ";
// Delete the current autoSave data
file.autoSave.delete = "Bỏ qua tự động lưu";
// Open the outdated auto save
file.autoSave.open.manual = "Mở lưu thủ công cũ không còn sử dụng";
file.autoSave.open.auto = "Mở lưu tự động cũ không còn sử dụng";

// color space (linear or srgb), do not translate linear/srgb if there is a doubt
file.colorSpace = "Không gian màu";
file.colorSpace.help = "Hãy chuyển đổi tùy chọn này nếu màu sắc có vẻ không chính xác.";
file.colorSpace.linear = "Tuyến tính";
file.colorSpace.srgb = "sRGB";

// Configure imports option
file.importSettings = "Tùy chọn nhập";

// Load interface preference settings when opening a scene file
file.import.guiSettings = "Giữ cài đặt giao diện người dùng";
file.import.guiSettings.help = "Khi mở hoặc nhập một tệp dự án, tất cả các cài đặt liên quan đến giao diện người dùng được nhúng trong dự án sẽ được tải.";
// OBJ have "groups" and "objects", by default groups are ignored, use this option to consider groups as separate objects
file.import.obj.splitByGroup = "Tách OBJ theo nhóm";
file.import.obj.splitByGroup.help = "Khi kích hoạt, Nomad sẽ tách các nhóm OBJ thành các đối tượng riêng biệt.";
// Merge all the object layers at when loading a file (deleting them in the process)
file.import.mergeLayers = "Gộp các lớp";
// Ignore the textures present in the file to load
file.import.skipTextures = "Bỏ qua kết cấu";
// Do not fiddle with the object topology when loading the file
file.import.keepTopology = "Giữ topologi";
file.import.keepTopology.help = "Sử dụng tùy chọn này nếu bạn không muốn Nomad thay đổi topologi của tệp lưới đã nhập.

Nó sẽ vô hiệu hóa việc sắp xếp lại đỉnh/ mặt, loại bỏ các đỉnh/ mặt trùng lặp và loại bỏ các đỉnh không sử dụng.";

// Import file section
file.import.title = "Nhập";
file.import.title.help = "Định dạng hỗ trợ:";
// The user imports a scene file that will replace the current scene
file.import.open = "Mở";
file.import.open.confirm = "Nhập tệp mới?";
// The user imports a scene file that will be added/appended the current scene
file.import.add = "Thêm vào cảnh";
file.import.add.confirm = "Nhập tệp mới?";

// Export scene file
file.export = "Xuất";

// Filter nodes that we want to export
file.select.include = "Bao gồm";
file.select.all = "Tất cả";
file.select.visible = "Có thể nhìn thấy";
file.select.selected = "Đã chọn";
file.select.unselected = "Không được chọn";

// Export each node in a separate file
file.export.separate = "Một tệp cho mỗi đối tượng";

// Export the current selected objects instead of the entire scene
file.onlySelection = "Chỉ bao gồm các đối tượng đã chọn";
file.onlySelection.help = "Chỉ bao gồm phần đã chọn, thay vì toàn bộ cảnh.";
// Tries to generate quad (rectangle polygon) from triangles
file.convertToQuad = "Tái tạo tứ giác";
file.convertToQuad.help = "Tái tạo tứ giác từ tam giác bằng cách ghép cặp tam giác (nếu chúng liền kề trong tệp).";
// ----------------------------------------------
// Whether we include the textures in the exported file
file.export.texture = "Kết cấu";
// Baking means transfering/converting
file.export.texture.help = "Tùy chọn này không ghi màu đỉnh vào kết cấu.

Chỉ bao gồm các kết cấu nếu đối tượng có kết cấu trong vật liệu của nó.";
// ----------------------------------------------
file.export.color0 = "Màu sắc đỉnh";
file.export.color1 = "Sơn PBR";
file.export.color1.help = "Xuất độ nhám, độ cứng và sơn mặt nạ. Điều này sẽ bị bỏ qua bởi các phần mềm khác.";
// ----------------------------------------------
// Whether we include normals vector in the exported file
file.export.normal = "Bình thường";
file.export.normal.help = "Chọn tùy chọn này nếu bạn muốn mở tệp trong các phần mềm khác.

Nomad luôn bỏ qua các vector bình thường vì nó sẽ tính toán lại chúng.";
// ----------------------------------------------
file.export.tangent = "Tiếp tuyến";
file.export.tangent.help = "Chọn tùy chọn này nếu bạn muốn mở tệp trong các phần mềm khác.

Tangents chỉ được sử dụng nếu mô hình có bản đồ bình thường.

Nomad luôn bỏ qua các tiếp tuyến vì nó sẽ tính toán lại chúng.";
// ----------------------------------------------
file.export.nomad.help = "Định dạng tệp nội bộ Nomad Sculpt.

Định dạng này sẽ không tải trên các phần mềm khác, chủ yếu dùng cho mục đích nhập lại.";
// ----------------------------------------------
// Whether we include layers in the exported file (see glossary for layer)
file.export.gltf.layer = "Các lớp";
file.export.gltf.layer.help = "Xuất các lớp dưới dạng biến đổi. Chính thức được hỗ trợ bởi glTF nên cũng sẽ hoạt động trên các phần mềm khác.";
// Whether we include painting of layers in the exported file (see glossary for layer)
file.export.gltf.layerPaint = "Vẽ lớp";
file.export.gltf.layerPaint.help = "Xuất các lớp tranh. Thông thường không được phần mềm khác đọc.";
// ----------------------------------------------
file.export.obj.warning = "Các lớp và tranh bổ sung (thô, kim loại, mặt nạ) sẽ bị mất.";
// Whether we include the vertex color in the exported file
file.export.obj.color = "Màu đỉnh";
file.export.obj.color.help = "Một số phần mềm 3d sẽ có thể đọc nó nhưng không phải tất cả.";
file.export.obj.color.help.append = "Thêm thông tin màu sau các đỉnh.";
file.export.obj.color.help.hexa = "Một cách khác để mã hoá màu. Nó cũng hỗ trợ dữ liệu mặt nạ.";
file.export.obj.faceGroup = "Nhóm mặt";
file.export.obj.object = "Viết đối tượng";
file.export.obj.object.help = "Giữ các đối tượng riêng biệt.

Tắt tùy chọn này sẽ xuất mọi thứ như một thực thể duy nhất.
Bạn cần tắt tùy chọn này nếu muốn sử dụng tính năng 'ID lưới / đa nhóm' của Substance Painter.";
file.export.obj.archive = "Loại";
file.export.obj.archive.folder = "Thư mục";
file.export.obj.archive.zip = "Zip";
file.export.obj.archive.help = "Một số ứng dụng (Google Drive, One Drive, v.v.) không hỗ trợ nhập thư mục, vì vậy bạn có thể sử dụng Zip thay thế.";
// ----------------------------------------------
file.export.ply.warning = "Các lớp và tranh bổ sung (thô, kim loại, v.v.) sẽ bị mất.";
// ----------------------------------------------
file.export.stl.warning = "Các lớp và tranh bổ sung (thô, kim loại, v.v.) sẽ bị mất.";
// Whether we include the vertex color in the exported file
file.export.stl.color = "Màu sắc đỉnh";
file.export.stl.color.help = "Một số phần mềm 3D sẽ đọc được nhưng không phải tất cả.";
// ----------------------------------------------
file.export.usd.skew = "Cho phép xiên";
file.export.usd.skew.help = "Cho phép xiên trong các phép biến đổi ma trận.

Khi vô hiệu hóa, Nomad sẽ tách ma trận xiên thành hai phép biến đổi: tỷ lệ và xoay.";
// ----------------------------------------------
// Advanced settings
settings.advanced = "Nâng cao";
// Means that all these options will be resetted when the app restarts
settings.notSaved = "Các tùy chọn này không được lưu trong cài đặt.";
settings.reset.title = "Cài đặt";
settings.reset.title.help = "Nó sẽ đặt lại các cài đặt ưu tiên của ứng dụng.

Một số tài nguyên được lưu riêng và sẽ không được đặt lại, bao gồm:
• Dự án
• Định vị khóa
• Cài đặt công cụ
• Môi trường HDRs 
• MatCaps
• Alpha
• Kết cấu (cọ)
• Hình ảnh tham khảo

Lưu ý rằng mọi thiết lập liên quan đến dự án sẽ được giữ nguyên, như chiếu sáng, Xử lý hậu kỳ, góc nhìn máy ảnh";

// Reset preference settings button
settings.reset = "Đặt lại về mặt định";
settings.reset.confirm = "Đặt lại cài đặt ưu tiên?";

// Render a screenshot of the scene
file.render = "Kết xuất";
// If we include the App Interface in the exported screenshot
file.render.showInterface = "Hiển thị giao diện";
// Resolution ratio of the exported screenshot
file.render.renderRatio = "Tỷ lệ kết xuất";
file.render.renderRatio.help = "Giá trị 1.0 có nghĩa là Nomad sẽ kết xuất ở cùng độ phân giải như kích thước hình ảnh yêu cầu bên dưới.

Sử dụng tùy chọn này nếu bạn không thể kết xuất ở độ phân giải nhất định (do thiếu bộ nhớ gây ra sự cố).";
// Desired size of the exported screenshot
file.render.size = "Kích thước cuối cùng";
// Desired size of the exported screenshot (custom vs predefined size)
file.render.size.custom = "Tùy chỉnh";
// Screen resolution parameters for the export screenshot features
file.render.screenResolution = "Màn hình";
// width of exported screenshot
file.render.width = "Chiều rộng";
// height of exported screenshot
file.render.height = "Chiều cao";
// export screenshot of the scene
file.render.warn = "Độ phân giải xuất cao ($0x$1)!

Hãy chắc chắn lưu dự án của bạn trong trường hợp thiết bị hết VRAM và gặp sự cố.";
// If true, then the exported screenshot will have transparency data in the image
file.render.transparent = "Nền trong suốt";
file.render.transparent.help = "Tùy chọn này có thể hữu ích nếu bạn muốn chèn lưới vào phần mềm sáng tạo 2D.

Hiện tại không hỗ trợ độ trong suốt từng phần của đối tượng.";

// Disable this option to have per-tool pressure settings (instead of shared settings)
pressure.useGlobal = "Sử dụng cài đặt toàn cầu";
pressure.useGlobal.help = "Theo mặc định, các công cụ chia sẻ cùng cài đặt áp lực.

Bỏ chọn tùy chọn này nếu bạn muốn cài đặt áp lực cụ thể cho công cụ này.";

// Pencil pressure
pressure.title = "Áp lực";
// Pencil/Stylus pressure will be ignored
pressure.noTool = "Công cụ này không sử dụng áp lực bút chì.";
// The tool can support pressure but its selected stroke type will ignore it
pressure.noGrab = "Kiểu nét vẽ Grab sẽ bỏ qua các thiết lập áp lực.";
// The stylus pressure will impact the tool radius (more pressure -> bigger radius)
pressure.radius = "Bán kính";
// The stylus pressure will impact the tool intensity (more pressure -> stronger intensity)
pressure.intensity = "Cường độ";
// Average pencil pressure event to get smoother result
pressure.average = "Làm mượt áp lực";
pressure.average.help = "Trung bình các sự kiện áp lực bút để có kết quả mượt hơn.";
// Limit pressure to 100%
pressure.limit = "Giới hạn áp lực ở mức 100%";
pressure.limit.help = "Đây là cài đặt chung.

Sử dụng tùy chọn này để đảm bảo áp lực bút không bao giờ vượt quá 100%.";

// list of inputs allowing camera interaction
gesture.camera = "Máy ảnh";
// list of inputs allowing sculpting interaction
gesture.sculpt = "Điêu khắc";
// Select object
gesture.select = "Chọn đối tượng";
// Finger/Touch input
gesture.finger = "Ngón tay";
// Stylus/Pencil
gesture.stylus = "Bút cảm ứng";
// Mouse/Trackpad
gesture.mouse = "Chuột";

// long press to pick the color/material under the cursor
gesture.dropper = "Chọn vật liệu";
gesture.dropper.help = "Trình chọn màu/vật liệu có thể được kích hoạt bằng cách nhấn lâu trên canvas.

Lưu ý rằng chỉ hoạt động nếu bàn chải hiện tại có chế độ sơn được kích hoạt.";

camera.airStroke = "Cho phép nét vẽ giữa không trung";
camera.airStroke.help = "Cho phép bắt đầu nét điêu khắc ngay cả khi con trỏ ban đầu không chạm vào lưới.

Tùy chọn này chỉ hoạt động cho các đầu vào có bật điêu khắc và tắt camera.";

// Three fingers on screen
gesture.three.title = "Ba ngón tay";
gesture.three.light = "Xoay ánh sáng";
gesture.three.light.help = "Xoay môi trường, ánh sáng và MatCap.";
gesture.three.radius = "Bán kính công cụ";
gesture.three.intensity = "Cường độ công cụ";

// If this option is enabled, finger inputs on screen will use the smoothing tool
gesture.finger.smooth = "Ngón tay luôn làm mượt";
gesture.finger.smooth.help = "Tùy chọn này chỉ hoạt động khi công cụ điêu khắc được kích hoạt.";
// If enabled, the pressure will be taken into account even if it's not coming from a recognized stylus
gesture.unknownPressure = "Cho phép áp lực không xác nhận";
gesture.unknownPressure.help = "Chọn tùy chọn này nếu áp lực không hoạt động với bút của bạn hoặc nếu bạn cần áp lực ngón tay.";

// Action when we press an Android pencil button
gesture.pencilAction.android = "Nút bút chì";
// Action when we use the Pencil double Tap
gesture.pencilAction.ios = "Nhấn đúp bút chì";
gesture.pencilAction.ios.help = "Chỉ hoạt động đối với Apple Pencil thế hệ 2.";
// Pencil button (or iOS pencil double tap) action: Nothing
gesture.pencilAction.none = "Không có";
// Pencil button (or iOS pencil double tap) action: flip adding/substracting sculpt matter setting
gesture.pencilAction.alt = "Thêm/Trừ";

// Enable Mask gesture by tapping once on the screen
gesture.mask.oneTap = "Phím tắt một lần chạm";
gesture.mask.oneTap.help = "Cho phép phím tắt Mặt Nạ bằng cách chạm vào màn hình một lần, mà không cần giữ phím tắt nút mặt nạ.

Nó cho phép các cử chỉ sau:
• chạm vào nền để đảo ngược mặt nạ
• chạm vào khu vực đã mặt nạ để làm mờ mặt nạ
• chạm vào khu vực chưa bị mặt nạ để làm sắc nối mặt nạ";
// Hold the finger on screen to toggle between two tools: Mask and SelMask
gesture.mask.holdStroke = "Nét vẽ";
gesture.mask.holdStroke.help = "Nhấn lâu sẽ chuyển đổi giữa Mask và SelMask và bắt đầu một nét vẽ mới.

Khi hết nét vẽ, công cụ trước đó sẽ được chọn lại.";
gesture.mask.holdIdle = "Công cụ";
gesture.mask.holdIdle.help = "Nhấn lâu và nhả không di chuyển để chuyển đổi giữa Mask và SelMask.";

// Shortcut customization, choose the action that the shortcut will performan (select tool, etc)
gesture.shortcut = "Phím tắt";

// Shortcuts to undo/redo
gesture.history = "Phím tắt lịch sử";
gesture.history.help = "• Hoàn tác: chạm với 2 ngón tay
• Làm lại: chạm với 3 ngón tay";
gesture.history.hold = "Nhấn lâu";
gesture.history.hold.help = "Giữ 2/3 ngón tay.";

// Size rejection is when we try to ignore the palm of the hand when we interact with a tablet
gesture.palmRejection = "Từ chối lòng bàn tay";
gesture.palmRejection.confirm = "Hãy chắc chắn tắt tùy chọn này nếu bạn gặp khó khăn khi tương tác với canvas!";
gesture.palmRejection.help = "Từ chối đầu vào nếu kích thước diện tích tiếp xúc lớn hơn giá trị này.

Có thể không hoạt động trên mọi thiết bị.";
// Size in pixel for the palm rejection feature
gesture.palmRejection.size = "Ngưỡng kích thước tối đa";

// Smoothing strategy
extract.polish.all = "Tất cả";
extract.polish.sharp = "Biên sắc nét";
extract.polish.border = "Chỉ các biên";
// Smooth the border in a way that it matches completely with its dual
extract.polish.syncBorder = "Đồng bộ biên";
// topology of extracted mesh
extract.edgeLoop = "Vòng cạnh (mặt cạnh)";
extract.edgeLoop.auto = "Vòng cạnh tự động";
extract.edgeLoop.division = "Phân đoạn";
// The thickness of the extracted mesh (from the painted mask)
extract.thickness = "Độ dày";
// Carve the mask into the surface
extract.carve = "Chạm khắc";
// Extract a new mesh from the painted mask
extract = "Chiết xuất";
// Preview extract
extract.preview = "Xem trước";
// Extract two new mesh from the painted mask and from the unmasked area
extract.split = "Tách";
// How should we close the topology of the extracted object
extract.action = "Hành động đóng";
extract.action.help = "• Không có gì
Đơn giản chỉ tách phần và để phần đã tách mở ra.

• Lấp đầy
Lỗ được đổ đầy và làm mịn.
Không sử dụng tùy chọn này cho bề mặt phẳng.

• Vỏ
Đóng hình được tách rời bằng cách sử dụng giá trị độ dày.

• Lớp
Trích xuất sự khác biệt lớp (chỉ dành cho menu con lớp).";
// Do not close the mesh (leave it open)
extract.action.none = "Không có";
// Close the mesh with a hole-filling algorithm
extract.action.fill = "Lấp đầy";
// Close the mesh by adding a thickness on the surface
extract.action.shell = "Lớp vỏ";
// Close the mesh by using the layer data as a difference thickness
extract.action.layer = "Lớp";

// uv part of revolution surface
genus.main = "Chính";
genus.hole = "Lỗ hổng";
genus.bottom = "Dưới cùng";
genus.top = "Trên cùng";

// History, list of undo/redo
history = "Lịch sử";
// First "undo" state
history.root = "Gốc";
history.undoConfirm = "Bạn có xác nhận hoàn tác tất cả các thao tác này không?";
history.undoWarning = "Nếu bạn chỉnh sửa sau đó, bạn có thể mất nhiều thay đổi.";
// Settings concerning the history stack of undo/redo
history.stack = "Ngăn xếp";
// Actions to include in the undo/redo stack
history.include = "Bao gồm các thao tác";
// include lighting editing in the undo/redo
history.includeLights = "Ánh sáng";
history.includeLights.help = "Nếu tùy chọn này bị tắt, di chuyển ánh sáng bằng Gizmo vẫn sẽ được bao gồm, vì nó có thể ảnh hưởng đến các đối tượng khác trong hệ thống phân cấp cảnh.";
// include postProcess editing in the undo/redo
history.includePostProcess = "Xử lý hậu kỳ";
// include shading parameters (MatCap & HDRIs) editing in the undo/redo
history.includeShading = "MatCap & HDRI";
// Can limit the stack of undo/redo size
history.limitSize = "Giới hạn lịch sử";
history.limitSize.help = "Kích thước tối đa của lịch sử.

Lịch sử sẽ được cập nhật trong thao tác ghi tiếp theo.";
// Limit the number of undo in the history stack
history.limitStack = "Giới hạn ngăn xếp";
history.limitStack.help = "Số lượng tối đa các thao tác mà ứng dụng có thể giữ.

Lịch sử sẽ được cập nhật trong thao tác ghi tiếp theo.";
// Value where you define how many operations you can undo before it displays a warning
history.rangeProtect = "Hoàn tác tối đa";
history.rangeProtect.help = "Nếu bạn đi quá xa trong lịch sử, nó sẽ hiển thị một hộp thoại xác nhận trước khi hoàn tác nhiều thao tác.";
// When enabled, each time the user undo an operation it will undo the camera position as well
history.restoreCamera = "Khôi phục camera";
history.restoreCamera.help = "Bật tùy chọn này để khôi phục góc nhìn camera đã lưu khi bạn hoàn tác/làm lại một thao tác.";
// Undo
history.undo = "Hoàn tác";
// Redo
history.redo = "Làm lại";
// Shown during undo
history.state.undo = "Hoàn tác: $0";
// Shown during redo
history.state.redo = "Làm lại: $0";
// Shown during undo/redo
history.state.voxelRemesh = "Lưới lại voxel";
// Shown during undo/redo
history.state.surfaceRemesh = "Lưới lại bề mặt";
// Shown during undo/redo
history.state.multiresLevel = "Thay đổi độ phân giải";

// Debugging/Inspect object material (view channel separately color, roughness, normal, uv, etc)
inspect = "Thanh tra";
// Inspector but SHORT
inspect.short = "Kiểm tra";
// Display the material channel on the background
inspect.onBackground = "Trên Nền";
// Display the material channel on the mesh
inspect.onMesh = "Trên Mesh";
// Show UV seams
inspect.seams = "Đường Rãnh";

// Interface customization
interface = "Giao diện";

// Resize window (should be short)
interface.resize = "Thay đổi kích thước";

// UI customization: one item row will stands on one line (synonym: Inlined)
interface.compact = "Giao diện: Gọn";

// UI customization: each row of the list will be bigger
interface.expandList = "Giao diện: Mở rộng danh sách";
// UI customization: each row of the list will be bigger
interface.expandList.help = "Chỉ là một tùy chọn giao diện giúp quản lý danh sách dễ dàng hơn.";

// Add shortcuts buttons to the bottom of the screen
interface.shortcut.bottom = "Thêm phím tắt (dưới cùng)...";
// Floating window
interface.shortcut.float = "Thêm phím tắt (cửa sổ)...";

// Interface option (main base color)
interface.colorBase = "Màu cơ bản";
// Interface option (accent widget color)
interface.colorSelect = "Tiện ích màu";
// Interface option (if the menus are transparent or opaque)
interface.panelTransparent = "Bảng điều khiển trong suốt";
// Interface option (panel blurriness, if the menus are transparent)
interface.blurFactor = "Độ mờ";
// Interface option (color of panels, if the menus are transparent)
interface.colorBaseTransparent = "Bảng màu";

// Interface color style
interface.preset.title = "Cài đặt sẵn";

// Reset interface settings
interface.resetAll = "Đặt lại kiểu";
interface.resetAll.confirm = "Đặt lại cài đặt giao diện?";
// help popup when hovering
interface.hoverHelp = "Cửa sổ bật trợ giúp khi di chuột";
// Interface option (main base color)
interface.iconSupport = "Nút độ tương phản cao";
interface.iconSupport.help = "Phong cách thay thế cho các nút giúp chúng dễ nhìn thấy hơn khi được bật.

Nếu đặt ở chế độ Tự động, Nomad sẽ sử dụng chế độ này khi độ tương phản màu giao diện giữa bật/tắt thấp.";
// Interface customization
interface.flipTop = "Phản chiếu thanh trên cùng";
// Interface customization
interface.flipBottom = "Phản chiếu thanh dưới cùng";
// Interface customization
interface.flipMiddle = "Phản chiếu thanh bên";
// list of tools
interface.toolbox = "Hộp công cụ";
// hide toolbox by default
interface.toolbox.hide = "Ẩn";
// Interface customization (the toolbox is a grid, we can adjust the column count)
interface.toolbox.columns = "Cột";
// Interface customization (the toolbox is a grid, we can adjust the column count)
interface.toolbox.rows = "Hàng";
// Reset the tool's order in the toolbox
interface.toolbox.resetOrder = "Đặt lại thứ tự";
// Colored text and icon
interface.toolbox.color = "Có màu sắc";
// Top bar
interface.top.title = "Khu vực trên";
interface.top.responsive = "Đáp ứng";
interface.top.responsive.help = "Tuỳ chọn này chủ yếu dành cho màn hình nhỏ.";
interface.top.responsive.multiline = "Nhiều dây";
interface.top.responsive.scroll = "Cuộn";
interface.top.responsive.collapse = "Thu gọn";
interface.top.alt = "Sắp xếp thay thế";
interface.top.alt.help = "Biểu tượng sắp xếp thay thế cho menu trên cùng. 

Các menu liên quan đến chỉnh sửa lưới thường nằm ở phía đối diện với menu cảnh, điều này có thể giúp trong việc chỉnh sửa cảnh.";
// Scale the interface
interface.scale = "Tỷ lệ tổng thể";
// Spacing between widgets
interface.cursorStep = "Khoảng cách dọc";
// Width of the interface panels
interface.panelWidth = "Chiều rộng bảng";
// Size of fonts
interface.fontScale = "Tỷ lệ phông chữ";
// Inset
interface.inset.title = "Độ lệch cạnh";
interface.inset.title.help = "Bạn chỉ có thể thay đổi các giá trị này nếu gặp sự cố khi tương tác với các nút trên mép màn hình.

Nếu thanh trượt bị vô hiệu hóa, Nomad sẽ sử dụng các giá trị khu vực an toàn do chính thiết bị trả về.";

// (see Glossary for Layer)
layer = "Lớp";
layers.syncTransform = "Đồng bộ biến đổi";
layers.syncTransform.help = "Nếu được bật, tất cả các lớp chưa chọn sẽ được điều chỉnh tùy thuộc vào sự xoay vòng, tỷ lệ và méo của biến đổi.

Tắt tùy chọn này nếu các lớp khác dự định được sử dụng mà không có biến đổi mới mà bạn đang áp dụng.

Khi được đặt tự động, chỉ các lớp nhìn thấy mới được điều chỉnh.";
// (see Glossary for Layer)
layers.lock = "Giữ chi tiết các lớp trên cùng";
// (see Glossary for Layer)
layers.lock.yes = "Khóa các lớp trên cùng?";
// (see Glossary for Layer)
layers.lock.warning = "Trong quá trình điêu khắc, biến dạng đến từ các lớp trên cùng sẽ bị bỏ qua.

Tuy nhiên, các chi tiết của các lớp này vẫn sẽ hiển thị.

Tùy chọn này chỉ hoạt động nếu các lớp trên cùng có các chi tiết tỷ lệ tương đối nhỏ.";
// (see Glossary for Layer)
layers.addLayer = "Thêm lớp";
// (see Glossary for Layer)
layer.factors = "Các yếu tố kênh";
// (see Glossary for Layer)
layer.factor = "Yếu tố";
// (see Glossary for Layer)
layer.offset = "Độ lệch";
// Layer blend mode
layer.blendMode = "Chế độ Blending";
// (see Glossary for Layer)
layer.base = "Nền tảng";
layer.base.nothing = "Không có gì để trích xuất!";
layer.base.background = "Vật liệu nền";
layer.base.background.help = "Nếu hoạt động, chỉ các giá trị chất liệu khác với vật liệu nền sẽ được trích xuất.";
// (see Glossary for Layer)
layers = "Lớp";
layers.title = "Lớp";
// (see Glossary for Layer)
layers.title.help = "Các lớp có thể ghi lại vị trí của dời và vẽ, điều này có thể hữu ích cho quy trình công việc phi tuyến tính. Ví dụ, bằng cách thử nghiệm các biểu cảm khuôn mặt khác nhau mà không dựa vào ngăn lịch sử để hoàn tác thay đổi.

Đối với dữ liệu vẽ, các lớp được sắp xếp từ trên xuống dưới; vì vậy lớp trên cùng sẽ che khuất lớp dưới cùng.

Bạn có thể xóa một phần của lớp bằng cách sử dụng công cụ `DelLayer`.";
layers.primitive = "Lớp không khả dụng cho các hình cơ bản.";
// When there is no layer selected (see Glossary for Layer)
layers.baseSelected = "Không";

light = "Ánh sáng";
lights = "Đèn";
// Intensity of light
light.intensity = "Cường độ";
// Color of light
light.color = "Màu sắc";
// Kelvin (the temperature unit)
light.kelvin = "Kelvin";
// Temperature in Kelvin (Alternative way to compute the color of the light)
light.temperature = "Nhiệt độ";
// The attachment of a light defines how it will move when the user moves the camera
light.attachment = "Gắn kèm";
// The light will stay still even if the user moves the camera
light.attachment.fixed = "Cố định";
// The light will move along the camera
light.attachment.camera = "Máy quay";
light.attachment.help = "• Cố định
Hướng ánh sáng sẽ không thay đổi.

• Camera
Hướng ánh sáng phụ thuộc vào góc nhìn của máy ảnh.";
// Light type (directional, spot, point)
light.type = "Loại";
// Directional light (synonym: sun light)
light.type.directional = "Có hướng";
light.type.sun = "Mặt trời";
// Directional light (synonym: sun light)
light.type.environment = "Môi trường";
light.type.hdri = "HDRI";
// Spot light emits light in a single direction, restricted by a cone shape.
light.type.spot = "Điểm";
// Point light emits lights everywhere (synonym: omni, omnidirectional)
light.type.point = "Điểm";
// For directional light (angle jitter)
light.angle = "Góc";
// For point/spot light (offset jitter)
light.size = "Kích thước";
// Cone angle for spot angles
light.spot.angle = "Góc nón";
// Softness of the spot light
light.spot.softness = "Mềm mại";
// Position of the light
light.position = "Vị trí";
// Enable or disable shadows for a light
light.shadow.cast = "Bóng";
// Point light only works with "screenspace" shadow type (not "shadow map")
light.shadow.pointTip = "Ánh sáng điểm chỉ hỗ trợ bóng râm không gian màn hình.";
light.shadow.type = "Loại bóng";
// https://en.wikipedia.org/wiki/Shadow_mapping
light.shadow.type.shadowMap = "Bóng bản đồ";
// Shadows computed with only the information visible on screen
light.shadow.type.screenspace = "Không gian màn hình";
light.shadow.type.screenspace.help = "Tính năng thử nghiệm, có thể bị loại bỏ trong phiên bản sau.

Tùy chọn này được dự định sử dụng với tính năng bóng râm mềm mại.";
// Adjustment to fix artefacts
light.shadow.bias = "Thiên vị";
// How blurry the shadow is
light.shadow.softness = "Mềm mại";
// Contact shadows are more precise shadows on small distance (synonym: cavity shadows?)
light.contact = "Liên hệ";
light.contact.help = "Nếu tự động được chọn, chỉ ánh sáng chiếm ưu thế nhất sẽ có bóng râm tiếp xúc.";
// Thickness threshold for screen-space shadows (synonym: threshold, bias)
light.shadow.tolerance = "Dung sai";
// Activated the light
light.visible = "Hiển thị";
// Move the light in front of the camera (but keeps its inner orientation)
light.resetPosition = "Đặt lại vị trí";

// Object's material
material = "Vật liệu";
// See glossary
material.pbrRoughnessMetalness.warning = "Độ nhám và Kim loại yêu cầu chế độ tạo bóng PBR.";
// See glossary
material.pbrReflectance.warning = "Độ phản xạ yêu cầu chế độ tạo bóng PBR.";
// See glossary
material.pbrRefraction.warning = "Khúc xạ yêu cầu chế độ tạo bóng PBR.";
// See glossary
material.pbrSubsurface.warning = "Bề mặt phụ đòi hỏi chế độ tạo bóng PBR.";
// Value that says how much light will change direction when hitting the surface
material.ior = "Chỉ số khúc xạ";
// an object-level value that overrides the roughness interior/surface of the mesh
material.paintingOverride = "Ghi đè độ gồ ghề";
// The roughness in the inside is turbidity
material.paintingOverride.help = "Có hai độ nhám đang hoạt động, một dẫn động bề mặt và một nằm bên trong.

Tuy nhiên chỉ có một độ nhám có thể vẽ, vì vậy hai độ nhám có các giá trị giống nhau.";
// Glossiness is simply the opposite of roughness
material.refraction.surface = "Bề mặt";
// Synonym: turbidity
material.refraction.interior = "Nội thất";
// Set the roughness of the object with a value of 0
material.paintGlossy = "Sơn bóng";
material.paintGlossy.help = "Nó sẽ sơn đối tượng với độ nhám và độ cứng 0, do đó cho phép khúc xạ sắc nét.

Điều này giống như đi vào menu sơn và sử dụng tính năng sơn tất cả với màu bị tắt.";
// Simulate the light being absorbed when it travels through the volume.
material.absorptionEnable = "Hấp thụ";
material.absorptionEnable.help = "Mô phỏng ánh sáng bị hấp thụ khi đi qua vật thể.

Các phần mỏng sẽ sáng hơn vì để nhiều ánh sáng đi qua, trong khi các khu vực dày hơn sẽ tối hơn.

Hiệu ứng phụ thuộc nhiều vào hình dạng của đối tượng, chỉ sử dụng một ước lượng độ dày của đối tượng.";
material.absorptionFactor = "Hệ số";
// Depth means how far the light can travel under the surface
material.subsurfaceDepth = "Độ sâu";
// Enable translucency (same as subsurface but only affect lights that enter a solid and escape from the other side)
material.translucency = "Tính mờ";
material.translucency.help = "Bạn cần có một nguồn sáng đổ bóng để thấy được tính mờ.";
// Opacity factor, the opposite of transparency (synonym: Alpha)
material.opacity = "Độ mờ";
// Fully opaque material
material.type.opaque = "Không trong suốt";
material.type.opaque.help = "Đây là loại tài liệu mặc định.

Alpha đỉnh được sơn, kết cấu độ mờ hoặc kênh alpha của kênh màu vẫn sẽ được tính đến thông qua độ mờ điểu.";
// Fully opaque material
material.type.shadowCatcher = "Người chụp bóng";
material.type.shadowCatcher.help = "Biến đối tượng hoàn toàn trong suốt, ngoại trừ các bóng đổ do ánh sáng.

Chế độ này thường được sử dụng trên hình học phẳng.";
material.type.shadowCatcher.warning = "Không có đèn với bóng trong cảnh của bạn, Bộ tạo bóng sẽ không hoạt động.

Ngoài ra, nếu bộ bắt bóng hoàn toàn bằng kim loại, Bộ bắt bóng có thể phản xạ cảnh nếu Bước Xử lý Hậu (Reflection) kích hoạt.";
// See glossary
material.type.subsurface = "Dưới bề mặt";
material.type.subsurface.help = "Để đạt kết quả tốt nhất, bạn có thể chuyển sang chế độ PBR và sử dụng ít nhất một nguồn sáng hướng, lý tưởng nhất là trong môi trường tối.";
// Transparency mode, alpha blendingd
material.type.blending = "Pha trộn";
material.type.blending.help = "Làm cho đối tượng bán trong suốt bằng cách điều chỉnh giá trị độ mờ.

Lưu ý rằng do hạn chế về thời gian thực, bạn có thể có các hiện tượng hình ảnh đáng chú ý nếu đối tượng của bạn có hình dạng phức tạp.";
// Transparency mode
material.type.additive = "Thêm";
material.type.additive.help = "Làm cho đối tượng bán trong suốt bằng cách điều chỉnh giá trị độ mờ.

Phương pháp này có xu hướng ít tạo ra hiện tượng hình ảnh hơn so với phương pháp Blending, nhưng đối tượng sẽ sáng hơn.";
// Transparency mode based on dithering
// https://en.wikipedia.org/wiki/Dither
material.type.dithering = "Hiệu ứng mờ nhòe";
material.type.dithering.help = "Làm cho đối tượng bán trong suốt bằng cách bỏ một số điểm ảnh một cách ngẫu nhiên.";
// Simulate glass-like material
material.type.refraction = "Khúc xạ";
material.type.refraction.help = "Chế độ này có thể được sử dụng để mô phỏng vật liệu thủy tinh.

Do hạn chế thời gian thực, khúc xạ tự động hoặc khúc xạ nhiều lớp bị giới hạn.";
material.castShadows = "Đổ bóng";
material.receiveShadows = "Nhận bóng";
// Lights are ignored, the object will be displayed with color only
material.alwaysUnlit = "Luôn tối";
// Inverse the side of the object triangles
// https://en.wikipedia.org/wiki/Back-face_culling
material.flipCulling = "Nghịch đảo";
// How much light a surface will reflect (synonym: specular)
material.reflectance = "Phản xạ";
material.reflectance.help = "Điều khiển lượng phản xạ mà vật liệu sẽ nhận được đối với vật liệu không kim loại.

Hầu hết thời gian, nên sử dụng giá trị mặc định (tương ứng với tiêu chuẩn 4% ánh sáng phản xạ ở góc thường).";
// Material preview in the viewport
material.preview = "Xem trước hiển thị vật liệu";
material.preview.help = "Khi bạn chỉnh sửa vật liệu, một bản xem trước sẽ hiển thị trong bảng xem trên đối tượng được chọn.

Bản xem trước được hiển thị trong khi bạn tương tác với thanh trượt màu, độ nhám, độ bóng kim loại, độ mờ và cường độ.";
// Menu name
menu.files = "Tệp tin";
// Menu name
menu.scene = "Cảnh";
// Menu name
menu.multires = "Đa độ phân giải";
// Menu name
menu.voxel = "Voxel";
// Menu name
menu.dynamic = "DynTopo";
// Menu name (Synonym: Misc, Other)
menu.topology = "Khác";
// Menu name
menu.primitive = "Nguyên thủy";
// Menu name
menu.render = "Kết xuất";
// Menu name
menu.material = "Vật liệu";
// Menu name
menu.postprocess = "Hậu kỳ";
// Menu name
menu.camera = "Máy ảnh";
// Menu name
menu.background = "Nền";
// Menu name
menu.tool = "Công cụ";
// Menu name
menu.stroke = "Nét vẽ";
// Menu name
menu.alpha = "Alpha";
// Menu name
menu.filter = "Bộ lọc";
// Menu name
menu.falloff = "Giảm dần";
// Menu name
menu.paint = "Sơn";
// Menu name
menu.symmetry = "Đối xứng";
// Menu name
menu.operation = "Hoạt động";
// Menu name (pencil pressure)
menu.pressure = "Áp lực";
// Menu name
menu.gesture = "Cử chỉ";
// Menu name
menu.layers = "Lớp";
// Menu name
menu.settings = "Cài đặt";
// Menu name
menu.interface = "Giao diện";
// Menu name
menu.bindings = "Ràng buộc";
// Menu name
menu.history = "Lịch sử";
// Menu name
menu.historySettings = "Cài đặt";
// Menu name
menu.about = "Giới thiệu";
// Menu name
menu.debug = "Gỡ lỗi";

// Operation on the object (action)
mesh.holes = "Lỗ";
// If the object has holes, the algorithm will close them
mesh.holes.close = "Đóng lỗ";
// Says how dense (number of triangles) the algorithm will use in order to fill holes
mesh.holes.detail = "Chi tiết";
// If the mesh has disconnected parts, it will be split/separated into objects
mesh.separate = "Tách";
// When converting the object to a triplanar primitive, some object features will be lost
mesh.triplanar.warning = "Các lớp, các nét vẽ và độ phân giải đa cấp sẽ bị mất.";
// Resolution of the triplanar grid
mesh.triplanar.resolution = "Độ phân giải";
// Make the triplanar a regular cube (all 3 dimension equal)
mesh.triplanar.cubic = "Buộc hình khối";
// Covnert an object to a triplanar primitive
mesh.triplanar.convert = "Chuyển đổi";
// Static object means "static topology"
mesh.static = "Lưới";
// See glossary
mesh.multires = "Đa độ phân giải";
// Dynamic topology
mesh.dynamic = "DynTopo";

// Disable this option to have per-tool material settings (instead of shared settings)
paint.useGlobal = "Vật liệu toàn cầu";
paint.useGlobal.help = "Nếu bật tùy chọn này, vật liệu đã chọn sẽ giống với các công cụ khác.

Lưu ý rằng nó chỉ xem xét các cài đặt độ thô, độ kim loại và màu sắc.";
// The current tool will paint the object if this option is enabled
paint.usePainting = "Vẽ nét";
// If true save the textures data into
paint.preset.embed = "Nhúng kết cấu";
paint.preset.embed.help = "Các kết cấu có thể được tìm thấy trong thư mục Nomad textures/.
Các mẫu chất liệu có thể được tìm thấy trong thư mục Nomad materials/.

Khi tùy chọn này tắt, mẫu chất liệu chỉ tham chiếu đến kết cấu bên trong thư mục textures/.

Bạn có thể bật tùy chọn này để tạo bản sao của kết cấu trong mẫu chất liệu.
Điều này có thể hữu ích nếu bạn muốn chia sẻ một mẫu có kết cấu mà không cung cấp kết cấu liên quan.";
paint.preset.embed.apply = "Áp dụng cho tất cả vật liệu";
// Factor/Opacity of paint tool
paint.intensity = "Độ mạnh màu";
// Apply the paint on the object
paint.paintAll = "Vẽ tất cả";
paint.paintAll.help = "Áp dụng vật liệu hiện tại cho đối tượng.";
paint.paintAll.help.mask = "Khu vực mặt nạ sẽ không bị ảnh hưởng.";
paint.paintAll.help.hide = "Khu vực ẩn sẽ không bị ảnh hưởng.";
paint.paintAll.help.opacity = "Sử dụng hệ số vẽ công cụ ở trên.";
paint.paintAll.help.layer = "Khu vực chưa sơn của một lớp sẽ không bị ảnh hưởng.";
paint.strokePainting.title = "Vẽ tranh";
// Brush stroke texture
paint.texture.warningEnable = "Cần kích hoạt vẽ nét để cho phép chiếu kết cấu (hộp kiểm ở trên)!";
paint.texture.warningIgnored = "Công cụ hiện tại không thể sử dụng kết cấu!";
// use stencil mode
paint.stencil = "Khuôn";
// Inherit stroke falloff option for the painting
paint.tool.help = "Sử dụng công cụ alpha, falloff và randomizer để điều chỉnh cường độ vẽ nét.

Các tuỳ chọn này bị bỏ qua cho tính năng vẽ tất cả, nhưng alpha được tính đến cho biến thể ba mặt phẳng.";
// when the user choose a new item name (through iOS/Android virtual keyboard)
input.name = "Tên mới";
// when the user choose a new number value (through iOS/Android virtual keyboard)
input.number = "Giá trị mới";
// when the user choose a new color (through iOS/Android virtual keyboard)
input.hexcolor = "Màu mới (định dạng hex)";

// Post process effect
postprocess = "Hậu kỳ";
// Denoise
postprocess.denoise = "Bộ lọc khử nhiễu";
postprocess.denoise.help = "Áp dụng một lần khử nhiễu sau khi tất cả các khung hình đã được tích lũy.";
postprocess.denoise.warning = "Đây là một thao tác tốn kém, chỉ bật hiệu ứng này nếu hình ảnh bị nhiễu.";
// Quality vs performance
postprocess.quality = "Chất lượng";
postprocess.quality.help = "Kích hoạt các tùy chọn này để cải thiện chất lượng, gây tổn hại đến hiệu suất.";
// More samples means better quality but slower performance
postprocess.maxSamples = "Mẫu tối đa";
// Full resolution (1:1 resolution) instead of half resolution
postprocess.fullResolution = "Độ phân giải đầy đủ";
// Number of frames that we accumulate (higher value means better quality)
postprocess.accumulateCount = "Lấy mẫu khung tối đa";
postprocess.accumulateCount.help = "Số lượng khung hình tối đa được tích lũy trước khi kết thúc quá trình dựng hình.

Khi quá trình dựng hình kết thúc, Nomad sẽ không thực hiện bất kỳ hoạt động nào, do đó tiết kiệm năng lượng pin.

Nhiều tính năng dựng hình được lợi từ sự tích lũy khung hình, đáng chú ý là:
• Đổ bóng mềm
• Chiếu sáng toàn cầu
• Phản chiếu (SSR)
• Tắc nghẽn xung quanh
• Bề mặt dưới
• Độ sâu trường ảnh

Số lượng khung hình cao chủ yếu cần thiết cho Đổ bóng mềm và Chiếu sáng toàn cầu.
Nomad có thể dừng dựng hình sớm hơn nếu các tính năng trên bị vô hiệu hóa.";
// The value is a ratio (0.5 means half resolution 2 means twice the resolution)
postprocess.renderRatio = "Độ phân giải render";
postprocess.renderRatio.warning = "Bị ghi đè bởi hiệu ứng Pixel Art.";
postprocess.renderRatio.help = "Tùy chọn này ảnh hưởng lớn đến hiệu suất.
Nên giữ giá trị dưới x1.25.

Tùy chọn này không được lưu trong cài đặt.";
// Temporal Anti-Aliasing (no need to translate "TAA")
postprocess.taa = "Khử răng cưa (TAA)";
postprocess.taa.help = "Giảm nhấp nháy khi bạn di chuyển camera.";
// Ditherhing pixel
postprocess.dithering = "Dithering";
postprocess.dithering.help = "Dither pixels để giảm các điểm bị mất thông tin.";
// Screen-Space Reflection (no need to translate "SSR")
postprocess.ssr = "Phản chiếu (SSR)";
postprocess.ssr.warning = "SSR yêu cầu chế độ đổ bóng PBR.";
// Screen-Space Global Illumination (no need to translate "SSGI")
postprocess.ssgi = "Chiếu sáng toàn cầu (SSGI)";
// Thickness threshold for ssgi tracing algorithm (synonym: threshold, bias)
postprocess.ssgi.tolerance = "Dung sai";
postprocess.ssgi.warning = "SSGI yêu cầu chế độ đổ bóng PBR.";
// Screen-space ambient occlusion (SSAO)
// https://en.wikipedia.org/wiki/Ambient_occlusion
postprocess.ssao = "Tắc sáng môi trường";
// How far the effect spreads
postprocess.ssao.radius = "Kích thước";
// How strong the effect is
postprocess.ssao.factor = "Độ mạnh";
// Adjustment to fix artefacts
postprocess.ssao.bias = "Lệch cong";
postprocess.ssao.bias.help = "Độ nhạy cảm của hiệu ứng phụ thuộc vào độ cong bề mặt.";
// Depth of Field (bokeh)
// https://en.wikipedia.org/wiki/Depth_of_field
postprocess.dof = "Chiều sâu trường ảnh";
// The blur factor behind the focused point
postprocess.dof.blurFar = "Mờ xa";
// The blur factor in front of the focused point
postprocess.dof.blurNear = "Mờ gần";
postprocess.dof.focusTip = "Chạm vào vật thể để thay đổi điểm lấy nét.";
// Bloom (light bleeding)
// https://en.wikipedia.org/wiki/Bloom_(shader_effect)
postprocess.bloom = "Hiệu ứng Bloom";
// Intensity of the effect
postprocess.bloom.intensity = "Cường độ";
// How far the effect spreads
postprocess.bloom.radius = "Bán kính";
postprocess.bloom.radius.help = "Bloom lan rộng như thế nào.";
// Luminosity threshold (below this value, no bloom is generated)
postprocess.bloom.threshold = "Ngưỡng";
postprocess.bloom.threshold.help = "Ngưỡng độ sáng để quyết định có tạo ra bloom hay không.
Nếu giá trị là 0, tất cả sẽ nhận bloom.";
// https://en.wikipedia.org/wiki/Tone_mapping
postprocess.tone = "Ánh xạ sắc độ";
postprocess.tone.exposure = "Phơi sáng";
postprocess.tone.contrast = "Tương phản";
postprocess.tone.saturation = "Bão hòa";
postprocess.tone.hue = "Sắc độ";
// No tonemapping operator is used
postprocess.tone.mapping.none = "Không có";
// A neutral tonemapping is used
postprocess.tone.mapping.neutral = "Trung tính";
// Color curves
postprocess.curve = "Chỉnh màu";
// Curve for pixel luminance
postprocess.curve.luminance = "Chính";
postprocess.curve.red = "Đỏ";
postprocess.curve.green = "Xanh lá";
postprocess.curve.blue = "Xanh dương";
// Reset color grading curves
postprocess.curve.resetAll = "Đặt lại tất cả";
// https://en.wikipedia.org/wiki/Chromatic_aberration
postprocess.chromatic = "Sai sắc";
postprocess.chromatic.factor = "Độ mạnh";
// Darking on the edges
postprocess.vignette = "Tối góc";
// How far the effect spreads
postprocess.vignette.size = "Kích thước";
// How sharp the edge of the effect is
postprocess.vignette.hardness = "Độ cứng";
// Unblur the image (sharpening)
// https://en.wikipedia.org/wiki/Unsharp_masking
postprocess.sharpness = "Độ nét";
postprocess.sharpness.factor = "Độ mạnh";
// Filmic Grain
// https://en.wikipedia.org/wiki/Film_grain
postprocess.grain = "Nhiễu";
postprocess.grain.factor = "Cường độ";
// Accentuate the edges of the model
postprocess.curvature = "Độ cong";
// main strength of curvatre
postprocess.curvature.factor = "Yếu tố";
// Color/Strength of concave curvature
postprocess.curvature.cavity = "Khoang";
// Color/Strength of convex curvature
postprocess.curvature.bump = "Lồi";
// https://en.wikipedia.org/wiki/Pixel_art
postprocess.pixelArt = "Nghệ thuật pixel";
// Override frame accumulation feature
postprocess.pixelArt.allowAccumulate = "Cho phép lấy mẫu khung hình";
// Simulate scanline rendering (horizontal line)
postprocess.scanline = "Đường quét";
postprocess.scanline.factor = "Yếu tố";
// Spacing between lines
postprocess.scanline.spacing = "Khoảng cách";

// Geometry Primitive (box, sphere, cylinder, etc)
primitive = "Nguyên tố";
primitive.box = "Hộp";
primitive.sphereCube = "Quả cầu Hình lập phương";
primitive.sphereUV = "Quả cầu UV";
primitive.icosahedron = "Khối hai mươi mặt";
primitive.cylinder = "Hình trụ";
primitive.cone = "Hình nón";
primitive.torus = "Vòng xuyến";
primitive.lathe = "Tiện";
primitive.tube = "Ống";
primitive.plane = "Mặt phẳng";
primitive.triplanar = "Ba mặt phẳng";
primitive.needValidate = "Nguyên tố cần được xác thực!";

// If enabled, we can edit primitive inside the viewport
primitive.edit = "Chỉnh sửa";
primitive.edit.help = "Cho phép chỉnh sửa 3D trong viewport.

Bạn có thể tắt tính năng này nếu muốn tương tác với Gizmo hoặc công cụ Biến đổi mà không sửa đổi nguyên tố.";

// Primitive configuration
primitive.mainConfig = "Tham số";
// Interface section where we change the topology (number of triangles/polygons)
primitive.topology = "Cấu trúc";
// Interface section where we change the geometry (shape of the primitive)
primitive.geometry = "Hình học";

// Validating the primitive (then it can be sculpted)
primitive.validate = "Xác thực";
// Maximum number of faces of the primitives
primitive.maxFaces = "Mặt tối đa";
primitive.maxFaces.help = "Số lượng mặt tối đa mà một nguyên tố có thể có.

Giới hạn này chỉ hoạt động khi nguyên tố chưa được xác thực, sau đó bảo vệ không còn nữa.";
// Synonym: Flat subdivision
primitive.linear = "Chia nhỏ tuyến tính";
// Post as "subdivision that occurs after the primitive computation"
primitive.subdivision = "Hậu phân chia";

// Radius (of a sphere, torus, etc)
primitive.radius = "Bán kính";
// Make sure the two end-point of a primitive (cylinder, tube, etc) have the same size
primitive.radius.sync = "Cùng bán kính";
primitive.radius.start = "Bán kính bắt đầu";
primitive.radius.end = "Bán kính kết thúc";
// Size (of cube x dimension)
primitive.size = "Kích thước";
primitive.sizeX = "Kích thước X";
primitive.sizeY = "Kích thước Y";
primitive.sizeZ = "Kích thước Z";
// Division only impacts the topology (synonym: resolution)
primitive.division = "Phân chia";
primitive.divisionX = "Phân chia X";
primitive.divisionY = "Phân chia Y";
primitive.divisionZ = "Phân chia Z";
// Angle of torus, etc
primitive.angleX = "Góc X";
primitive.angleY = "Góc Y";
primitive.angleZ = "Góc Z";
// It means we try to keep regular sized quad (square) instead of highly distorted rectangule
primitive.constantDensity = "Mật độ không đổi";
// Make sure the shape is perfectly spherical
primitive.projectOnSphere = "Dự án trên quả cầu";
primitive.projectOnSphere.help = "Cố định các điểm trên một hình cầu hoàn hảo.";

// triplanar
primitive.triplanar.title = "Triplanar";
primitive.triplanar.title.help = "Triplanar sử dụng thông tin về mặt nạ từ 3 mặt phẳng để điền vào lưới voxel sau đó chuyển thành đa giác.

Nếu bạn tương tác với thanh trượt chia hoặc kích thước, thông tin vẽ sẽ được đặt lại (độ mượt vẫn ổn).

Bạn nên vô hiệu hóa đối xứng vì có thể không hoạt động như mong đợi.

Bạn có thể sử dụng tùy chọn `Kết nối tô-pô` trong bảng mặt nạ để vẽ một mặt làm ảnh hưởng đến các mặt khác.";
// Make sure the box is a regular cube (same 3 dimension)
primitive.triplanar.sameSize = "Kích thước tương tự (khối lập phương)";
primitive.triplanar.polish = "Sự mượt mà";
// Mask refers to the painted mask on the triplanar planes
primitive.triplanar.resetMask = "Đặt lại mặt nạ";
// One side of a cube (the back plane)
primitive.isolate.back = "Mặt sau";
// One side of a cube (the right plane)
primitive.isolate.right = "Mặt phải";
// One side of a cube (the bottom plane)
primitive.isolate.bottom = "Mặt dưới";
// Plane
primitive.planeSameSize = "Kích thước giống nhau (vuông)";
// Make the plane a disk/ellipse instead of a rectangle
primitive.planeDisk = "Đĩa";
// Box
primitive.boxRegular = "Kích thước giống nhau (khối lập phương)";
// Torus
primitive.torus.radiusOuter = "Bán kính ngoài";
primitive.torus.radiusInner = "Bán kính trong";
primitive.torus.angle = "Góc";
primitive.torus.angleOffset = "Độ lệch góc";
// Cylinder
primitive.cylinder.height = "Chiều cao";
// Cone
primitive.cone.radius = "Bán kính";
primitive.cone.height = "Chiều cao";
// Hole sub menu (cylinder, tube, etc)
primitive.hole = "Lỗ";
// Make a hole in the primitive to make it hollow
primitive.hasHole = "Có lỗ";
// Curve profile (synonym: profile, curve)
primitive.profile = "Hồ sơ";
primitive.profile.viewport = "Hiển thị trong viewport";
// If the revolution surface has caps (E.g: cylinder)
primitive.cap = "Nắp";

// Singular of Repeaters (Nodes that make many copies of its children (type of mirror/curve/array/radial))
repeater = "Lặp lại";
// All the new items will be inserted inside the bound rather than outside
repeater.array.fitInside = "Thích hợp bên trong";
// The object will follow the curve
repeater.curve.align = "Căn chỉnh";

// Import resource (Alpha, Textures, MatCaps, etc)
resource.import = "Nhập...";
// iOS Photos gallery
resource.import.ios.photos = "Ảnh";
// iOS Files App
resource.import.ios.files = "Tệp tin";

scene.title = "Cảnh quang";
scene.title.help = "Khi sử dụng các nút hiển thị/chọn, giữ và kéo ngón tay để dễ dàng chọn các đối tượng khác.

Bạn cũng có thể giữ lâu các nút hiển thị/chọn để tác động đến cả con của nó.";
// The view will focus on the item when we click on it
scene.focus = "Giao diện: Tập trung vào mục khi nhấp đúp";
// Add new object on gizmo position
scene.addOnGizmo = "Trên Gizmo";
scene.addOnGizmo.help = "Di chuyển nút đến vị trí Gizmo (nếu công cụ Gizmo được chọn)";
// Select the gizmo tool after adding a new object
scene.addSelectGizmo = "Chọn Gizmo";
scene.addSelectGizmo.help = "Chọn công cụ Gizmo khi thêm nút mới";
// Icon size in pixel (min/max)
scene.iconSize = "Kích thước biểu tượng";
// Min size of icon
scene.iconSize.min = "Tối thiểu";
// Max size of icon
scene.iconSize.max = "Tối đa";
// display hierarchy lines (visibility helper)
scene.showHierarchy = "Đường phân cấp";
scene.showHierarchy.help = "Hiển thị một dòng giữa cha và con của nó trong viewport.";
scene.showHierarchyNomadPivot = "Sử dụng trục Nomad";
scene.showHierarchyNomadPivot.help = "Điểm pivốt Nomad là điểm pivốt được sử dụng bởi công cụ Biến đổi và Gizmo.

Nếu tùy chọn này bị vô hiệu hóa, nó sẽ sử dụng điểm pivốt cơ sở tự nhiên.
Trong một số trường hợp, điểm pivốt cơ sở này có thể rất xa trung tâm đối tượng!";
// The view will focus on the item when we click on it
scene.syncVisible = "Đồng bộ hóa khả năng hiển thị";
scene.syncVisible.help = "Khi được bật, việc sử dụng biểu tượng <b>(</b>mắt) sẽ ảnh hưởng đến tất cả các mục đã chọn.";
// Merge 2 objects without modifying the geometry or the topology
scene.join = "Gộp lại";
// Group the selected object with a new created Empty Node as a parent
scene.group = "Nhóm lại";
// Move the item outside its parent (synonym: ungroup)
scene.unparent = "Bỏ nhóm";
// Mirror node type, a node that make many copies of its children (mirror symmetry)
scene.mirror = "Phản chiếu";
// Curve node type, a node that make many copies of its children (along a curve)
scene.curve = "Đường cong";
// Array node type, a node that make many copies of its children (grid repetition pattern)
scene.array = "Mảng";
// Radial node type, a node that make many copies of its children (radial symmetry)
scene.radial = "Đối xứng tâm";
// Nodes that make many copies of its children (type of mirror/curve/array/radial)
scene.repeaters = "Trình lặp lại";
scene.repeaters.help = "Các nút lặp lại tạo ra các phiên bản của bất kỳ hình học nào bên dưới nó trong hệ thống phân cấp của cảnh.";
// Validate button
scene.validateGroup = "Xác nhận";
// Keep instances in the scene
scene.validateGroup.keepInstances = "Giữ các phiên bản";
// If we should join children
scene.validateGroup.joinChildren = "Kết hợp các mục con";
// Merge/weld 2 objects by recomputing all the topology and creating a new object
scene.mergeVoxel = "Kết hợp voxel";
scene.voxelResolution = "Độ phân giải";
// The hidden objects will be "substracted" (the object will carve the other object)
scene.subtractionTip = "Phép trừ: Các đối tượng ẩn";
// If all the objects are hidden, only the parts where they intersect (collide) will be kep
scene.intersectionTip = "Giao điểm: Tất cả các đối tượng bị ẩn";

// Need at least to select one object
scene.noneButNeedAtLeastOne = "Không có đối tượng nào được chọn, vui lòng chọn ít nhất một đối tượng.";
// Need to select one object only
scene.noneButNeedOne = "Không có đối tượng nào được chọn, vui lòng chọn một đối tượng.";
// Need to select one object only
scene.onlyOneObject = "Nhiều đối tượng được chọn, vui lòng chọn chỉ một đối tượng duy nhất.";
// Boolean operation
scene.boolean = "Boolean";
scene.boolean.help = "Kết hợp, trừ hoặc giao nhau với các đối tượng bằng cách thực hiện một phép toán boolean.

Phép toán có thể thất bại nếu một số đối tượng không phải là đa tạp hoặc không kín nước.

Nếu phép boolean thất bại, bạn có thể luôn sử dụng bộ nhớ lại voxel trên đối tượng gặp vấn đề để đảm bảo nó là một đa tạp kín nước.";
// Weld intersection
scene.boolean.mergeIntersection = "Hàn giao điểm";

// General scene display settings
settings.display.title = "Cài đặt hiển thị";
// Wireframe (show triangles and quad edges)
settings.wireframe = "Khung lưới";
// Display the material texture
settings.debugChannel = "Hiển thị Kết cấu";
// Display the material texture in the background
settings.debugChannel.onBackground = "Trong nền";
// Display the material texture on the mesh
settings.debugChannel.onMesh = "Trên Mật";
// If the object is opened (a simple plane for example), two sided means we'll be able to see if from the two sides of the planes
settings.twoSided = "Hai mặt";
settings.twoSided.help = "Các mặt sẽ hiển thị từ cả hai phía.";
// If we colorize the inverted side of faces
settings.backface.color = "Màu sắc mặt sau";
// Color of the inverted side of faces
settings.backface.colored = "Mặt sau có màu";
// Outline (contour highlight around the selected object)
settings.outline = "Bao viền";
// Outline (contour highlight around the selected object)
settings.outline.help = "Các đối tượng được chọn sẽ được bao viền.";
settings.outline.thickness = "Độ dày";
// Navigation cube (easy to snap/align the view)
settings.snapCube = "Khối lập phương chụp nhanh";
// Move the navigation cube to the bottom of the screen
settings.snapCube.bottom = "Dưới";
// Move the navigation cube on the left side of the screen
settings.snapCube.left = "Trái";
// Flip the camera (rotate 180° to see the other side)
settings.snapCube.flip = "Lật 180°";
settings.snapCube.flip.help = "Lật chế độ xem nếu chế độ xem đã bị khóa.";
// Alignment (can be auto/on/off)
settings.snapCube.align = "Giới hạn căn chỉnh";
settings.snapCube.align.help = "Căn chỉnh các chế độ xem theo trục ngang. Nếu được bật, chỉ có 6 chế độ xem chốt là có thể.

Ở chế độ tự động, hạn chế chỉ xảy ra nếu máy ảnh ở chế độ Quỹ đạo.";
// Stats (information logs about the scene displayed on screen)
settings.stats = "Thống kê";
settings.stats.right = "Phải";
settings.stats.all = "Hiển thị toàn cảnh";
// Grid
settings.grid = "Lưới";
// Cursor
settings.cursor.title = "Con trỏ";
settings.cursor.whileSculpting = "Hiển thị vòng tròn trong khi điêu khắc";
// A small indicator dot
settings.cursor.showDot = "Hiển thị điểm nhỏ";
settings.cursor.showDot.help = "Điểm có thể xuất hiện như điểm xoay của máy ảnh hoặc khi bạn đang điêu khắc.";
settings.cursor.showRope = "Hiển thị bộ ổn định dây";
// indicator
settings.indicator.title = "Chỉ báo";
settings.indicator.title.help = "Hiển thị một chỉ báo hình ảnh (hướng dẫn, chụp màn hình, v.v.).";
settings.indicator.size = "Kích thước";
// Highlight (the object glows when we select it)
settings.highlight.selection = "Làm nổi bật lựa chọn";
// Highlight settings
settings.highlight = "Nổi bật";
settings.highlight.duration = "Thời lượng";
// Mesh that are not selected will be dark
settings.darkenUnselected = "Làm tối các đối tượng không được chọn";
// https://en.wikipedia.org/wiki/Shading
settings.smoothShading = "Tô bóng mượt";
// Experimental feature
settings.partialDraw = "Vẽ một phần";
settings.partialDraw.help = "Chức năng thử nghiệm!

Sử dụng nếu bạn đang điêu khắc một phần tương đối nhỏ của một đối tượng có độ chi tiết cao.

Công cụ này sẽ làm cho việc điêu khắc mượt mà hơn, nhưng bạn không nên bật khung lưới!

Ngoài ra, nó có thể thêm các hiện vật thị giác trong khi sử dụng nét vẽ";
settings.partialDraw.warning = "Đừng quên tắt tùy chọn này nếu các tạo phẩm hình ảnh quá phiền toái!";
// Disable this option to force a white uniform paint instead of showing the objects painting
settings.showPainting = "Hiển thị vẽ";
// Show and use the masking on the mesh
settings.showMasking = "Hiển thị mặt nạ";
// Disable this option to force show the hidden faces
settings.showDiscard = "Sử dụng ẩn";
// Show icon on the canvas
settings.icon = "Biểu tượng";
// Show icons on the canvas
settings.icons = "Biểu tượng";
// Tooltip
settings.icons.help = "Hiển thị biểu tượng trên bảng vẽ để bạn có thể chọn và chỉnh sửa chúng trực tiếp.";
// Hole filling settings
settings.hole = "Điền lỗ";
// Allow the hole filling algorithm to handle non-manifold (non regular topology)
settings.hole.nonManifold = "Điền không có đa dạng";
settings.hole.nonManifold.help = "Cố gắng điền lỗ không có đa dạng.
Tùy chọn này không được lưu trong cài đặt.";
// Maximum number of vertices (points)
settings.multires.maxVertices = "Số lượng điểm đỉnh tối đa";
settings.multires.maxVertices.help = "Nomad không kiểm tra bộ nhớ trước khi phân chia nhỏ, số lượng đa giác cao có thể dễ dàng dẫn đến sự cố.";
settings.multires.lowResVertices = "Ngưỡng độ phân giải thấp";
settings.multires.lowResVertices.help = "Một độ phân giải thấp hơn của lưới có thể được hiển thị khi bạn di chuyển camera.

Bạn có thể tăng giá trị này nếu bạn muốn hiển thị độ phân giải cao hơn của lưới.";

// The main rendering mode
shading = "Bóng đổ";
// Main rendering mode (PBR stands for Physically Based Rendering)
shading.pbr = "Chiếu sáng (PBR)";
shading.pbr.help = "Ở chế độ này, bạn có thể thêm đèn (với bóng), cùng với một môi trường HDR.

Bạn cũng có thể tô màu độ kim loại và độ nhám, cho phép kiểm soát tinh tế hơn về ngoại hình của vật liệu của bạn.";
// Fast rendering mode for sculpting purpose
shading.matcap = "MatCap";
shading.matcap.help = "Là viết tắt của MATerial CAPture, một MatCap bao gồm cả thông tin ánh sáng và vật liệu trong một hình ảnh.

Đây là chế độ kết xuất nhanh, chủ yếu phù hợp với việc điêu khắc thô.";
// Unlit rendering mode, it simply displays a solid/flat color
shading.unlit = "Không sáng";
shading.unlit.help = "Chế độ đổ bóng màu đơn, không bật đèn.";
// Helper rendering mode that display solid colors
shading.object = "ID vật thể";
shading.object.help = "Chế độ dựng hình không chiếu sáng với mỗi đối tượng có một màu sắc ngẫu nhiên được chỉ định.

Điều này chủ yếu hữu ích khi bạn có nhiều đối tượng trong cảnh.";
// Helper rendering mode that display solid colors
shading.instance = "ID phiên bản";
shading.instance.help = "Giống như ID Đối tượng, nhưng các phiên bản sẽ có cùng màu sắc.";
// Helper rendering mode that display solid colors
shading.material = "ID vật liệu";
shading.material.help = "Hiển thị một màu rắn cho mỗi bản thể chất liệu.";
// Randomize colors
shading.id.randomize = "Ngẫu nhiên hóa id";
shading.textures = "Sử dụng các kết cấu";
shading.textures.help = "Hiện tại, bạn không thể tạo hoặc chỉnh sửa kết cấu bên trong Nomad.

Nhưng nếu bạn nhập một tệp có chứa kết cấu, nó sẽ hoạt động.

• Kết cấu hỗ trợ
Độ mờ: Lit, MatCap, Unlit
Thông thường: Lit, MatCap
Màu sắc: Lit, Unlit
Phát sáng: Lit
Độ thô ráp: Lit
Kim loại: Lit";
// Lights
shading.lights = "Đèn";
shading.lights.addLight = "Thêm đèn";
shading.lights.warning = "Ánh sáng cần chế độ bóng đổ PBR.";
// Environment based lighting (synonym: HDRI)
shading.environment = "Môi trường";
shading.environment.import = "Nhập HDR";
shading.environment.exposure = "Độ phơi sáng";
shading.environment.backgroundBlur = "Làm mờ (nền)";
shading.environment.rotation = "Xoay";
shading.environment.rotation.help = "Bạn có thể xoay môi trường bằng cách kéo <b>3</b> ngón tay theo chiều ngang trên khung nhìn.";
// The environment will always be aligned with the camera (so that the lighting is consistent)
shading.environment.attachedToCamera = "Gắn vào camera";
shading.environment.attachedToCamera.help = "Gắn môi trường vào camera.

Nó sẽ buộc ánh sáng đồng nhất, điều này có thể hữu ích cho mục đích điêu khắc.";
shading.matcap.rotation = "Xoay";
shading.matcap.rotation.help = "Bạn có thể xoay MatCap bằng cách kéo <b>3</b> ngón tay theo chiều ngang trên khung nhìn.";
shading.matcap.global = "Sử dụng MatCap toàn cục";
shading.matcap.global.help = "Bỏ chọn tùy chọn này để sử dụng MatCap khác cho lưới cụ thể này.";

// bottom shortcut buttons (should be SHORT)
shortcut.maskVisible = "Mặt nạ";
shortcut.solo = "Solo";
shortcut.xray = "X-quang";
shortcut.voxelRemesh = "Voxel";
shortcut.wireframe = "Dây";
shortcut.cameraReset = "Đặt lại";
shortcut.cameraSnap = "Chụp";
shortcut.lockSelection = "Khóa";
shortcut.lockSelection.help = "Khi được bật, bạn không thể thay đổi lựa chọn bằng cách nhấp vào một lưới.";
shortcut.grid = "Lưới";

// Memory taken by the scene
stat.ramScene = "Cảnh";
// Vram = Video RAM (Video Memory, the memory of the graphic card)
stat.vramScene = "Cảnh Vram";
// Vram = Video RAM (Video Memory, the memory of the graphic card)
stat.vramRender = "Kết xuất Vram";
// Vram = Video RAM (Video Memory, the memory of the graphic card)
stat.vramTextures = "Kết cấu Vram";
// Memory taken by the undo/redo history
stat.ramHistory = "Lịch sử";
// Memory taken by other stuffs
stat.ramOther = "Khác";
// Memory used by the app (RAM, not storage!)
stat.usedMemory = "Bộ nhớ đã dùng";
// Memory available for the app (RAM, not storage!)
stat.freeMemory = "Bộ nhớ còn trống";
// RAM, not storage!
stat.ram = "RAM";
stat.used = "Đã dùng: $0";
stat.free = "Trống: $0";
stat.faces = "Mặt";
stat.triangles = "Tam giác";
stat.vertices = "Điểm đỉnh";
// quadrangular polygon (polygon with 4 sides)
stat.quads = "Tứ giác";
stat.vertex = "Đỉnh";
stat.scene.face = "Mặt của cảnh";
stat.scene.vertex = "Đỉnh của cảnh";

// Brush stroke
stroke = "Nét vẽ";
// The brush radius is either screen-space (fixed size on the screen) or world-space (fixed size in the scene)
stroke.useWorldRadius = "Bán kính không gian thế giới";
// The settings is shared among every tools
stroke.useWorldRadius.help = "Điều này được chia sẻ giữa mọi công cụ.";
// Share the radius value among every tools.
stroke.useShareRadius = "Chia sẻ bán kính";
stroke.useShareRadius.help = "Chia sẻ giá trị bán kính giữa mọi công cụ.";
// When doing a brush stroke, the spacing is the distance between 2 sculpt operations
stroke.spacing = "Khoảng cách giữa nét vẽ";
// Adjust the brush intensity to ensure consistent deformation depending on the stroke spacing.
stroke.spacing.adjust = "Điều chỉnh cường độ khoảng cách";
stroke.minSpacingAdjustIntensity.help = "Điều chỉnh cường độ nét vẽ để đảm bảo biến dạng đồng đều tùy thuộc vào khoảng cách nét vẽ.";
stroke.minSpacing.help = "Khoảng cách giữa mỗi nét vẽ, liên quan đến bán kính công cụ.

Giá trị thấp hơn sẽ cho phép nét vẽ mượt mà hơn nhưng hiệu suất sẽ bị giảm.";
// Brush stroke smoothing
stroke.lazySmooth = "Làm mượt nét vẽ";
stroke.lazySmooth.help = "Trung bình nhiều vị trí con trỏ để có nét vẽ mượt mà hơn.

Với giá trị cao, nét vẽ sẽ bị trễ so với con trỏ nhưng cuối cùng sẽ bắt kịp.";
// Make the brush stroke lags behind the pointer cursor
stroke.lazyRadius = "Định ổn dây lười";
stroke.lazyRadius.help = "Nét vẽ sẽ trễ sau vị trí con trỏ theo khoảng cách nhất định.

Điều này có thể được sử dụng để vẽ các đường mượt mà.";
// It is not a per-tool settings
stroke.globalSettings = "Đây là một cài đặt toàn cầu";
// Start the brush stroke from the last sculpted position to ensure there is no discontinuity
stroke.snapRadius = "Bán kính bắt dính";
stroke.snapRadius.help = "Bắt dính nét vẽ nếu con trỏ nằm gần nét vẽ đã ghi cuối cùng.

Điều này hữu ích khi vẽ các đường dài liên tục, trong khi thường xuyên tạm ngừng.";
// offset between the cursor and the brush stroke (for fat finger on small screen)
stroke.sculptOffset = "Độ lệch nét vẽ";
stroke.sculptOffset.help = "Áp dụng một độ lệch cố định trên nét vẽ.

Tùy chọn này có để giúp cho màn hình nhỏ khi sử dụng ngón tay, để ngón tay không che nét vẽ.";
stroke.accumulate = "Tích lũy nét vẽ";
stroke.accumulate.help = "Nếu tùy chọn này được bật, không giới hạn số lượng chất liệu bạn có thể thêm/bớt mỗi nét vẽ.";
// The tool can use DynTopo
stroke.useDynamic = "Cho phép tô pô động";
// Only sculpt the part that are linked topologically
stroke.connect = "Kết nối hình học";
stroke.connect.help = "Tùy chọn này sẽ chỉ điêu khắc các đỉnh được liên kết với bề mặt đã chọn.

Điều này thường được sử dụng cho công cụ Di chuyển, ví dụ nếu bạn muốn di chuyển duy nhất một phần mà tự cắt với phần khác.";
stroke.connect.short = "Đã kết nối";
// sculpt on hide or mask
stroke.protect = "Bảo vệ khu vực";
stroke.protect.hide.help = "Khi đặt chế độ tự động, các mặt ẩn sẽ được chỉnh sửa nếu khung dây trên các mặt ẩn hiển thị (xem menu khung dây).";
// Only sculpt the vertex that points toward the camera
stroke.culling = "Chỉ đỉnh trước hướng camera";
stroke.culling.help = "Tuỳ chọn này sẽ bỏ qua các đỉnh hướng về phía sau.

Điều này có ích nếu bạn muốn sơn một phần kết cấu mỏng mà không ảnh hưởng đến mặt bên kia.

Nó cũng hoạt động cho việc điêu khắc nhưng có thể gặp một số vấn đề quang sai.";
// Infinite depth, move everything under the circle, disregarding depth
stroke.silhouette = "Hình bóng";
stroke.silhouette.view = "Xem";
stroke.silhouette.snapped = "Nếu đã gắn";
stroke.silhouette.closest = "Gần nhất";
// Only sculpt the vertex that points toward the direction of the deformation
stroke.sameSide = "Chỉ đỉnh cùng phía";
stroke.sameSide.help = "Bỏ qua các đỉnh chỉ theo hướng ngược lại của biến dạng.";
// determine normal direction
stroke.normal.direction = "";
stroke.normal.direction.help = "";
stroke.normal.direction.normal = "";
stroke.normal.direction.normal.help = "";
stroke.normal.direction.screen = "";
stroke.normal.direction.screen.help = "";
stroke.normal.direction.auto = "";
stroke.normal.direction.auto.help = "";
stroke.normal.direction.auto.threshold = "";
stroke.normal.direction.auto.threshold.help = "";
// small tip/warning
stroke.onlyLasso = "Cài đặt chỉ hoạt động với công cụ dây thòng lọng.";

// Here sampling refers to the app gathering information under the mouse
stroke.area = "Lấy mẫu khu vực";
stroke.area.help = "Một số cọ hoặc tùy chọn nét bút cần một mặt phẳng vuông góc với bề mặt để hoạt động.
Bạn có thể điều chỉnh cách tính mặt phẳng trung bình này bằng cách thiết lập khu vực lấy mẫu theo tỷ lệ của bán kính công cụ.

Ở mức 100%, mọi điểm trong vòng tròn lựa chọn đều được xét tới.
Ở mức 0%, chỉ có đỉnh hoặc tam giác gần nhất được xét tới.";
// Sampling radius size (percent)
stroke.area.normal.radius = "Bán kính bình thường";
// Sampling radius size (percent)
stroke.area.point.radius = "Bán kính vị trí";
// Sampling averaging
stroke.area.normal.average = "Trung bình tiêu chuẩn";
// Sampling averaging
stroke.area.point.average = "Trung bình vị trí";
// Keep sharp edges
stroke.normalFilter = "Bộ lọc Normal";
stroke.normalFilter.help = "Loại trừ các điểm có phương pháp pháp tuyến khác nhiều với phương pháp pháp tuyến bề mặt.

Nó sẽ thay đổi cách tính diện tích mặt phẳng (Lấy mẫu diện tích).

Tùy chọn này có thể hữu ích cho công cụ dựa trên làm phẳng, hoặc nếu bạn muốn tô màu một bề mặt phẳng mà không bị lem.";

// Only paint the part of the mesh above a certain height
stroke.depthFilter = "Chặn độ sâu";
stroke.depthFilter.help = "Loại trừ điểm nằm trên hoặc dưới một khoảng cách nhất định so với mặt phẳng tính toán (Lấy mẫu diện tích).

Ví dụ, nó có thể được sử dụng để vẽ sưng hoặc lõm.";
stroke.depthFilter.max = "Khu vực trên";
stroke.depthFilter.min = "Khu vực dưới";
stroke.depthFilter.offset = "Độ lệch chiều cao";

// Invert the pixel (black <-> white)
stroke.alpha.invert = "Đảo ngược điểm ảnh";
// Repeat the alpha image (pattern)
stroke.alpha.wrap = "Lát gạch";
// No repeat pattern
stroke.alpha.wrap.none = "Không có";
// Repeat the alpha in a regular manner (tiles with seams)
stroke.alpha.wrap.repeat = "Lặp lại";
// Repeat the alpha in a mirrored (seamless tiling)
stroke.alpha.wrap.mirror = "Gương";
// Tight fit when using tiling
stroke.alpha.fit = "Ôm khít (ảnh không vuông)";
stroke.alpha.fit.help = "Tùy chọn này chỉ liên quan nếu các kết cấu alpha và cọ không vuông.

Khi được bật, mỗi hình ảnh sẽ lặp lại độc lập mà không có khoảng cách.
Bạn có thể tắt tùy chọn này nếu muốn giữ alpha và các hình ảnh khác đồng bộ, trong trường hợp tỷ lệ của chúng không giống nhau.";
// Alpha rotation
stroke.alpha.rotation = "Xoay";
stroke.alpha.rotation.lock.help = "Khóa hướng alpha.

Nếu việc xoay không bị khóa, hướng sẽ theo sát hướng của nét vẽ theo thời gian thực.";
// Repeat the image
stroke.alpha.tiling = "Lát gạch";
// Scale the image (make it bigger or smaller)
stroke.alpha.scale = "Tỷ lệ";
stroke.alpha.scale.help = "Tại giá trị tối thiểu, hình vuông alpha nằm trong bán kính vòng tròn công cụ.";
// Middle-point value at which no deformation occurs
stroke.alpha.midValue = "Giá trị trung bình";
stroke.alpha.midValue.help = "Giá trị điểm giữa mà không xảy ra biến dạng.

(Giá trị giữa = 0)
• Màu đen: không dịch chuyển
• Màu trắng: dịch chuyển dương

(Giá trị giữa = 0,5)
• Màu đen: dịch chuyển âm
• Màu trắng: dịch chuyển dương

(Giá trị giữa = 1)
• Màu đen: dịch chuyển âm
• Màu trắng: không dịch chuyển";
// Synonymous: Scatter/Jitter/Randomize
stroke.jitter = "Ngẫu nhiên";
// Sculpt and paint along the brush stroke at regular spacing
stroke.type.dot = "Điểm";
// Sculpt and paint along with alpha spaced by brush radius
stroke.type.roll = "Cuộn";
// Sculpt and paint with alpha projected on screen stencil
stroke.type.tile = "Gạch lát";
// Sculpt and paint with alpha projected on 3 axis
stroke.type.triplanar = "Ba Mặt Phẳng";
// Sculpt continuously
stroke.type.drag = "Kéo";
// Lock a region and move it around
stroke.type.grab = "Chụp nắm";
// Lock a point of interest and sculpt it by changing the tool radius
stroke.type.grabRadius = "Khóa + bán kính";
// Lock a region and sculpt it by changing the tool intensity
stroke.type.grabIntensity = "Khóa + cường độ";

stroke.falloffProject = "Ảnh hưởng";
stroke.falloffProject.help = "• Hình cầu (3D)
Ảnh hưởng được tính bằng cách lấy khoảng cách từ đỉnh đến trung tâm của cọ.

• Hình tròn (2D)
Đỉnh được chiếu lên mặt phẳng khu vực trước khi lấy khoảng cách đến trung tâm của cọ.
Điều này tương tự như cách lấy mẫu Alpha.";
stroke.falloffProject.sphere = "Hình cầu";
stroke.falloffProject.circle = "Hình tròn";
stroke.falloffProject.cylinder = "Hình trụ";

// Symmetry
symmetry = "Đối xứng";
symmetry.enable = "Kích hoạt";
symmetry.primitiveWarning = "Chỉ khả dụng đối với các hình khối nguyên thuỷ đã xác thực, ngoại trừ Triplanar.";
symmetry.plane.title = "Mặt phẳng";
symmetry.toolIgnore = "Công cụ hiện tại bỏ qua đối xứng.";
// Instead of planar symmetry, use a radial symmetry
symmetry.radial.title = "Hướng trục";
symmetry.radialX = "Hướng trục X";
symmetry.radialY = "Hướng trục Y";
symmetry.radialZ = "Hướng trục Z";
// A warning indicating that we limit the number of repetitions ($0 is a number)
symmetry.limited = "Số lần lặp lại bị giới hạn chỉ còn $0!";
// Synonym: Offset
symmetry.offset.title = "Dời chuyển";
symmetry.offsetX = "Dời chuyển X";
symmetry.offsetY = "Dời chuyển Y";
symmetry.offsetZ = "Dời chuyển Z";
// Number of clones
symmetry.count.title = "Số lượng";
symmetry.countX = "Số lượng X";
symmetry.countY = "Số lượng Y";
symmetry.countZ = "Số lượng Z";
// method
symmetry.method = "Phương pháp:";
symmetry.method.help = "• Địa phương
Mặt phẳng đối xứng sẽ di chuyển dọc theo mesh khi bạn sử dụng một trong các công cụ biến đổi (Gizmo hoặc Biến đổi).

• Thế giới
Mặt phẳng đối xứng được cố định và sẽ không di chuyển.";
// Local means: in the coordinate of the scene (synonym: absolute)
symmetry.method.world = "Thế giới";
// Local means: in the coordinate of the object (synonym: relative)
symmetry.method.local = "Cục bộ";
// Move the object to the other side of the symmetry (mirror it as well)
symmetry.flip = "Lật đối tượng";
// Cut half of the mesh
symmetry.cut = "Cắt";
// after mirroring, separate into multiple output (synonym: split, separate)
symmetry.split = "Tách";
// Reapply the mesh mirror, does not impact the topology
symmetry.mirror = "Phản chiếu";
symmetry.mirror.help = "Cố thử áp dụng lại đối xứng mà không ảnh hưởng đến cấu trúc. Đối xứng hướng trục sẽ bị bỏ qua. Nếu cấu trúc không thể giữ nguyên vì nó không được xem là đối xứng, bạn sẽ có tùy chọn áp dụng đối xứng bắt buộc.";
// indicate that applying the mirror will keep the mesh topology
symmetry.mirror.keepTopology = "giữ cấu trúc";
symmetry.mirrorFail = "Không phát hiện được đối xứng. 

Bạn có muốn bắt buộc đối xứng bằng cách phản chiếu mesh không?";
symmetry.mirrorUseMasking = "Bảo vệ khu vực bị che";
symmetry.mirrorUseMasking.help = "Giữ nguyên khu vực bị che. 

Tùy chọn này sẽ bị bỏ qua trong cấu trúc không đối xứng (hoặc bề mặt tách rời như một đôi mắt).";
// Reset the symmetry plane position
symmetry.reset = "Thiết lập lại";
// Reset the symmetry plane positon to the object center
symmetry.reset.centerMesh = "Trung tâm đối tượng";
// Reset the symmetry plane positon to the scene (world) center
symmetry.reset.centerWorld = "Trung tâm thế giới";
// Reset the symmetry plane orientation
symmetry.reset.direction = "Hướng";
// Display a line on the object (to show where the symmetry lies)
symmetry.showLine = "Hiển thị đường";
// Display the symmetry plane in 3D
symmetry.showPlane = "Hiển thị mặt phẳng";
// Allow the editing of the symmetry plane with the gizmo
symmetry.edit = "Chỉnh sửa Gizmo";
symmetry.edit.warning = "Chỉnh sửa đối xứng là thử nghiệm.";
symmetry.edit.help = "Bạn có thể tự do đặt mặt phẳng đối xứng.

Tính năng này vẫn đang thử nghiệm và có lẽ bạn không nên sử dụng.";

// Ideally <10 chars
tool.dynamic = "DynTopo";
// Ideally <10 chars (Symmetry)
tool.symmetry = "Đối Xứng";
// Ideally <10 chars (Mirror primitive)
tool.mirror = "Gương";
// Ideally <10 chars
tool.clay = "Đất sét";
// Ideally <10 chars (Subtract)
tool.clay.sub = "Trừ";
// Ideally <10 chars
tool.brush = "Cọ";
// Ideally <10 chars
tool.move = "Di chuyển";
// Ideally <10 chars (Normal vector, perpendicular to surface)
tool.move.normal = "Thường";
// Ideally <10 chars
tool.drag = "Kéo";
// Ideally <10 chars (Smooth the surface by erasing the details)
tool.smooth = "Làm mịn";
// Ideally <10 chars (Tries to smooth the topology by making the polygons more regular)
tool.smooth.relax = "Thư giãn";
// Ideally <10 chars (Paint mask)
tool.mask = "Mặt nạ";
// Ideally <10 chars
tool.mask.unmask = "Gỡ mặt nạ";
// Ideally <10 chars (Selector Mask, use lasso/ellipse,etc shape to mask the mesh)
tool.maskSelector = "Chọn Mặt Nạ";
// Ideally <10 chars (Smudge the paint of the object)
tool.smudge = "Làm mờ";
// Ideally <10 chars (Flatten the surface)
tool.flatten = "Làm phẳng";
// Ideally <10 chars (Flatten the surface, more strongly than Flatten)
tool.planar = "Phẳng";
// Ideally <10 chars (Flatten the surface by offsetting the surface in the opposite direction)
tool.flatten.fill = "Đổ đầy";
// Ideally <10 chars (Layer brush)
tool.layer = "Lớp";
// Ideally <10 chars
tool.crease = "Nhăn";
// Ideally <10 chars (Cut part of the mesh cleanly)
tool.trim = "Cắt";
// Ideally <10 chars (Cut part of the mesh cleanly into two separate meshes)
tool.split = "Tách";
// Ideally <10 chars (Project part of the object onto a curve)
tool.project = "Dự án";
// Ideally <10 chars
tool.inflate = "Bơm phồng";
// Ideally <10 chars
tool.pinch = "Nhéo";
// Ideally <10 chars
tool.nudge = "Thúc nhẹ";
// Ideally <10 chars
tool.stamp = "Dấu Triện";
// Ideally <10 chars (Delete Layer, a tool that can cancel the Layer deformation/paint)
tool.clearLayer = "Xóa Lớp";
// Ideally <10 chars (Select multiple objects with a lasso tool)
tool.select = "Chọn";
// Ideally <10 chars (Rotate, Translate and Scale the object)
tool.gizmo = "Gizmo";
// Ideally <10 chars
tool.gizmo.editPivot = "Trục";
// Ideally <10 chars (Snap angle)
tool.gizmo.rotateSnap = "Khớp";
// Ideally <10 chars (Snap translation)
tool.gizmo.moveSnap = "Khớp";
// Ideally <10 chars (Local/Relative space)
tool.gizmo.local = "Cục Bộ";
// Ideally <10 chars (Align/Snap the gizmo to world axis)
tool.gizmo.align = "Căn Chỉnh";
// Ideally <10 chars (Pin the gizmo, so that it stays in place when switching between objects)
tool.gizmo.pin = "Ghim";
// Ideally <10 chars (Rotate, Translate and Scale the object)
tool.transform = "Biến Đổi";
// Ideally <10 chars (Translate the object)
tool.transform.move = "Di Chuyển";
// Ideally <10 chars (Rotate the object)
tool.transform.rotate = "Xoay";
// Ideally <10 chars (Scale the object)
tool.transform.scale = "Thu Phóng";
// Ideally <10 chars (Snap the object on another object surface)
tool.transform.snap = "Khớp";
// Ideally <10 chars (Measure distance between 2 points)
tool.measure = "Đo";
// Ideally <10 chars (Lattice, deformer)
tool.lattice = "Mạng";
// If an option is shared among the tools
tool.all = "Tất cả";
// Ideally <10 chars (Quad Remesher)
tool.remesh = "Lưới Tứ Giác";
tool.remesh.guides = "Hướng Dẫn";
tool.remesh.density = "Mật Độ";
tool.remesh.same = "Giống Nhau";
tool.remesh.half = "Một Nửa";
// Ideally <10 chars (FaceGroup)
tool.faceGroup = "Nhóm Mặtt";
tool.faceGroup.autoPick = "Tự Động Chọn";
tool.faceGroup.flush = "Xóa Không Dùng";
tool.faceGroup.skip = "Bỏ qua các nhóm nhỏ dựa trên:";
tool.faceGroup.skipFace = "Số lượng mặt";
tool.faceGroup.skipFace.help = "Không tạo nhóm mới nếu số lượng mặt nhỏ hơn hoặc bằng ngưỡng này.";
tool.faceGroup.skipArea = "Diện tích bề mặt";
tool.faceGroup.skipArea.help = "Không tạo nhóm mới nếu diện tích bề mặt của nhóm mới nhỏ hơn ngưỡng này.

Ngưỡng được đưa ra dưới dạng phần trăm của tổng diện tích đối tượng.";
// Ideally <10 chars (Hide)
tool.hide = "Ẩn";
// Ideally <10 chars (View tool, do nothing in particular)
tool.view = "Xem";
// Ideally <10 chars (Revolving surface along a line)
tool.lathe = "Tiện";
// Ideally <10 chars (Revolving surface along a curve)
tool.tube = "Ống";
// Ideally <10 chars (Insert object into the scene)
tool.insert = "Chèn";
// Ideally <10 chars (Flip/Invert/Negate the shape)
tool.shape.flip = "Lật";
// Ideally <10 chars (No shape selected, same as Camera mode, does nothing in particular)
tool.shape.view = "Xem";
// Ideally <10 chars (Lasso selection)
tool.shape.lasso = "Dây thòng lọng";
// Ideally <10 chars (Curve selection, same as Lasso and it's an open shape)
tool.shape.curve = "Đường Cong";
// Ideally <10 chars (Polygon selection, same as Lasso but with more precision)
tool.shape.polygon = "Đa giác";
// Ideally <10 chars (Path selection, same as Lasso but with more precision and it's an open shape)
tool.shape.path = "Đường dẫn";
// Ideally <10 chars (Rectangular selection)
tool.shape.rectangle = "Hình chữ nhật";
// Ideally <10 chars (Ellipse selection)
tool.shape.ellipse = "Hình elip";
// Ideally <10 chars (Line selection, split the screen in half)
tool.shape.line = "Đường thẳng";
// Ideally <10 chars (Whether a shape is closed or not, a tube is open, a torus is closed)
tool.shape.closed = "Đóng";

// Radius of the tool (size)
tool.radius = "Bán kính";
// Intensity of the tool (force)
tool.intensity = "Cường độ";

tool.settings = "Cài đặt";
tool.settings.none = "Công cụ này không có cài đặt cụ thể nào.";

tool.crease.pinchFactor = "Hệ số nhúm";
tool.crease.offsetFactor = "Hệ số độ lệch";

tool.layer.removeInfluence = "Sử dụng dữ liệu lớp";
tool.layer.removeInfluence.help = "Tùy chọn này chỉ hoạt động khi có một lớp được chọn. Nó sẽ sử dụng dữ liệu lớp để giới hạn phạm vi di chuyển trên các nét vẽ.";
tool.layer.noLayerSelected = "Tùy chọn này chỉ khả dụng nếu một lớp được chọn";

tool.flatten.planeLockOrigin = "Khóa gốc mặt phẳng";
tool.flatten.planeLockNormal = "Khóa hướng mặt phẳng";

// Option for Tube, Lathe and Insert tool
tool.syncInstance = "Đồng bộ";
tool.syncInstance.message = "Đối tượng mới sẽ được thêm vào tất cả các phiên bản khác!";

// The vertex on the border of the mesh will stay still even if we try to smooth the border
tool.smooth.stickyBorder = "Điểm đỉnh cố định trên đường viền";
tool.smooth.screen = "Làm mịn màn hình";
tool.smooth.screen.help = "Sử dụng tùy chọn này để làm mịn độc lập với địa hình, ngay cả ở lưới đa giác cao.";
tool.smooth.screen.samples = "Mẫu màn hình";
tool.smooth.stable = "Làm mịn ổn định";
tool.smooth.stable.help = "Cố gắng làm cho việc làm mịn độc lập với địa hình. Chế độ này hoạt động tốt nhất với độ đặc địa hình thay đổi và giá trị cường độ làm mịn cao.";

tool.paint = "Vẽ";
// Erase the painting
tool.paint.erase = "Xóa";
// Only paint the part of the mesh that was already painted in the layer (repainting)
tool.paint.layerFilter = "Bộ lọc lớp";
tool.paint.layerFilter.help = "Sử dụng tùy chọn này nếu bạn chỉ muốn tô lại khu vực đã được tô trong một lớp.";

// Clear the painted mask
tool.mask.clear = "Xóa";
tool.mask.clearAll = "Xóa tất cả";
// Invert the painted mask
tool.mask.invert = "Đảo ngược";
// Mask or Unmask a region (leave other region that unconnected intact)
tool.mask.flipConnected = "Đảo ngược mặt nạ (kết nối)";
// Blur the painted mask
tool.mask.blur = "Làm mờ";
// Sharpen the edge of the painted mask area
tool.mask.sharpen = "Làm sắc";
// Transform/Matrix
tool.matrix = "Ma trận";
// The target of the transform is either the Matrix or the Vertex of the object
tool.matrix.target = "Mục tiêu";
// Automatic
tool.matrix.target.auto = "Tự động";
tool.matrix.target.auto.help = "Theo mặc định, điều này sẽ hoạt động tương tự như tùy chọn Nhóm.
Nếu mesh có che khuất hoặc nếu đối xứng được bật, nó sẽ hoạt động giống như Vertex.";
// Auto apply the transform on the vertices
tool.matrix.target.vertex = "Đỉnh điểm";
tool.matrix.target.vertex.help = "Hãy thử áp dụng biến đổi trên các đỉnh, nó sẽ không hoạt động trên các hình nguyên thủy chưa được xác thực.
Các instance cũng sẽ bị ảnh hưởng.";
// Transform the object alone (the children stands still)
tool.matrix.target.object = "Đối tượng";
tool.matrix.target.object.help = "Di chuyển đối tượng chỉ với, bỏ qua đối xứng và che khuất.
Chỉ nút được chỉnh sửa sẽ di chuyển, các con cháu sẽ đứng yên.";
// Transform the object and its children
tool.matrix.target.group = "Nhóm";
tool.matrix.target.group.help = "Di chuyển nút, bỏ qua đối xứng và che khuất.
Phần còn lại của thứ bậc cũng sẽ được chuyển đổi.";
// Operation on the mesh
tool.matrix.action = "Thao tác";
tool.matrix.action.origin = "Di chuyển về gốc";
tool.matrix.action.origin.help = "Di chuyển mesh về điểm gốc thế giới.";
tool.matrix.action.bake = "Nướng";
tool.matrix.action.bake.help = "Áp dụng ma trận vào đỉnh và đặt lại ma trận. Về mặt hình ảnh, không có gì thay đổi.";
tool.matrix.action.reset = "Thiết lập lại";
tool.matrix.action.reset.help = "Đặt lại biến đổi của mesh về mặc định.";

// Synonym: shear, https://en.wikipedia.org/wiki/Shear_matrix or https://en.wikipedia.org/wiki/Shear_mapping
tool.matrix.skew = "Biến dạng";
tool.matrix.translation = "Dịch chuyển";
tool.matrix.rotation = "Xoay";
tool.matrix.scale = "Tỷ lệ";
tool.matrix.uniformScale = "Tỷ lệ đồng nhất";

tool.transform.tip = "Chạm một ngón tay khác để chuyển chế độ";

// Size of the gizmo
tool.gizmo.size = "Kích thước Gizmo";
// If true, there is less spacing between gizmo handlers (rotate, scale, etc)
tool.gizmo.compact = "Gọn gàng";
// When enabled, tapping one the gizmo widget will open a numerical input popup
tool.gizmo.allowInput = "Nhập số";
tool.gizmo.allowInput.help = "Cho phép nhập số khi chạm vào một tiện ích gizmo";
// Angle threshold
tool.gizmo.linearRollThreshold = "Ngưỡng lăn tiếp tuyến";
tool.gizmo.linearRollThreshold.help = "Ngưỡng góc để chọn giữa phương pháp lăn tuyến tính hoặc tròn. Giá trị trên ngưỡng này sẽ sử dụng lăn tròn. Nếu bạn thích lăn tuyến tính (hướng của tiếp tuyến), hãy đặt giá trị này thành 90°.";
// Partially hide/fade the gizmo when we interact with it
tool.gizmo.autoHide = "Ẩn khi tương tác";
tool.gizmo.tap = "Chạm một lần";
tool.gizmo.tap.help = "Tùy chọn này kiểm soát cách di chuyển trục xoay khi nhấn một lần vào bề mặt mesh.";
tool.gizmo.tap.none = "Không có";
tool.gizmo.tap.none.help = "Không có gì xảy ra khi nhấn vào mesh.";
tool.gizmo.tap.normal = "Bình thường";
tool.gizmo.tap.normal.help = "Di chuyển gizmo đến điểm giao đầu tiên và căn chỉnh theo pháp tuyến bề mặt.";
tool.gizmo.tap.first = "Đầu tiên";
tool.gizmo.tap.first.help = "Di chuyển gizmo đến giao điểm đầu tiên.";
tool.gizmo.tap.medial = "Trung bình";
tool.gizmo.tap.medial.help = "Di chuyển gizmo đến giữa hai giao điểm đầu tiên.";

// The lathe generator is a vertical line and cannot be rotated
tool.lathe.axisFixed = "Cố định";
tool.lathe.axisOnly = "Chỉ trục";
tool.lathe.stable = "Ổn định";
tool.lathe.axis = "Trục";

// Fill the object's hole
tool.hole = "Lấp chỗ trống";
tool.hole.fillHoles = "Lấp lỗ";
// synonym: Alternative method
tool.hole.method.fill = "Lấp đầy";
tool.hole.method.legacy = "Cũ";
tool.hole.method.boolean = "Boolean";
tool.hole.bridges = "Boolean không gian màn hình";
tool.hole.bridges.help = "Nếu tùy chọn này được kích hoạt, bạn có thể khoan lỗ trong thể tích. Độ nghiêng cắt cũng sẽ theo sát hơn hình dạng cắt.";
tool.hole.threshold = "Ngưỡng epsilon";
tool.hole.threshold.help = "Thay đổi giá trị này có thể giúp với thuật toán lấp lỗ.";
tool.hole.smoothing = "Làm mịn lỗ";

tool.smudge.quality = "Chất lượng";
tool.smudge.quality.help = "Nó thay đổi độ phân giải của các pixel được chiếu, giá trị thấp hơn có nghĩa là nét vẽ nhanh hơn.";

// Shape for the tools: Trim / Split / Project / SelMask
tool.shape = "Hình dạng";
// Auto-validate the drawn shape
tool.shape.autoValidate = "Tự động xác nhận";
// Force the rectangle selection to be a square
tool.shape.rectangleSquare = "Hình vuông";
// The selection rectangle will be centered around the cursor
tool.shape.rectangleCentered = "Tập trung";
// Force the ellipse selection to be a circle
tool.shape.ellipseCircle = "Hình tròn";
// The selection ellipse will be centered around the cursor
tool.shape.ellipseCentered = "Tập trung";
// Rotate by step (angle value)
tool.shape.lineRotateStep = "Bước xoay";

// Show a yellow dot on the golden ratio point
tool.measure.goldenRatio = "Tỷ lệ vàng";
// volume of a mesh
tool.measure.volume = "Thể Tích";
// Surface of a mesh
tool.measure.surface = "Bề mặt";

// Always display the camera shortcut buttons on the viewport
tool.view.stickyCamera = "Phím tắt camera (luôn luôn)";

// Topology
topology = "Topologia";
// Synynom: detail value, density
topology.dynamic.detail = "Chi tiết";
// See glossary
topology.multires = "Đa phân giải";
topology.multires.help = "Giữ nhiều độ phân giải của một mesh.

Nếu bạn thực hiện thay đổi ở độ phân giải thấp hơn, các chi tiết từ độ phân giải cao hơn sẽ được tái hiện lại khi bạn quay trở lại.

Các layer có sẵn ở mọi độ phân giải.";
// Synonym: Unsubdivide, Un-subdivide
topology.multires.reverse = "Đảo ngược";
topology.multires.reverse.confirm = "Không thể tạo ra phân khu cơ bản.

Kết cấu hiện tại có thể không phải là kết quả từ một phân khu.";
topology.multires.subdivide = "Phân chia";
topology.multires.subdivide.confirm = "Mesh sẽ có $0M đỉnh, bạn chắc chắn chứ?";
// Prevents the user from subdivide the object again, a warning is displayed (with a UI link to increase this limit)
topology.multires.subdivide.limit = "Vượt quá giới hạn phân chia, xem $0";
topology.multires.deleteLower = "Xóa cấp thấp hơn";
topology.multires.deleteHigher = "Xóa cấp cao hơn";
topology.multires.keepTriangles = "Giữ tam giác";
topology.multires.lock = "Khóa (LV0)";
// Navigate toward multiple resolutions (go to higher level)
topology.multires.up = "Cấp độ Multires →";
// Navigate toward multiple resolutions (go to lower level)
topology.multires.down = "Cấp độ Multires ←";
// Synonym: Flat subdivision
topology.multires.linear = "Phân khu tuyến tính";
topology.multires.linear.help = "Chỉ cần phân chia mesh mà không áp dụng bất kỳ làm mịn nào";
// Only show the lowest resolution wireframe
topology.multires.minWireframe = "Chỉ cấp độ 0";
// Create a new object by recomputing a new topology
topology.remesh = "Tái tạo lưới";
// Create a new object by recomputing a new topology, by using voxels (see Glossary)
topology.voxel = "Remesh voxel";
topology.voxel.help = "<b>重构 lưới bằng cách lấy mẫu trên một lưới.

Nếu đối tượng không đóng kín (không thấm nước), thuật toán điền lỗ sẽ được áp dụng trước tiên.

Các lớp được tái hiện lại sau khi tái tạo lưới nhưng chất lượng sẽ suy giảm.";
topology.voxel.resolution = "Độ phân giải";
topology.voxel.sharp = "Giữ lại các cạnh sắc nét";
topology.voxel.sharp.help = "Tùy chọn này chủ yếu hữu ích cho các hoạt động boolean đơn giản trên phần sơ cấp.

Nó sẽ gây ra biến dạng ở một số khu vực do các điểm được gắn vào các cạnh.";
topology.voxel.subLevel = "Tạo dựng đa độ phân giải";
topology.voxel.subLevel.help = "Bạn có thể dựng lại cấu trúc phân cấp đa độ phân giải từ đầu ra của trình remesh voxel.

Nó cũng sẽ chạy nhanh hơn và sử dụng ít bộ nhớ hơn, đặc biệt nếu giá trị chi tiết voxel cao.
Tuy nhiên, nếu giá trị chi tiết voxel thấp và bạn yêu cầu nhiều cấp độ đa phân giải, bạn sẽ mất chi tiết.";
// Dynamic topology (DynTopo)
topology.surface.remesh = "Tái tạo lưới";
topology.surface.detail = "Chi tiết";
topology.surface.detail.help = "Không giống như tái cấu trúc lưới voxel, tái cấu trúc bề mặt không yêu cầu màng lưới phải đóng.

Nó cũng có thể hỗ trợ việc che lớp để bạn có thể bảo vệ một số phần của màng lưới khỏi sự thay đổi của hình học.

Các lớp sẽ được cập nhật chính xác.";
topology.surface.method = "Phương pháp";
// Uniformisation means we can both add and remove triangles/quads
topology.surface.method.uniformisation = "Đồng nhất hóa";
// We can only add triangles/quads (synonym: Refine)
topology.surface.method.subdivision = "Chia tách";
// We can only remove triangles/quads (synonym: Simplify)
topology.surface.method.decimation = "Tinh giảm";
topology.surface.method.help = "Hành vi của địa hình động:
• Uniformisation: thêm và xóa chi tiết
• Subdivision: thêm chi tiết
• Decimation: xóa chi tiết";
topology.surface.useMasking = "Bảo vệ khu vực đã che";
topology.surface.useMasking.help = "Các khu vực đã che sẽ bảo vệ phần hình học khỏi sự thay đổi.";
topology.surface.extrapolate = "Nội suy đỉnh";
// DynTopo
topology.dynamic = "Hình học động";
topology.dynamic.global = "Bật/tắt toàn cục";
topology.dynamic.activate = "Kích hoạt";
topology.dynamic.activate.help = "Với hình học động, các công cụ điêu khắc có thể chia nhỏ hoặc đơn giản hóa màng lưới tại chỗ theo thời gian thực.

Tính năng có thể có tác động đáng kể đến hiệu suất.

Các lớp được cập nhật chính xác.";
topology.dynamic.method = "Chi tiết dựa trên...";
topology.dynamic.method.screen = "Màn hình";
topology.dynamic.method.radius = "Bán kính";
topology.dynamic.method.constant = "Hằng số";
topology.dynamic.method.help = "• Thu phóng
Mức độ chi tiết dựa trên khoảng cách của bạn với bề mặt.

• Bán kính
Bán kính công cụ xác định lượng chi tiết.

• Không đổi
Chi tiết được cố định, giá trị chi tiết cũng được chia sẻ với thanh trượt voxel.";
topology.dynamic.quality = "Ưu tiên...";
topology.dynamic.quality.help = "Nếu bạn chọn Chất lượng, 2 điểm khác biệt chính là:
• sự cải thiện được áp dụng trước khi thực hiện khắc, bạn sẽ gặp ít hiện tượng ngoại suy hơn khi vẽ hoặc điêu khắc chi tiết rất nhỏ
• sự cải thiện không được áp dụng dần dần, nếu bạn điêu khắc chi tiết rất nhỏ hoặc thực hiện nét vẽ nhanh, hình thái học sẽ luôn được cải thiện chính xác";
topology.dynamic.quality.speed = "Tốc độ";
topology.dynamic.quality.quality = "Chất lượng";
// Whether the pencil pressure can impact the level of detail
topology.dynamic.usePressure = "Sử dụng áp lực trên bán kính";
topology.dynamic.usePressure.help = "Sử dụng tùy chọn này nếu bạn muốn áp lực bút lên bán kính công cụ ảnh hưởng đến mức độ chi tiết.";
topology.dynamic.useFalloff = "Sử dụng sự suy giảm nét";
// Decimate
topology.decimate.title = "Tinh giảm";
topology.decimate.title.help = "Giảm số lượng đa giác bằng cách cố gắng giữ lại càng nhiều chi tiết càng tốt.

Tính năng này có thể hữu ích nếu bạn muốn xuất để in 3D.
Tuy nhiên, bạn có thể không nên sử dụng nếu muốn tiếp tục điêu khắc trên đó, vì nó có thể tạo ra các tam giác không đều.

Lưu ý rằng khu vực bị che sẽ không bị tinh giảm.";
// Synonym: Simplify (Decimate reduce the number of triangles/quads while retaining details as much as possible)
topology.decimate = "Tinh giảm";
topology.decimatePaintWeight = "Bảo tồn vẽ";
topology.decimatePaintWeight.help = "Giá trị cao hơn sẽ cố gắng bảo vệ việc vẽ.

Đặt giá trị này thành 0 nếu bạn không quan tâm đến việc vẽ.";
topology.decimateUniform = "Mặt đồng nhất";
topology.decimateUniform.help = "Giá trị cao hơn sẽ xuất ra các tam giác có kích thước tương tự.";
topology.decimatePreserveBorders = "Bảo vệ đường viền";
topology.decimatePreserveBorders.help = "Không giảm số lượng biên của màng lưới.";
// Target a certain number of triangles, faces and vertices
topology.target.triangles = "Hướng đến hình tam giác";
topology.target.faces = "Hướng đến các mặt";
topology.target.quads = "Hướng đến hình tứ giác";
topology.target.points = "Hướng đến các điểm";
// Quad remesher
topology.qremesh = "Tái định hình tứ giác";
topology.qremesh.angle = "Góc gấp nếp";
topology.qremesh.border = "Giữ nguyên biên giới";
topology.qremesh.onlyQuad = "Chỉ tứ giác";
topology.qremesh.hole = "Lấp đầy lỗ tối đa";
topology.qremesh.hole.help = "Thuật toán đôi khi có thể tạo ra các lỗ không mong muốn.

Nếu một lỗ có số đỉnh ít hơn giá trị này, nó sẽ được lấp đầy.";

// Unwrapping means compute UV (texture coordinates), with uvs you can appliy (wrap) a texture onto the model
topology.uv.title = "Unwrap UV";
// UV Unwrap but as a Verb
topology.uv.unwrap = "Giải khối";
// The operation can be very slow
topology.uv.atlas.warning = "Có thể rất chậm, hướng đến <100k đỉnh!";
// Handles are topological holes (synonym: genus, hole)
topology.uv.bff.warning = "Có thể có trùng lặp nếu lưới có tay cầm!";
// Solo patch
topology.uv.bff.seamless = "Mảnh vá không đường nối";
topology.uv.bff.seamless.help = "Tùy chọn này có thể giới thiệu sự sai lệch lớn.

Thông thường, nó có thể được sử dụng khi các nhóm mặt được thiết lập cẩn thận.";
// Synonym: Point count? Singularity count ?
topology.uv.bff.cones = "Số lượng nón";
topology.uv.bff.help = "Giá trị cao hơn sẽ giảm biến dạng cho các đối tượng phức tạp.

Giá trị cao hơn sẽ đồng nghĩa thời gian tính toán dài hơn.";
topology.uv.delete = "Xóa UVs";

// Transfer the vertex painting in the texture, bake means "create texture (from mesh data)"
topology.bake.title = "Nướng";
// Bake here means "create texture (from mesh data)"
topology.bake.title.help = "Nướng bánh kết cấu sẽ tạo ra kết cấu bằng cách chiếu các vật thể khác có thể nhìn thấy trong cảnh.

Đây là quy trình làm bánh tiêu biểu:
• Bạn có một lưới với chi tiết tinh và bức tranh
• Sao chép nó
• Giảm nó (đặt `Bảo tồn tranh` thành 0!)
• Mở gói UV nó
• Nướng nó!

Bây giờ bạn nên có một lưới độ phân giải thấp giữ hầu hết các bức tranh và chi tiết của đối tượng trước đó.

Sau khi thực hiện, màu sắc đỉnh sẽ được chuyển sang một lớp mới bị vô hiệu hóa, để nó bị bỏ qua thay vì nhân với kết cấu có màu.

Để chọn đối tượng nào được sử dụng cho quá trình baking, các logic sau đây sẽ được áp dụng:
- tất cả các đối tượng được chọn và đối tượng được chọn chính sẽ được baking (được làm nổi bật mạnh nhất trong menu cảnh)
- nếu chỉ có một đối tượng được chọn, thì Nomad sẽ xem xét tất cả các đối tượng thấy được
- nếu tất cả các đối tượng đều bị ẩn (ví dụ bằng cách sử dụng Solo), thì toàn bộ cảnh sẽ được tính đến";
// Bake here means "create texture (from mesh data)"
topology.bake.self = "Từ chính nó";
// Bake here means "create texture (from another mesh data)"
topology.bake.other = "Từ độ phân giải cao";
topology.bake.resolution = "Độ phân giải";
// Cage is a specific term, synonyom: "Bake offset"
topology.bake.offset = "Dịch chuyển tia";
topology.bake.radius = "Bán kính khung lưới";
// Bake opacity (from mask data)
topology.bake.opacityFromMask = "Mặt nạ -> Độ mờ đục";
topology.bake.backup = "Sao lưu";

// project a high resolution mesh details onto another
topology.reproject.title = "Chiếu lại";
topology.reproject.title.help = "Chi tiết điêu khắc dự đoán, hội họa và lớp từ các đối tượng có thể thấy gần nhất.

Giải pháp này hầu hết được áp dụng trên một lưới có độ phân giải cao, thường có topologi sạch.";
// tweaking value
topology.reproject.rayBias = "Sai lệch tia";
topology.reproject.rayBias.help = "Hai phương pháp được sử dụng cho tái chiếu:
• gần nhất: điểm gần nhất trên bề mặt
• tia: điểm giao nhau qua hướng pháp tuyến

Giá trị độ lệch cao hơn sẽ ưu tiên giao điểm của tia thay vì bề mặt gần nhất.";
topology.reproject.normalOffset = "Độ lệch bình thường";
topology.reproject.shpereCast = "Dự phòng ném hình cầu";
topology.reproject.shpereCast.help = "Nếu tái chiếu tia bình thường thất bại, Nomad sẽ quay lại giao điểm bề mặt gần nhất.";
// number of iteration the algorithm will take
topology.reproject.iterations = "Các lần lặp lại";
topology.reproject.relax = "Thư giãn";
topology.reproject.relax.help = "Thư giãn nên được ưu tiên khi lưới là poly thấp.";
topology.reproject.layers.help = "Chuyển các lớp khác lên lưới được chọn.";

topology.manifold = "Đa dạng hóa";
topology.nonManifold = "Không đa dạng hóa";
topology.manifold.clean = "Làm sạch";
topology.manifold.collapse = "Xóa các mặt nhỏ";
topology.manifold.title = "Cưỡng chế Đa dạng hóa";
topology.manifold.title.help = "Cố gắng làm sạch các cạnh không đa dạng hóa.

Nó có thể hữu ích cho các phần mềm ngoài hỗ trợ lưu không có các cạnh có hơn 2 mặt chung.";

// Reset key-bindings/shortcuts
binding.reset = "Đặt lại các ràng buộc";
// Add node in a sync mode (synchronize instance)
binding.addSync = "Đồng bộ";
binding.addSync.help = "Theo mặc định, nó sẽ sử dụng giá trị đồng bộ được thiết lập trong menu cảnh.";
// Binding option
binding.context.toggle = "Chuyển đổi ngữ cảnh";
binding.toggleTool = "Chuyển đổi các phím tắt công cụ";
binding.toggleTool.help = "Khi sử dụng một trong các phím tắt công cụ, công cụ trước đó sẽ được chọn nếu công cụ phím tắt hiện tại đang hoạt động.";
// When the key is tap once, the value will be toggled
binding.toggleTap = "Chuyển đổi phím tắt khi nhấn phím";
// The binding force camera movement
binding.forceCamera = "Cưỡng ép camera";
binding.forceCamera.help = "Cưỡng ép tương tác về máy ảnh trong trường hợp có xung đột với ràng buộc khác.

Điều này thường xảy ra nếu cùng một ràng buộc được gán cho phím tắt công cụ hoặc Thêm/Trừ.";
// Same as Color Picker but it pick the material (color, roughness, metalness, etc)
binding.pickMaterial = "Chọn Vật Liệu";
// Same as Color Picker but it pick the material (color, roughness, metalness, etc)
binding.pickFaceGroup = "Chọn Nhóm Mặt";
// Edit the tool brush size/radius
binding.editRadius = "Bán Kính Công Cụ";
// Edit the tool brush size/radius
binding.editIntensity = "Cường Độ Công Cụ";
// Controller dead zone
binding.joystick = "Joystick";
binding.controller.deadZone = "Vùng chết của cần điều khiển";
binding.controller.deadZone.help = "Tăng giá trị này nếu camera vẫn di chuyển ngay cả khi cần điều khiển không được chạm vào.";
// Snap the camera
binding.view.front = "Hiển thị Phía trước";
binding.view.left = "Hiển thị Bên trái";
binding.view.top = "Hiển thị Phía trên";
// Move/Translate the view
binding.pan.left = "Di chuyển Sang trái";
binding.pan.right = "Di chuyển Sang phải";
binding.pan.forward = "Di chuyển Về phía trước";
binding.pan.backward = "Di chuyển Lùi lại";
binding.pan.up = "Di chuyển Lên trên";
binding.pan.down = "Pan Xuống";
// Snap the view (while rotating)
binding.snapViewOnRotate = "Chụp nhìn (khi quay)";
// Open a Nomad internal project (replace current scene)
binding.project.open = "Mở (dự án)";
// Open a Nomad internal project (add it to the current scene)
binding.project.add = "Thêm (dự án)";
// Select all the objects in the scene
binding.selectAll = "Chọn Tất Cả";
// Rotate environment and the lighting
binding.rotateLighting = "Quay ánh sáng";
// The Camera pivot is the point around which the camera rotates
binding.updatePivot = "Cập nhật xoay trục...";

quadremesh.adaptQuadCount = "Số Lượng Tứ Giác Thích Ứng";
quadremesh.curvatureAdaptivness = "Kích Thước Thích Ứng";
quadremesh.curvatureAdaptivness.help = "Ở 100%, kích thước tứ giác sẽ thay đổi tùy theo độ cong của đối tượng, cho phép tứ giác nhỏ hơn trên độ cong cao.
Ở 0%, kích thước tứ giác sẽ đồng nhất.";
quadremesh.useVertexColors = "Bảo Tồn Vẽ";
quadremesh.autoDetectHardEdges = "Tự Động Phát Hiện Cạnh Cứng";
quadremesh.autoDetectHardEdges.short = "Cạnh Cứng";
quadremesh.reprojectVertex = "Chiếu lại Điểm Đỉnh";
quadremesh.reprojectVertex.short = "Chiếu lại Điểm Đỉnh";
quadremesh.reprojectVertex.label = "Khi được bật, Nomad sẽ chiếu lại vị trí trên lưới trước đó.

Chú ý rằng nếu lưới có lớp, việc chiếu lại luôn được sử dụng.";

// Privacy policy
privacyPolicy.title = "Chính Sách Bảo Mật";
privacyPolicy.reject = "Từ chối";
// Hexanomad is the company name
privacyPolicy = "Hexanomad không thu thập bất kỳ dữ liệu nào từ Nomad Sculpt.";

sonar.disconnect = "Ngắt Kết Nối SonarPen";
sonar.connect = "Kết Nối SonarPen";
sonar.connect.confirm = "Kết Nối SonarPen?";
sonar.connect.confirm.warning = "Sonar Pen sẽ sử dụng micro (phản hồi âm thanh) để phát hiện áp lực của bút.";

// Color disc mode
widget.color.disc = "Đĩa";
widget.color.ring = "Vòng";
widget.color.square = "Vuông";

nomad.mainFolder = "Thư mục chính của Nomad";
nomad.mainFolder.warning = "Tệp không bị chạm tới.
Chúng không bị sao chép, xóa hoặc di chuyển.";
nomad.mainFolder.error = "Sau khi bạn chọn có, Nomad sẽ đóng và bạn có thể khởi động lại nó một cách đơn giản.";

license.title = "Giấy phép";
license.retry = "Thử lại";
license.key = "Khóa giấy phép";
license.activate = "Kích hoạt giấy phép";
// ----------------------------------------------
license.newest = "Phiên bản mới có sẵn!";
license.encrypt.error = "Không thể mã hóa!";
// ----------------------------------------------
license.grace = "Ngoại tuyến - Thời gian ân hạn còn lại:";
license.grace.hours = "giờ";
license.grace.days = "ngày";
// ----------------------------------------------
license.portal.title = "Người dùng hiện tại";
license.portal.label = "Cổng giấy phép";
// ----------------------------------------------
license.checkout.title = "Người dùng mới";
license.checkout.label = "Mua Nomad";
// ----------------------------------------------
license.device.error = "Không thể lấy ID thiết bị.";
license.device.mismatch = "ID thiết bị không khớp!";
// ----------------------------------------------
license.error429 = "Yêu cầu quá nhiều (đợi).";
// ----------------------------------------------
license.validate.error404 = "Không tìm thấy chìa khóa giấy phép.";
license.validate.error422 = "Thực thể không xử lý được.";
// ----------------------------------------------
license.activate.error403 = "Số lượng thiết bị tối đa đã đạt!
Bạn có thể hủy kích hoạt thiết bị khác trên cổng giấy phép của mình.";
license.activate.error404 = "Không tìm thấy chìa khóa giấy phép.";
license.activate.error422 = "Thực thể không xử lý được.";
// ----------------------------------------------
// version
version.update = "Cập nhật có sẵn!";
version.restore = "Khôi phục mua hàng";
version.buyWeb = "Phiên bản Web chỉ là bản demo";
version.buyFull = "Nâng cấp lên phiên bản đầy đủ";
// ----------------------------------------------
// QuadRemesh
version.qr.unlock = "Mở khóa (mua, khôi phục, thử nghiệm)";
version.qr.desktop = "Trên phiên bản máy tính, QuadRemesher được phân phối bởi Hexanomad, nhưng Hexanomad không xử lý việc bán hoặc cấp phép. 
Quản lý giấy phép được thực hiện bởi Exoside.";
version.qr.buy = "Mua";
version.qr.promo = "
Quad Remesher là một thuật toán xuất lưới ưu tiên dạng tứ giác.
Phân bổ ô tứ giác sẽ cố gắng theo sự cong tự nhiên của vật thể.

Thuật toán cũng có thể điều chỉnh kích thước ô tứ giác tùy theo độ cong cục bộ.

Bạn cũng có thể hướng dẫn kết quả tô pô bằng cách:

• Nhóm Mặt $0 (biên của chúng cần được làm mịn để có kết quả tốt hơn!)

• Đối xứng Phẳng X/Y/Z $1

• Hướng Dẫn Đường Cong $2

• Vẽ Độ Dày $3

Quad Remesher được phát triển bởi https://exoside.com/.";
// ----------------------------------------------
version.trialLayer = "Phiên bản dùng thử: 1 lớp trên mỗi đối tượng";
version.trialNoExport = "Phiên bản dùng thử: Không có xuất";
// ----------------------------------------------
version.fullFeatures = "• Mua một lần
• Hoàn tác/làm lại không giới hạn
• Các lớp không giới hạn
• Xuất & nhập khẩu";
// ----------------------------------------------
version.demo.purpose = "Phiên bản này được tạo ra đặc biệt cho mục đích trình diễn.";
version.demo.disable = "Tính năng chưa được kích hoạt cho bản trình diễn.";
// ----------------------------------------------
version.demo = "Kiểm tra thử";
version.demo.sculpt = "Điêu khắc";
version.demo.sculpt.help = "Tất cả các cọ đều có sẵn nhưng bạn không thể lưu hoặc xuất.

Chế độ này chủ yếu dành cho việc thử nghiệm các cọ hoặc kiểm tra hỗ trợ áp lực.

Các tính năng khác cũng có thể bị giới hạn (lịch sử, lớp).";
version.demo.file = "Nhập và xuất";
version.demo.file.help = "Bạn có thể nhập và xuất mô hình nhưng các cọ điêu khắc bị vô hiệu hóa.

Chế độ này chủ yếu dành cho người dùng di động không thể mở dự án .nom lớn do giới hạn bộ nhớ di động.";
// ----------------------------------------------
// app store main page
store.name = "Nomad Sculpt";
store.headline = "Điêu khắc, vẽ và tạo trong 3D";
store.tag = "điêu khắc, 3d, du mục, sơn, tạo mẫu";
// ----------------------------------------------
store.description.sculpt = "• Công cụ điêu khắc
Clay, làm phẳng, làm mịn, mặt nạ và nhiều bàn chải khác sẽ cho phép bạn định hình sáng tạo của mình.
Bạn cũng có thể sử dụng công cụ cắt boolean viền với lasso, hình chữ nhật và các hình dạng khác để phục vụ mục đích bề mặt cứng.";
// ----------------------------------------------
store.description.stroke = "• Tùy chỉnh nét
Sự mờ dần, alpha, lát ô, áp lực bút chì và các tham số nét khác có thể được tùy chỉnh.
Bạn cũng có thể lưu và tải dụng cụ cài đặt trước của mình.";
// ----------------------------------------------
store.description.paint = "• Công cụ vẽ
Vẽ đỉnh với màu sắc, độ mờ và độ kim loại.
Bạn cũng có thể dễ dàng quản lý tất cả các thiết lập vật liệu của mình.";
// ----------------------------------------------
store.description.layer = "• Tầng lớp
Ghi lại các thao tác điêu khắc và vẽ của bạn trong các tầng lớp riêng biệt để dễ dàng lặp lại trong quá trình tạo.
Cả các thay đổi về điêu khắc và vẽ đều được ghi lại.";
// ----------------------------------------------
store.description.multires = "• Điêu khắc đa độ phân giải
Di chuyển qua lại giữa nhiều độ phân giải của lưới của bạn để có luồng công việc linh hoạt.";
// ----------------------------------------------
store.description.voxel = "• Trộn lại tế bào
Nhanh chóng trộn lại lưới của bạn để có được mức độ chi tiết đồng đều.
Nó có thể được sử dụng để nhanh chóng phác thảo một hình dạng thô vào đầu quá trình tạo.";
// ----------------------------------------------
store.description.dynamic = "• Đồ hình động
Tinh chỉnh cục bộ mesh của bạn dưới cọ để có mức độ chi tiết tự động.
Bạn thậm chí có thể giữ các lớp của mình, vì chúng sẽ được cập nhật tự động!";
// ----------------------------------------------
store.description.topology = "• Giảm số
Giảm số lượng đa giác bằng cách giữ càng nhiều chi tiết càng tốt.";
// ----------------------------------------------
store.description.group = "• Nhóm mặt
Phân đoạn lưới của bạn thành các nhóm phụ với công cụ nhóm mặt.";
// ----------------------------------------------
store.description.unwrap = "• Khai triển UV tự động
Công cụ khai triển UV tự động có thể sử dụng các nhóm mặt để kiểm soát quá trình khai triển.";
// ----------------------------------------------
store.description.baking = "• Chế biến
Bạn có thể chuyển dữ liệu đỉnh như màu sắc, độ mờ, độ kim loại và chi tiết nhỏ thành kết cấu.
Bạn cũng có thể làm ngược lại, chuyển dữ liệu kết cấu thành dữ liệu đỉnh hoặc tầng lớp.";
// ----------------------------------------------
store.description.primitive = "• Hình dạng nguyên thủy
Xy lanh, torus, ống, máy tiện và các hình dạng nguyên thủy khác có thể được sử dụng để nhanh chóng bắt đầu hình dạng mới từ đầu.";
// ----------------------------------------------
store.description.rendering = "• Kết xuất PBR
Kết xuất PBR đẹp mặc định, với ánh sáng và bóng đổ.
Bạn luôn có thể chuyển sang MatCap để có bóng mờ chuẩn hơn cho mục đích điêu khắc.";
// ----------------------------------------------
store.description.postprocess = "• Xử lý hậu kỳ
Phản chiếu không gian màn hình, độ sâu trường ảnh, tắt bóng môi trường, ánh xạ tông màu, v.v";
// ----------------------------------------------
store.description.files = "• Xuất và nhập
Các định dạng được hỗ trợ bao gồm tệp tin glTF, OBJ, STL hoặc PLY.";
// ----------------------------------------------
store.description.interface = "• Giao diện
Giao diện dễ sử dụng, thiết kế cho trải nghiệm di động.
Cũng có thể tuỳ chỉnh!";
// ----------------------------------------------
store.description.remesher = "• Quad Remesher (chỉ mua trong ứng dụng riêng)
Tự động tạo lại lưới của đối tượng với lưới chủ yếu là tứ giác theo đường cong lưới.
Nó hỗ trợ các hướng dẫn, nhóm mặt và vẽ mật độ.";
// ----------------------------------------------