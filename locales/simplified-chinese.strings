// Generic confirmation (Confirm? [yes/ok/delete, cancel])
confirm = "请确认是否操作？";
// Answer to a question (Are you sure you want to do that? [yes, cancel])
confirm.yes = "确认";
// The generic ok in a confirm box (The next operation is dangerous. [ok, cancel])
confirm.ok = "好";
// Cancel something after being asked (Question? [answer, cancel])
confirm.cancel = "取消";

// Name of an item (object, tool, etc)
item.name = "重命名";
// Add a new item (object, tool, etc)
item.new = "创建";
// Rename an item (object, tool, etc)
item.rename = "重命名";
// Add a new item (object, tool, project, etc)
item.add = "添加";
// Save an item (object, tool, etc)
item.save = "保存";
item.save.confirm = "确认保存 $0？";
// Reload last save of an item (object, tool, etc)
item.lastSave = "上次保存";
// Reload last save of an item (object, tool, etc)
item.lastSave.confirm = "要加载上一次保存的文件吗？";
// Reset an item to its initial value (object, tool, etc)
item.reset = "重置";
item.reset.confirm = "确认要重置吗？";
// Make an item instance, similar to clone but keeps the underlying geometry (Synonym: link? soft clone?)
item.instance = "实例";
// Uninstance the object, make the object real
item.uninstance = "去实例";
// Clone an item (object, tool, etc)
item.clone = "克隆";
// Delete an item (object, tool, etc)
item.delete = "删除";
item.delete.confirm = "请确认是否删除？";
item.delete.confirm.yes = "确认删除";
// When we delete the item but the image is used somewhere
item.delete.imageUsed = "该项在以下工具中使用：";
// Convert the item type (mesh, light) to a simple Node type
item.toNode = "转为节点";
// Item visibility (object, layer, etc)
item.visible = "可见";
// Show an item (object, layer, etc)
item.show = "显示";
// Hide an item (object, layer, etc)
item.hide = "隐藏";
// Select an item (object, layer, etc)
item.select = "选择";
// Unselect an item (object, layer, etc)
item.unselect = "取消选中";
// Merge an item with another one below (layer)
item.mergeDown = "向下合并";
// The order of an item in a list
item.order = "顺序";
// Focus on previous item
item.previous = "上一项";
// Focus on next item
item.next = "下一步";
// The item is locked (either it cannot be selected, edited, or we preserve its details)
item.lock = "锁定";

// Three-state toggle button (Auto, Off, On)
toggle.on = "开";
// Three-state toggle button (Auto, Off, On)
toggle.off = "关";
// Three-state toggle button (Auto, Off, On)
toggle.auto = "自动";

// When you launch the app and we need to reprocess some resource thumbnails
loading.reprocess = "正在载入数据，请稍等... ($0/$1)

$2";
loading.reprocess.cancel = "Skip thumbnails generation?";

// Color of an object
material.color = "颜色";
// Defines how blurry or sharp the reflection on a material is (opposite of glossiness)
material.roughness = "粗糙度";
// Defines how blurry or sharp the reflection on a material is (opposite of roughness)
material.glossiness = "光泽度";
// Whether the material is a metal or not
material.metalness = "金属度";
// How much light a surface will reflect
material.specular = "高光亮度";
// Light that the surface can emit (glow)
material.emissive = "自发光";
// Normal map (synonym: detail, bump)
material.normal = "正常";
// Ambient Occlusion (AO)
material.occlusion = "环境光遮挡";
// Textures, basically images wrapped on models (synonym: Maps, Texture maps)
material.textures = "纹理";

// Minify
about.minify = "全屏显示";
about.minify.help = "在设备支持的情况下，可以通过四指触碰屏幕来开关全屏显示";
// Turntable will rotate the whole scene on itself (as it if was on a turntable)
about.turntable = "旋转展示";
// Make the entire scene turn around (speed of the animation)
about.turntableSpeed = "旋转速度";
// Stuffs that I used to make the app
about.credits = "鸣谢";
// Link to open source projects that I used for the app
about.credits.openSource = "开源项目";
// Only translate the &
about.credits.arts = "MatCap与HDRI";
// Change languages of the app
about.languages = "用户语言";
about.languages.help = "翻译文件可在 $0获得";
// Link to the App Website
about.website = "官方网站";
// Link to the App Forum
about.forum = "交流论坛";
// Link to the App Manual
about.manual = "使用指引";
// Link to the App Email
about.mail = "联系邮箱";
// Link to the App Twitter account
about.twitter = "Twitter";
// Link to the App Instagram account
about.instagram = "Instagram";
// Link to the App Facebook account
about.facebook = "Facebook";
// Link to the App Discord account
about.discord = "Discord";

// Error when an algorithm needs the object to have an hole (usually to fill it)
alert.hole.nothing = "该对象没有孔洞！";
// Visibility of the object is off (but should be on)
alert.shape.notVisible = "当前对象不可见！";
// The user tried to trim an object but the selected region didn't touch the object
alert.trim.nothing = "没有可裁切的对象。";
// The user tried to trim an object but the selected region completely encompassed the object
alert.trim.full = "不可裁剪：选择区域完全包含了被裁减对象";
// In order to extract something, the mesh needs to have painted mask
alert.mask.noExtract = "没有可提取对象！";
// In order to split something, the mesh needs to have painted mask
alert.mask.noSplit = "没有可分离对象！";
// List of disabled features when View Mode is selected
alert.view.disabled = "在浏览模式下禁用的功能：";
// Primitive Widgets are small ui stuffs in the viewport that the user can interact with to modify an object
alert.view.disabled.widgetPrimitive = "编辑锚点";
// The object needs to have two parts disconnected
alert.separate.fail = "该对象只有一部分，所以无法分开！";
// Remesh is when you create a new topology (mesh) on an object
alert.voxelRemesh.success = "网格重构成功！";
alert.voxelRemesh.empty = "网格重构失败，因为结果并未产生面。";
// Should not happen or very rarely, input here is an object
alert.voxelRemesh.invalidInput = "输入无效！";
// Helper popup to tell the users the object will cloned
alert.matrix.clone = "将复制此对象";
// Helper popup to tell the users the object will cloned
alert.matrix.instance = "将实例此对象";
// A pivot refers the gizmo 3d position, this mode means we are moving the pivot
alert.gizmo.editPivot = "编辑轴心模式";
// A pivot refers the gizmo 3d position
alert.gizmo.editObject = "编辑对象模式";
// See Glossary (DynTopo)
alert.dynamic.enable = "Dynamic topology ON";
// See Glossary (DynTopo)
alert.dynamic.disable = "Dynamic topology OFF";
alert.colorPicker = "用手指在对象上拖动选择一个颜色";
// Transform mode is when the user can move the reference (image in the background) with its two fingers
alert.backgroundTransform = "轻点即可退出切换模式";
// Edit the symmetry plane with the gizmo
alert.editSymmetry = "Simple tap to exit edit symmetry mode.";
alert.view.reset = "重置视图";
// Snap the view to the nearest aligned 90° angle
alert.view.snap = "旋转视图";
// Show the painted mask on the mesh
alert.mask.show = "显示遮罩";
// Hide the painted mask on the mesh
alert.mask.hide = "隐藏遮罩";
// Selection refers to the objects that are currently selected
alert.selection.lock = "锁定所选项";
// Selection refers to the objects that are currently selected
alert.selection.unlock = "解锁所选项";
// Hide the objects that are not selected
alert.selection.isolate = "隐藏未所选项";
// Show the objects that are hidden
alert.selection.showAll = "显示全部";
// Project quick saving
alert.quickSave = "正在保存...";
// Painting on the object was hidden but the user did paint the object
alert.forceShowPainting.fill = "显示图层绘画已打开";
// Painting on the object was hidden but the user started to paint on the object
alert.forceShowPainting.tool = "显示绘画，该对象已被画";
// See Glossary (Multiresolution)
alert.multiresLost = "高分辨率将丢失！";
// The user is starting an operation that can lead to a crash
alert.range.warning = "过高的分辨率将会占用大量内存！";
// Autosave popup
alert.autoSave.auto = "将在$0秒后自动保存";
// The selected object doesn't have any layers
alert.needLayer = "使用当前工具需要激活一个图层。";
// The user decides to hide the painting on the objects
alert.paintingHidden = "绘画已被隐藏，请在设置面板里将其打开。";
// The selected object doesn't have any layers
alert.noPartialWireframe = "打开线框显示时，局部绘画将被禁用。";
// The user has selected a tool that is more intuitive to use when the camera is in orthographic mode
alert.shapeOrthographic = "如果您想在使用投影仪时避免透视偏差，建议在相机设置里切换到正交视图。";
// Trial version has a limited number of undo
alert.state.trial = "试用版本的撤销次数已用完。";

background = "背景";
// A flat color will be displayed in the background of the scene
background.color = "颜色";
// The environment (HDRI) will be displayed in the background
background.environment = "环境";
background.blur = "模糊";
background.exposure = "曝光";

// Image that the artist uses as a reference
background.imageEnable = "参考图像";
// The image will be displayed in overlay (used as a reference by the artist)
background.imageOverlay = "覆盖";
// Opposite of transparency (Alpha)
background.imageAlpha = "不透明度";
background.imageReset = "重置参数";
background.imageTransform = "变换";
// X screen coordinate of the image reference
background.imageX = "X轴位置";
// Y screen coordinate of the image reference
background.imageY = "Y轴位置";
// Rotation of the reference image
background.imageRotation = "旋转";
// Scale of the reference image
background.imageScale = "缩放";

// Camera (point of view in 3d)
camera = "相机";
// Copy the views
camera.updateView = "更新视角？";
// Add a new camera
camera.addView = "添加视角";
// Focus on the camera
camera.focus = "聚焦";
// Add on the camera camera
camera.focusOn = "聚焦在$0";
// Camera projection, Orthographic or Perspective
camera.projection = "视图";
// Camera projection, Orthographic or Perspective
camera.projection.orthographic = "正交视图";
// Camera projection, Orthographic or Perspective
camera.projection.perspective = "透视视图";
// camera Vertical Field of View
camera.fov = "垂直视角";
// Camera Field of View hint
camera.focal = "聚焦$0mm(35mm传感器)";
// Rotation mode controls how the user will interact with the camera rotation
camera.rotation = "旋转";
// Camera interaction mode, 2 degrees of freedom (synonym: Orbit)
camera.rotation.orbit = "转盘";
// Camera interaction mode, 3 degrees of freedom
camera.rotation.trackball = "轨迹球";
camera.rotation.trackball.help = "轨迹球提供了更多的自由度，让您可以用两个手指滚动相机。";
// Camera interaction mode, 1st person view
camera.firstPerson = "第一人称视角";
// How sensitive the camera is (synonym: sensitivity)
camera.speed = "相机速度";
// Camera rotation sensitivity
camera.speed.rotation = "旋转";
// Camera panning sensitivity
camera.speed.panning = "平移";
// Camera zooming sensitivity
camera.speed.zooming = "缩放";
// Reset camera position
camera.resetView = "重置视图";
// Align the view (snap to nearest 90° angle)
camera.snapView = "固定视图";
// Warning (camera is snapped and it switched to orthographic)
camera.snapOrthographic.warning = "相机视图已调正（正交）";
// Switch to orthographic view when the view is snapped
camera.snapOrthographic = "切换为正交视图";
camera.snapOrthographic.help = "此功能也适用于角落的方位视图。";
// The Camera pivot is the point around which the camera rotates
camera.pivot = "Update pivot...";
// When we double tap on the object with the finger/stylus
camera.doubleTapMesh = "双击对象";
// When we double tap on the background with the finger/stylus
camera.doubleTapBackground = "双击背景";
// When we double tap on the background with the finger/stylus
camera.doubleTapBackgroundFocus.toggle = "切换";
// Focus on the selection
camera.doubleTapBackgroundFocus.selection = "选区";
// Focus on the entire scene
camera.doubleTapBackgroundFocus.scene = "场景";
// When double tapping with the finger/stylus, the camera pivot will be updated
camera.doubleTapPivot = "When double tapping";
camera.doubleTapPivot.help = "双击对象表面以更改旋转轴心。";
// Allow new pivot even when zooming outside the object surface
camera.airPivot = "Allow air pivot";
camera.airPivot.help = "即使缩小到对象外也允许新建轴心。";
// Update the pivot when you start interacting with the camera
camera.autoPivot = "When camera starts moving";
camera.autoPivot.help = "双指移动相机后，轴会随之移动。";
// Move the camera so that it focus on the intersection point
camera.doubleTapFocus = "聚焦";
camera.doubleTapFocus.help = "双击物体表面后视图中心将移动至该点。";

// Toolbox context (when expanded), multiple objects are selected
context.multiselection = "选择多项";
// There is 0 nodes/items selected
context.noSelection = "无选中项";

// Curve type, presets lets the user chooses between predefined curves
curve.preset = "预设";
// Curve type, https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline
curve.catmull = "Catmull-Rom";
// Curve curve, https://en.wikipedia.org/wiki/Spline_(mathematics)
curve.spline = "样条";
// Display the falloff curve in a symmetric way
curve.symmetric.help = "Display the falloff in a symmetric way.

This option is only a visual cue, it doesn't impact the falloff itself";

// set the desired FPS (frame per second, refresh rate)
debug.targetFPS = "Target FPS";
debug.targetFPS.help = "When disabled, the default value means it will sync with the display's refresh rate.";

// Debug option, the newly created primitives will contains texture coordinates (UVs)
debug.uvPrimitive = "保存primitive UV";
debug.uvPrimitive.warning = "如果您不再需要UV选项，请禁用该选项以释放更多内存。";
debug.uvPrimitive.help = "目前仅支持立方体和球体，将会在未来支持更多种类。";
// Debug option, Normalize means transforming the data so that it fits in [0-1] the range
debug.uvNormalize = "规格化UV选项";
debug.uvNormalize.help = "Nomad将会让所有选定面的UV适配 [0-1] 纹理空间。";
// Debug option, BFF stands for Boundary First Flattening (no need to translate)
debug.uvBFF = "启用BFF UV";
debug.uvBFF.help = "使用BFF算法来展平UV。

请注意，如果对象的拓扑网格与正方体或球体有很大差别的话，结果有可能会产生重叠。";
// Debug option, display an window with some debugging logs
debug.logs = "调试日志";
// Debug option, overrides the rendering to display the depth buffer
debug.heightmap = "高度图";
// Debug options, graphical stuffs
debug.graphics = "图形";
// Debug options, generate screenshots with size compatible with the iOS store
debug.thumbnails = "制作商店缩略图";

// Empty list: there is no projects
file.project.empty = "您还没有保存该项目！";
// The current opened project has some unsaved changes
file.project.unsaved = "更改未保存！";
// The user will loose its project's unsaved changes
file.project.loseUnsaved = "如不保存，您的更改将会丢失！";
// Indicates to the user that the project thumbnail corresponds to the last manual save
file.project.lastManualSave = "上一次手动保存的预览";
// The user is starting a new project but he won't be able to open the current project (because of trial version)
file.project.trialNoOpen = "这是试用版本，您将无法重新打开当前项目！";
// The user is trying to load a project but he can only reload the current opened project (because of trial version)
file.project.trialOnlyOpen = "这是试用版本，您只能打开当前项目！";

file.project = "项目";
// Save current project (or overwrite if the project has already been saved once)
file.project.save = "保存";
// E.g: Save "my_project"?
file.project.save.confirm = "确认保存 $0？";
// Save to another project (either new one or overriding existing one)
file.project.saveAs = "另存为";
// E.g: Overwrite "my_other_project"?
file.project.saveAs.confirm = "确认覆盖 $0？";
// Open a project
file.project.open = "打开";
// E.g: Open "my_project"?
file.project.open.confirm = "确认打开 $0？";
// Load another project and add/append all its data to the current scene
file.project.add = "添加到场景";
// E;g: Add "my_other_project" to the scene?
file.project.add.confirm = "确认添加 $0 至当前项目？";
// Reset the scene and create a new project
file.project.new = "新建";
file.project.new.confirm = "确认新建场景？";
// Delete a project (not corresponding to the currently opened one)
file.project.delete.confirm = "确认删除 $0？";
// Delete a project (corresponding to the currently opened one)
file.project.delete.confirmActive = "删除 $0？

这是当前打开的项目！";

// Auto save section
file.project.autoSave = "自动保存";
file.project.autoSave.confirm = "确定要禁用自动保存吗？";
file.project.autoSave.help = "每隔一段时间将您的项目另存到一个单独的文件。
这个自动保存文件可以在以下目录找到：

$0";
// Interval in minutes in which the auto save popup will appear
file.project.autoSave.popup = "自动提醒";
// In minutes
file.project.autoSave.minutes = "自动保存间隔";
// Delete the current autoSave data
file.project.autoSave.delete = "删除自动保存的数据";

// Load interface preference settings when opening a scene file
file.load.guiSettings = "加载项目GUI设置";
file.load.guiSettings.help = "当您打开或导入项目文件时，同时加载项目中包含的GUI设置。";
// OBJ have "groups" and "objects", by default groups are ignored, use this option to consider groups as separate objects
file.load.objSplitByGroup = "按组拆分OBJ";
file.load.objSplitByGroup.help = "启用该选项后，Nomad会将OBJ文件的各个顶点组拆分为单独的对象。";
// Merge all the object layers at when loading a file (deleting them in the process)
file.load.mergeLayers = "合并图层";
// Ignore the textures present in the file to load
file.load.skipTextures = "忽略纹理";
// Do not fiddle with the object topology when loading the file
file.load.keepTopology = "保留拓扑";
file.load.keepTopology.help = "如果你不希望Nomad对导入的网格进行拓扑处理，请勾选此选项。

应用将不会：
- 重新排序顶点和面
- 删除重叠顶点和面
- 移除未使用顶点";
// If the object has more vertices than this value, then we won't attemp to reverse (multiresolution) the object
file.load.reverseVertices = "细分阈值";
file.load.reverseVertices.help = "为了节省内存，Nomad不保存较低像素版本的网格。

但是，如果顶点数量少于该阈值，则Nomad将重建较低像素版本的网格。";


// Configure imports option
file.importSettings = "导入选项";

// Import file section
file.import.title = "导入";
file.import.title.help = "支持导入的格式：
- Wavefront (.obj)
- glTF 2.0 (.glb .gltf)
- STL (.stl)";
// The user imports a scene file that will replace the current scene
file.import.open = "打开";
file.import.open.confirm = "确定导入新文件？";
// The user imports a scene file that will be added/appended the current scene
file.import.add = "添加到场景";
file.import.add.confirm = "确定添加新文件？";

// Export scene file
file.export.title = "导出";
file.export.title.help = "建议导出 glTF 格式，因为它比其他格式支持更多属性。";

// Export the current selected objects instead of the entire scene
file.onlySelection = "只导出选择部分";
file.onlySelection.help = "只导出当前选择部分，而不是整个场景。";
// Tries to generate quad (rectangle polygon) from triangles
file.convertToQuad = "转换为四边形网格";
file.convertToQuad.help = "通过将相邻的三角形合并的方式，将模型网格转换为四边形。";

// Whether we include the textures in the exported file
file.export.texture = "导出纹理";
// Baking means transfering/converting
file.export.texture.help = "此选项不会把Nomad里绘制的顶点颜色烘焙到贴图上。";
// Whether we include normals vector in the exported file
file.export.normal = "导出法线";
file.export.normal.help = "如想在其他软件上打开该文件，请勾选此选项。
Nomad总是忽略法线，因为它将重新计算它们。";

file.export.gltf = "导出 glTF 2.0";
// Whether we include layers in the exported file (see glossary for layer)
file.export.gltf.layer = "导出图层";
file.export.gltf.layer.help = "将图层作为变形体导出。官方支持glTF，所以它应该也能在其他软件上工作。";
// Whether we include painting of layers in the exported file (see glossary for layer)
file.export.gltf.layerPaint = "导出图层绘画";
file.export.gltf.layerPaint.help = "将导出图层绘画。其他软件不会读取该属性。";
// Whether the exported layer will use the non-standard Nomad encoding (smaller size)
file.export.gltf.layerNomad = "Nomad图层编码";
file.export.gltf.layerNomad.help = "以8位（而不是16位）写入绘画图层就可以导出较小的文件。

该编码方式使用绝对绘画，因此仅适用于Nomad。
在其他软件中打开此类型文件会导致结果错误，因为glTF要求相对编码。";
// Whether we include the vertex color in the exported file
file.export.gltf.color0 = "导出顶点颜色";
file.export.gltf.color0.help = "导出的是顶点颜色。这是来由glTF官方支持，所以它应该也能在其他软件上使用。";
// Whether we include the vertex roughness and vertex metalness in the exported file
file.export.gltf.color1 = "导出PBR绘画";
file.export.gltf.color1.help = "导出粗糙度、金属强度和蒙版绘制。这将被其他软件忽略。";

file.export.obj = "导出OBJ格式";
file.export.obj.warning = "图层和额外的绘画（粗糙度、金属强度和蒙版）将会丢失。";
// Whether we include the vertex color in the exported file
file.export.obj.colorAppend = "导出顶点颜色";
file.export.obj.colorAppend.help = "给顶点添加颜色信息。

只有部分3D软件能够识别。";

file.export.stl = "导出STL格式";
file.export.stl.warning = "图层和额外的绘画（粗糙度、金属强度和蒙版）将会丢失。";
// Whether we include the vertex color in the exported file
file.export.stl.color = "导出顶点颜色";
file.export.stl.color.help = "只有部分3D软件能够识别。";
file.export.stl.ascii = "默认情况下，格式为二进制。

您可以选择导出为文本格式（ASCII），但文件会更大。";

// Advanced settings
settings.advanced = "高级设置";
// Means that all these options will be resetted when the app restarts
settings.notSaved = "这些选项不会在设置中保存。";
settings.reset.title = "设置";
settings.reset.title.help = "这将重置应用的偏好设置。

以下资源会单独保存，因此不会被重置：
- 项目
- 键位绑定
- 工具预设
- HDR 环境
- 材质快照
- Alpha
- 纹理（笔刷）
- 参考图像

注意：任何与项目关联的任何设置都会被保留，例如灯光、后期处理、相机视图等";

// Reset preference settings button
settings.reset = "恢复默认设置";
settings.reset.confirm = "确定要重置偏好设置吗？";

// Render a screenshot of the scene
file.render = "渲染";
// If we include the App Interface in the exported screenshot
file.render.showInterface = "显示界面";
// Resolution ratio of the exported screenshot
file.render.renderRatio = "渲染分辨率";
file.render.renderRatio.help = "当该值为1.0时，软件渲染的图像分辨率保持不变。

如果你不能以特定的分辨率渲染，请使用这个选项（因为缺乏内存而崩溃）。";
// Desired size of the exported screenshot
file.render.size = "渲染尺寸";
// Desired size of the exported screenshot (custom vs predefined size)
file.render.size.custom = "自定";
// Screen resolution parameters for the export screenshot features
file.render.screenResolution = "屏幕分辨率";
// width of exported screenshot
file.render.width = "宽度";
// height of exported screenshot
file.render.height = "高度";
// export screenshot of the scene
file.render.export = "导出为png";
file.render.warn = "您当前导出的图片分辨率较高（$0x$1)！

请确认文件妥善保存后再继续导出，否则程序可能会因运存占用过高而闪退。";
// If true, then the exported screenshot will have transparency data in the image
file.render.transparent = "透明背景";
file.render.transparent.help = "打开此选项可以让您更方便地把渲染图导入到平面设计软件。

暂不支持导出部分透明对象。";

// Disable this option to have per-tool pressure settings (instead of shared settings)
pressure.useGlobal = "使用全局压感设置";
pressure.useGlobal.help = "勾选后，所有工具都会使用相同的压感参数。

如您希望给此工具单独设定压感参数，请取消勾选。";

// Pencil pressure
pressure.title = "压感设置";
// Pencil/Stylus pressure will be ignored
pressure.noTool = "此工具无法使用铅笔压感。";
// The tool can support pressure but its selected stroke type will ignore it
pressure.noGrab = "此工具会忽略压感设置。";
// The stylus pressure will impact the tool radius (more pressure -> bigger radius)
pressure.radius = "半径";
// The stylus pressure will impact the tool intensity (more pressure -> stronger intensity)
pressure.intensity = "强度";

// Customize whether finger and/or stylus can move the Camera
gesture.cameraInteraction = "相机移动：";
// Customize whether finger and/or stylus can sculpt on object
gesture.sculptInteraction = "雕刻：";
// Both the finger and the stylus can perform a certain action (move camera, sculpt, etc)
gesture.interaction.fingerAndStylus = "手指与触控笔";
// Only the finger can perform a certain action (move camera, sculpt, etc)
gesture.interaction.finger = "手指";
// Only the stylus can perform a certain action (move camera, sculpt, etc)
gesture.interaction.stylus = "触控笔";
// Disable the action
gesture.interaction.none = "无";
// Allow the action for any inputs
gesture.interaction.any = "任何";

// long press to pick the color/material under the cursor
gesture.materialPicking = "选取材质";
gesture.materialPicking.help = "颜色/材料选择器可以通过在画布上长按来打开。

请注意，只有在当前画笔启用了绘画功能的情况下，它才能发挥作用。";

// Three fingers on screen
gesture.three.title = "三个手指";
// Drag 3 fingers horizontally on the canvas to rotate the environment, lights and MatCap
gesture.fingerLighting = "三指旋转灯光";
// Canvas means the scene viewport (the entire screen but excluding the interface)
gesture.fingerLighting.help = "在屏幕上使用三指水平移动可使环境、灯光与MatCap旋转。";
// Drag 3 fingers vertically to edit the tool radius
gesture.fingerRadius = "三指调节工具半径";
// Canvas means the scene viewport (the entire screen but excluding the interface)
gesture.fingerRadius.help = "在屏幕上使用三指垂直移动可调节当前工具的画笔半径。";

// If this option is enabled, finger inputs on screen will use the smoothing tool
gesture.fingerSmooth = "将手指用于平滑";
gesture.fingerSmooth.help = "This option is only active if a sculpting tool is active.";
// If enabled, the pressure will be taken into account even if it's not coming from a recognized stylus
gesture.unknownPressure = "允许未识别的压感";
gesture.unknownPressure.help = "当您的触控笔无法使用压感或者您希望使用手指压感时，请勾选此选项。";

// Action when we press an Android pencil button
gesture.pencilAction.android = "触控笔按键";
// Action when we use the Pencil double Tap
gesture.pencilAction.ios = "双击Pencil";
gesture.pencilAction.ios.help = "仅支持Apple Pencil第二代";
// Pencil button (or iOS pencil double tap) action: Nothing
gesture.pencilAction.none = "无";
// Pencil button (or iOS pencil double tap) action: flip adding/substracting sculpt matter setting
gesture.pencilAction.alt = "添加或减去";

// Enable Mask gesture by tapping once on the screen
gesture.mask.oneTap = "单点快捷方式";
gesture.mask.oneTap.help = "轻点屏幕一下就能启用蒙版快捷方式，无需长按蒙版按钮快捷方式。

这将启用以下手势：
- 点击背景以反转此蒙版
- 点击蒙版区域以模糊此蒙版
- 点击非蒙版区域以锐化此蒙版";
// Hold the finger on screen to toggle between two tools: Mask and SelMask
gesture.mask.longPress = "长按（切换蒙版和选择蒙版）";
// Hold the finger on screen to toggle between two tools: Mask and SelMask
gesture.mask.longPress.help = "蒙版或选择蒙版工具启用时，长按屏幕可在两个工具之间切换。

如果您长按屏幕且不移动手指，则该新工具将成为默认的蒙版快捷方式。";
// Indicator that the tool has been set as the new shortcut
gesture.mask.infoShortcut = "$0已设为蒙版快捷方式。";

// Shortcuts to undo/redo
gesture.history = "快捷手势";
gesture.history.help = "- 双指轻点撤销。
- 三指轻点重做。
- 撤销/重做：按住2/3个手指（连续）。";

// Size rejection is when we try to ignore the palm of the hand when we interact with a tablet
gesture.palmRejection = "无法忽略手掌尺寸";
gesture.palmRejection.confirm = "如果您在雕刻时遇到问题，请务必关闭此选项！";
gesture.palmRejection.help = "如果手指与屏幕的接触面积超过设定值，屏幕将忽略手指的本次操作。

部分设备可能不支持此选项";
// Size in pixel for the palm rejection feature
gesture.palmRejection.size = "最大尺寸阈值";

// History, list of undo/redo
history = "历史记录";
// First "undo" state
history.root = "初始状态";
history.undoConfirm = "您确定要撤销所有操作吗？";
history.undoWarning = "如在此之后进行更改，之前的所有操作可能会被撤销。";
// Settings concerning the history stack of undo/redo
history.stack = "撤销/重做集";
// Actions to include in the undo/redo stack
history.include = "包括撤销/重做集";
// include lighting editing in the undo/redo
history.includeLights = "灯光";
history.includeLights.help = "停用该选项后，将仍包含使用Gizmo移动灯光，因为该选项会影响场景层级中的其他对象。";
// include postProcess editing in the undo/redo
history.includePostProcess = "后期处理";
// include shading parameters (MatCap & HDRIs) editing in the undo/redo
history.includeShading = "MatCap与HDRI";
// Can limit the stack of undo/redo size
history.limitSize = "历史记录限制 (Mb)";
history.limitSize.help = "历史记录的最大容量（以Mb为单位）。

历史记录会随着下一个操作记录而更新。";
// Limit the number of undo in the history stack
history.limitStack = "重做记录限量";
history.limitStack.help = "程序可保留的最大操作数量。

历史记录会随着下一个操作记录而更新。";
// Value where you define how many operations you can undo before it displays a warning
history.rangeProtect = "重做次数限量";
history.rangeProtect.help = "如果您大幅更改历史记录，在重做大量操作之前会弹出提示框以确认重做。";
// When enabled, each time the user undo an operation it will undo the camera position as well
history.restoreCamera = "恢复相机视角";
history.restoreCamera.help = "启用该选项后您可以在撤销或重做时同时恢复当时的相机视角。";
// Undo
history.undo = "撤销";
// Redo
history.redo = "重做";
// Shown during undo
history.state.undo = "撤销： $0";
// Shown during redo
history.state.redo = "重做： $0";
// Shown during undo/redo
history.state.symmetrySplit = "显示对比";
// Shown during undo/redo
history.state.voxelRemesh = "体素网格重构";
// Shown during undo/redo
history.state.surfaceRemesh = "表面网格重构";
// Shown during undo/redo
history.state.multiresLevel = "改变分辨率";
// Shown during undo/redo
history.state.multiresToDynamic = "模型细分转为动态网格";
// Shown during undo/redo (mesh type conversion)
history.state.meshDynamicToStatic = "动态网格转为静态网格";
// Shown during undo/redo (mesh type conversion)
history.state.meshStaticToDynamic = "静态网格转为动态网格";

// Interface customization
interface = "界面设置";

// UI customization: each row of the list will be bigger
interface.expandList = "UI：放大列表";
// UI customization: each row of the list will be bigger
interface.expandList.help = "使用一个UI选项就能方便列表管理。";

// Add shortcuts buttons to the bottom of the screen
interface.bottomButtons = "添加快捷键（底部）...";

// Interface option (main base color)
interface.colorBase = "底色";
// Interface option (accent widget color)
interface.colorSelect = "色盘";
// Interface option (if the menus are transparent or opaque)
interface.panelTransparent = "面板透明度";
// Interface option (panel blurriness, if the menus are transparent)
interface.blurFactor = "模糊强度";
// Interface option (color of panels, if the menus are transparent)
interface.colorBaseTransparent = "面板颜色";

// Interface color style
interface.preset.title = "颜色预设";
// Interface color style (original color of Nomad Sculpt)
interface.preset.classic = "经典";
// Interface color style
interface.preset.orange = "橙色";
// Interface color style (~red)
interface.preset.cardinal = "深红色";
// Interface Color style (~pink)
interface.preset.mulberry = "紫粉色";
// Interface color style
interface.preset.brown = "棕色";
// Interface color style (~green)
interface.preset.emerald = "翠绿色";
// Interface color style (~blue)
interface.preset.neon = "霓虹蓝";
// Interface color style
interface.preset.violet = "罗兰紫";
// Interface color style
interface.preset.grey = "灰色";
// Interface color style
interface.preset.black = "黑";
// Interface color style
interface.preset.white = "白";

// Reset interface settings
interface.resetAll = "重置界面风格";
interface.resetAll.confirm = "确定要重置界面设置吗？";
// Interface option (main base color)
interface.iconSupport = "High-contrast button";
interface.iconSupport.help = "An alternative style for buttons that makes them more visible when they are enabled.

If set on Auto, Nomad will use this mode when the UI color contrast between enabled/disabled is low.";
// Interface customization
interface.flipTop = "翻转顶部菜单栏";
// Interface customization
interface.flipBottom = "翻转底部菜单栏";
// Interface customization
interface.flipMiddle = "翻转侧边栏";
// Interface customization (preview material in the viewport when editing material color)
interface.materialPreview = "预览材料颜色";
// Interface customization
interface.materialPreview.help = "选取材料颜色后，将在当前选中的对象上显示预览。";
interface.toolbox.hide = "隐藏工具箱";
interface.toolboxHide.help = "如果您想隐藏工具箱，请勾选此选项。";
// Interface customization (the toolbox is a grid, we can adjust the column count)
interface.toolbox.maxColumn = "最大工具箱列数";
// Reset the tool's order in the toolbox
interface.toolbox.resetOrder = "重设工具箱排序";
// Scale the interface
interface.scale = "界面缩放";
// Spacing between widgets
interface.cursorStep = "垂直间距";
// Width of the interface panels
interface.panelWidth = "面板宽度";
// Size of fonts
interface.fontScale = "字体大小";
// Inset
interface.inset.title = "边偏移";
interface.inset.title.help = "You can change these values only if you have issues interacting with the buttons on the screen edges.

If the slider is disabled, Nomad will use the safe area values returned by the device itself.";
interface.inset.left = "左侧";
interface.inset.right = "右侧";
interface.inset.bottom = "底部";
interface.inset.top = "顶部";

// (see Glossary for Layer)
layer = "图层";
// (see Glossary for Layer)
layers.lock = "保留顶层图层细节";
// (see Glossary for Layer)
layers.lock.yes = "是否锁定顶层图层？";
// (see Glossary for Layer)
layers.lock.warning = "雕刻时，在顶层图层的变形将被忽略。

但是这些图层的细节仍然可见。

只有顶层图层的细节比例较小时，此选项才有用。";
// (see Glossary for Layer)
layers.addLayer = "添加图层";
// (see Glossary for Layer)
layer.factors = "通道参数";
// (see Glossary for Layer)
layer.factor = "吸收系数";
// (see Glossary for Layer)
layer.offset = "偏移";
// (see Glossary for Layer)
layers.title = "图层";
// (see Glossary for Layer)
layers.title.help = "Layers can record position offsets and painting, it can be useful for non-linear workflow.
For example by experimenting different facial expression without relying on the history stack to undo the changes.

For painting data, layers are sorted in a top-down fashion; so layers on top will mask the lower ones.

You can erase part of the layer by using the 'DelLayer' tool.";
layers.primitive = "基本体无法添加图层。";
// When there is no layer selected (see Glossary for Layer)
layers.baseSelected = "无";

light = "光线";
// Intensity of light
light.intensity = "强度";
// Temperature in Kelvin (Alternative way to compute the color of the light)
light.temperature = "色温";
// The attachment of a light defines how it will move when the user moves the camera
light.attachment = "光照方向";
// The light will stay still even if the user moves the camera
light.attachment.fixed = "固定";
// The light will move along the camera
light.attachment.camera = "随相机移动";
light.attachment.help = "- 固定
灯光方向不会改变。

- 随相机移动
灯光方向随着相机视角而改变。";
// Light type (directional, spot, point)
light.type = "类型";
// Directional light (synonym: sun light)
light.type.directional = "定向光";
// Spot light emits light in a single direction, restricted by a cone shape.
light.type.spot = "聚光灯";
// Point light emits lights everywhere (synonym: omni, omnidirectional)
light.type.point = "点光源";
// Cone angle for spot angles
light.spot.angle = "入射角";
// Softness of the spot light
light.spot.softness = "柔和度";
// Position of the light
light.position = "位置";
// Enable or disable shadows for a light
light.shadow.cast = "显示阴影";
// Point light only works with "screenspace" shadow type (not "shadow map")
light.shadow.pointTip = "点光仅支持屏幕空间阴影。";
light.shadow.type = "阴影类型";
// https://en.wikipedia.org/wiki/Shadow_mapping
light.shadow.type.shadowMap = "阴影贴图";
// Shadows computed with only the information visible on screen
light.shadow.type.screenspace = "屏幕空间";
light.shadow.type.screenspace.help = "此为实验性功能，可能会在未来发布版本中移除此功能。

此选项应与柔化阴影功能搭配使用。";
// Adjustment to fix artefacts
light.shadow.bias = "阴影偏差";
// How blurry the shadow is
light.shadow.softness = "边缘柔和度";
// Contact shadows are more precise shadows on small distance (synonym: cavity shadows?)
light.contact = "接触阴影";
light.contact.help = "如果选中了“自动”，则只有最显眼的灯光才会有接触阴影。";
// Thickness threshold for screen-space shadows (synonym: threshold, bias)
light.shadow.tolerance = "容差";
// Activated the light
light.visible = "显示";
// Move the light in front of the camera (but keeps its inner orientation)
light.resetPosition = "重新定位";

// Object's material
material = "材料";
// See glossary
material.pbrRoughnessMetalness.warning = "粗糙度与金属强度仅在PBR着色模式下可用。";
// See glossary
material.pbrReflectance.warning = "反射率仅在PBR模式下可用。";
// See glossary
material.pbrRefraction.warning = "折射效果仅在PBR渲染模式下可用。";
// See glossary
material.pbrSubsurface.warning = "次表面仅在PBR模式下可用。";
// Value that says how much light will change direction when hitting the surface
material.ior = "折射率";
// an object-level value that overrides the painting of the mesh
material.paintingOverride = "覆盖绘画";
// The roughness in the inside is turbidity
material.paintingOverride.help = "起作用的有两种粗糙度，分别是作用于表面和内部的粗糙度。

但是仅有一种可绘制粗糙度，因此两种粗糙度拥有一样的值。

您可以使用此滑块来覆盖表面粗糙度，让表面更具光泽。";
// Glossiness is simply the opposite of roughness
material.refractionSurfaceGlossiness = "表面光泽度";
material.refractionSurfaceGlossiness.help = "光泽度可以增强光线打在物体表面上的反射效果。

- 当光泽度为0时，对象表面的粗糙度将与材质相同。

- 当光泽度为1时，对象表面的光滑效果将达到最强。";
// Synonym: turbidity
material.refractionInteriorRoughness = "内部粗糙度";
material.refractionInteriorRoughness.help = "粗糙度可以增强光线透过物体后的散射效果。

- 当粗糙度为0时，对象内部的粗糙度将与材质相同。

- 当粗糙度为1时，对象内部的粗糙效果将达到最强。";
// Set the roughness of the object with a value of 0
material.paintGlossy = "漆面效果";
material.paintGlossy.help = "将对象表面材质的粗糙度变为0，从而呈现更锐利的折射效果。

该操作不会影响材质的颜色与金属强度。";
// Simulate the light being absorbed when it travels through the volume.
material.absorptionEnable = "吸收效果";
material.absorptionEnable.help = "该效果能模拟光线穿过物体时被吸收的情况。

薄的部分会比较亮，因为它让更多的光线通过，而厚的地方会相对更暗。

最终效果由网格形状结构决定，仅使用网格厚度的近似值。";
material.absorptionFactor = "吸收系数";
// Depth means how far the light can travel under the surface
material.subsurfaceDepth = "深度";
// Enable translucency (same as subsurface but only affect lights that enter a solid and escape from the other side)
material.translucency = "半透明";
material.translucency.help = "您需要借助灯光投下阴影才能看到半透明度。";
// Opacity factor, the opposite of transparency (synonym: Alpha)
material.opacity = "不透明度";
// Fully opaque material
material.type.opaque = "实心";
// See glossary
material.type.subsurface = "次表面";
material.type.subsurface.help = "为了获得最佳效果，您可以切换到PBR着色模式，并使用至少一个定向光源。在昏暗环境下效果最理想。";
// Transparency mode, alpha blending
material.type.blending = "正常混合";
material.type.blending.help = "可通过调节不透明度的值，以实现不同程度的透明效果。

请注意，由于实时渲染的性能限制，当您的模型形状过于复杂时，可能会出现明显的视觉伪影。";
// Transparency mode
material.type.additive = "叠加";
material.type.additive.help = "可通过调节不透明度的值，以实现不同程度的透明效果。

在此模式下，黑色会变成透明，白色不透明。与正常混合相比，该模式下出现的伪影会变少，但会使对象变亮。";
// Transparency mode based on dithering
// https://en.wikipedia.org/wiki/Dither
material.type.dithering = "抖动";
material.type.dithering.help = "加入一些噪点使颜色过渡更为平滑。";
// Simulate glass-like material
material.type.refraction = "折射";
material.type.refraction.help = "此模式可用于模拟出玻璃材料的质感。

由于实时渲染的性能限制，软件无法实现自折射和多层折射的效果。";
material.castShadows = "投射阴影";
material.receiveShadows = "接收阴影";
// Lights are ignored, the object will be displayed with color only
material.alwaysUnlit = "不受光显示";
// Inverse the side of the object triangles
// https://en.wikipedia.org/wiki/Back-face_culling
material.flipCulling = "翻转法线";
// How much light a surface will reflect (synonym: specular)
material.reflectance = "反射率";
material.reflectance.help = "该参数能够控制非金属材质的高光效果。

大多数情况下，建议将该参数保持为默认值 0.5，即对应 0.04 的基础反射率。";

// Menu name
menu.files = "文件";
// Menu name
menu.scene = "场景";
// Menu name
menu.multires = "多重网格";
// Menu name
menu.voxel = "体素";
// Menu name
menu.dynTopo = "动态网格";
// Menu name
menu.topology = "拓扑";
// Menu name
menu.primitive = "基本体";
// Menu name
menu.render = "渲染";
// Menu name
menu.material = "材料";
// Menu name
menu.postProcess = "后期处理";
// Menu name
menu.camera = "相机";
// Menu name
menu.background = "背景";
// Menu name
menu.tool = "工具";
// Menu name
menu.stroke = "笔刷";
// Menu name
menu.paint = "绘画";
// Menu name
menu.symmetry = "对称";
// Menu name (pencil pressure)
menu.pressure = "压感";
// Menu name
menu.gesture = "手势";
// Menu name
menu.layers = "图层";
// Menu name
menu.settings = "设置";
// Menu name
menu.interface = "界面";
// Menu name
menu.bindings = "绑定";
// Menu name
menu.history = "历史记录";
// Menu name
menu.historySettings = "设置";
// Menu name
menu.about = "关于";
// Menu name
menu.debug = "调试";

// Operation on the object (action)
mesh.action = "操作";
// If the object has holes, the algorithm will close them
mesh.holeClose = "封闭孔洞";
// Says how dense (number of triangles) the algorithm will use in order to fill holes
mesh.holeDetail = "细节";
// If the mesh has disconnected parts, it will be split/separated into objects
mesh.separate = "分离";
// When converting the object to a triplanar primitive, some object features will be lost
mesh.triplanar.warning = "图层、绘画与模型细分将会丢失。";
// Resolution of the triplanar grid
mesh.triplanar.resolution = "分辨率";
// Make the triplanar a regular cube (all 3 dimension equal)
mesh.triplanar.cubic = "强制转换为立方体";
// Covnert an object to a triplanar primitive
mesh.triplanar.convert = "转换";
// Static object means "static topology"
mesh.typeStatic = "静态模型";
// See glossary
mesh.typeMultiresolution = "多分辨率";
// Dynamic topology
mesh.typeDynamic = "动态模型";

// Disable this option to have per-tool material settings (instead of shared settings)
paint.useGlobal = "应用全局材料";
paint.useGlobal.help = "如勾选此选项，其他工具的材质也将会与所选材质相同。

注意，它只考虑到粗糙度、金属度和颜色的设置。";
// The current tool will paint the object if this option is enabled
paint.usePainting = "启用绘图";
// Factor/Opacity of paint tool
paint.intensity = "画笔强度";
// Apply the paint on the object
paint.paintAll = "全部上色";
paint.paintAll.help = "将当前材质应用到所选对象上。

蒙版区域与未勾选通道也会被应用。";
// Apply the paint on the object but ignore painting intensity (force full intensity)
paint.paintAllForce = "强制全部上色";
paint.strokePainting.title = "上漆";
// Brush stroke texture
paint.texture.title = "纹理贴图";
paint.texture.title.help = "将图片作为绘画的笔刷。

注意，它将共享alpha的平铺和比例设置。";
paint.texture.warningEnable = "您需要先勾选菜单顶部的“纹理贴图”后才能使用贴图绘制功能！";
paint.texture.warningIgnored = "当前工具无法使用纹理贴图功能！";
// Whether the Brush Alpha will be used to module painting
paint.useAlpha = "使用笔刷alpha";
paint.useAlpha.help = "使用笔画菜单中的alpha设置来调制绘画。";
// Whether the Brush Falloff will be used to module painting
paint.useFalloff = "使用笔刷衰减";
paint.useFalloff.help = "使用笔画菜单中的衰减设置来调控绘画。";

// when the user choose a new item name (through iOS/Android virtual keyboard)
input.name = "请输入新名称";
// when the user choose a new number value (through iOS/Android virtual keyboard)
input.number = "请输入新阈值";
// when the user choose a new color (through iOS/Android virtual keyboard)
input.hexcolor = "请输入新颜色代码（十六进制格式）";

// Post process effect
postprocess = "后期处理";
// Quality vs performance
postprocess.quality = "质量";
postprocess.quality.help = "激活这些选项可以提升质量，但会影响性能。";
// More samples means better quality but slower performance
postprocess.maxSamples = "最大采样值";
// Full resolution (1:1 resolution) instead of half resolution
postprocess.fullResolution = "最大实时分辨率";
// Number of frames that we accumulate (higher value means better quality)
postprocess.accumulateCount = "最大帧采样量";
postprocess.accumulateCount.help = "Maximum number of frames to accumulate before the rendering stops.

When the rendering stops, Nomad won't do anything, thus saving battery life.

Many rendering features benefit from frame accumulation, notably:
- Soft Shadows
- Global Illumination
- Reflection (SSR)
- Ambient Occlusion
- Subsurface
- Depth Of Field

High frame counts are mostly necessary for Soft Shadows and Global Illumination.
Nomad can stop the rendering sooner if the features mentioned aboved are disabled.";
// The value is a ratio (0.5 means half resolution 2 means twice the resolution)
postprocess.renderRatio = "实时渲染分辨率";
postprocess.renderRatio.warning = "已被像素画效果覆盖。";
postprocess.renderRatio.help = "此选项对性能影响很大。
我们建议您将值保留在“x1.25”以下。

设置中不会保存该选项。";
// Temporal Anti-Aliasing (no need to translate "TAA")
postprocess.taa = "时间性抗锯齿（TAA）";
postprocess.taa.help = "减少相机移动时的闪烁。";
// Screen-Space Reflection (no need to translate "SSR")
postprocess.ssr = "屏幕空间反射（SSR）";
postprocess.ssr.warning = "SSR仅在PBR渲染模式下有效。";
// Screen-Space Global Illumination (no need to translate "SSGI")
postprocess.ssgi = "全局光照(SSGI)";
// Thickness threshold for ssgi tracing algorithm (synonym: threshold, bias)
postprocess.ssgi.tolerance = "容差";
postprocess.ssgi.experimental = "实验性功能！";
postprocess.ssgi.warning = "SSGI仅在PBR着色模式下可用。";
// Screen-space ambient occlusion (SSAO)
// https://en.wikipedia.org/wiki/Ambient_occlusion
postprocess.ssao = "环境光遮蔽（AO）";
// How far the effect spreads
postprocess.ssao.radius = "范围";
// How strong the effect is
postprocess.ssao.factor = "强度";
// Adjustment to fix artefacts
postprocess.ssao.bias = "曲率偏差";
postprocess.ssao.bias.help = "模型表面曲率将会影响效果的强度。";
// Depth of Field (bokeh)
// https://en.wikipedia.org/wiki/Depth_of_field
postprocess.dof = "景深";
// The blur factor behind the focused point
postprocess.dof.blurFar = "远景模糊";
// The blur factor in front of the focused point
postprocess.dof.blurNear = "近景模糊";
postprocess.dof.focusTip = "点击对象表面可以改变焦点。";
// Bloom (light bleeding)
// https://en.wikipedia.org/wiki/Bloom_(shader_effect)
postprocess.bloom = "泛光效果";
// Intensity of the effect
postprocess.bloom.intensity = "强度";
// How far the effect spreads
postprocess.bloom.radius = "范围";
postprocess.bloom.radius.help = "此参数可调节泛光的范围。";
// Luminosity threshold (below this value, no bloom is generated)
postprocess.bloom.threshold = "阈值";
postprocess.bloom.threshold.help = "泛光阈值能够判断泛光的光线强度。
阈值越高，空间里越亮的物体才会产生泛光效果。";
// https://en.wikipedia.org/wiki/Tone_mapping
postprocess.tone = "色调映射";
postprocess.tone.exposure = "曝光";
postprocess.tone.contrast = "对比度";
postprocess.tone.saturation = "饱和度";
// No tonemapping operator is used
postprocess.tone.mapping.none = "无";
// A neutral tonemapping is used
postprocess.tone.mapping.neutral = "中性";
// Color curves
postprocess.curve = "色调";
// Curve for pixel luminance
postprocess.curve.luminance = "主要";
postprocess.curve.red = "红";
postprocess.curve.green = "绿";
postprocess.curve.blue = "蓝";
postprocess.curve.reset = "重置";
// Reset color grading curves
postprocess.curve.resetAll = "全部重置";
// https://en.wikipedia.org/wiki/Chromatic_aberration
postprocess.chromatic = "色彩偏差";
postprocess.chromatic.factor = "强度";
// Darking on the edges
postprocess.vignette = "晕影";
// How far the effect spreads
postprocess.vignette.size = "范围";
// How sharp the edge of the effect is
postprocess.vignette.hardness = "硬度";
// Unblur the image (sharpening)
// https://en.wikipedia.org/wiki/Unsharp_masking
postprocess.sharpness = "锐化";
postprocess.sharpness.factor = "强度";
// Filmic Grain
// https://en.wikipedia.org/wiki/Film_grain
postprocess.grain = "噪点";
postprocess.grain.factor = "强度";
// Accentuate the edges of the model
postprocess.curvature = "曲率描边";
// Color/Strength of concave curvature
postprocess.curvature.cavity = "凹陷";
// Color/Strength of convex curvature
postprocess.curvature.bump = "凸起";
// https://en.wikipedia.org/wiki/Pixel_art
postprocess.pixelArt = "像素画";
// Override frame accumulation feature
postprocess.pixelArt.allowAccumulate = "允许帧采样";
// Simulate scanline rendering (horizonal line)
postprocess.scanline = "扫描线";
postprocess.scanline.factor = "吸收系数";
// Spacing between lines
postprocess.scanline.spacing = "间距";

// Geometry Primitive (box, sphere, cylinder, etc)
primitive = "基本体";
primitive.box = "立方体";
primitive.sphereCube = "球体";
primitive.sphereUV = "UV球体";
primitive.icosahedron = "二十面体";
primitive.cylinder = "圆柱体";
primitive.cone = "圆锥体";
primitive.torus = "圆环面";
primitive.lathe = "车削";
primitive.tube = "圆管";
primitive.plane = "平面";
primitive.triplanar = "三面体";
primitive.faceXYZ = "X、Y、Z面";
primitive.faceXYZ.help = "由https://texturing.xyz/提供的UV展开的基本网格";
primitive.needValidate = "基本体需转换为可编辑对象后才可雕刻。";

// If enabled, we can edit primitive inside the viewport
primitive.edit = "编辑";
primitive.edit.help = "可以在软件界面直接修改基本体的参数。

如果您喜欢使用轴向变换或自由变换来调整基本体，可以禁用此功能。";

// Primitive configuration
primitive.mainConfig = "参数";
// Interface section where we change the topology (number of triangles/polygons)
primitive.topology = "拓扑参数";
// Interface section where we change the geometry (shape of the primitive)
primitive.geometry = "几何";

// Validating the primitive (then it can be sculpted)
primitive.validate = "转换";
// Maximum number of faces of the primitives
primitive.maxFaces = "面数限量";
primitive.maxFaces.help = "一个基本体可拥有的最大面数。

该参数只能在转换为可编辑对象前修改。";
// Synonym: Flat subdivision
primitive.linear = "线性细分";
// Post as "subdivision that occurs after the primitive computation"
primitive.subdivision = "后期细分";

// Radius (of a sphere, torus, etc)
primitive.radius = "半径";
// Size (of cube x dimension)
primitive.size = "尺寸";
primitive.sizeX = "尺寸 X";
primitive.sizeY = "尺寸 Y";
primitive.sizeZ = "尺寸 Z";
// Division only impacts the topology (synonym: resolution)
primitive.division = "分段数";
primitive.divisionX = "分段数 X";
primitive.divisionY = "分段数 Y";
primitive.divisionZ = "分段数 Z";
// Angle of torus, etc
primitive.angleX = "角度 X";
primitive.angleY = "角度 Y";
primitive.angleZ = "角度 Z";
// It means we try to keep regular sized quad (square) instead of highly distorted rectangule
primitive.constantDensity = "恒定密度";
// Make sure the shape is perfectly spherical
primitive.projectOnSphere = "投影在球体上";
primitive.projectOnSphere.help = "将点分布在一个完美的球体上。";

// triplanar
primitive.triplanar.title = "三面体";
primitive.triplanar.title.help = "三面体是将原对象三个平面的投影重新组合起来填充体素网格，然后将其多边形化。

您可以通过在三个投影上修改蒙版或移动滑块的方式来改变几何体。

建议您关闭对称选项，否则可能会导致最终效果与您的预期不符。

您可以开启遮罩面板中的“拓扑连接”选项来在绘制时影响其他平面。";
// Make sure the box is a regular cube (same 3 dimension)
primitive.triplanarSameSize = "固定比例（立方体）";
primitive.triplanarPolish = "羽化";
// Mask refers to the painted mask on the triplanar planes
primitive.triplanarResetMask = "重置蒙版";
// One side of a cube (the back plane)
primitive.isolate.back = "背面";
// One side of a cube (the right plane)
primitive.isolate.right = "右面";
// One side of a cube (the bottom plane)
primitive.isolate.bottom = "底面";
// Plane
primitive.planeSameSize = "固定比例（平面）";
// Make the plane a disk/ellipse instead of a rectangle
primitive.planeDisk = "椭圆";
// Box
primitive.boxRegular = "固定比例（立方体）";
// Distance to the snapping point
primitive.tubeSnapOffset = "吸附偏移";
primitive.tubeSnapOffset.help = "当偏移值为1.0时，偏移后的距离即为圆管半径。";
// Radius of the tube (starting end-point of the tube)
primitive.tubeThicknessStart = "起始半径";
// Radius of the tube (ending end-point of the tube)
primitive.tubeThicknessEnd = "结束半径";
primitive.tubeTwist = "扭曲";
primitive.tubeTwistRotate = "旋转";
primitive.tubeTwistRadius = "幅度";
primitive.tubeTwistOffset = "偏移";
primitive.tubeSnap = "吸附";
primitive.torusRadiusOuter = "外圈半径";
primitive.torusRadiusInner = "内圈半径";
primitive.torusAngle = "角度";
primitive.torusAngleOffset = "角度偏移";
primitive.cylinderHeight = "高度";
primitive.coneRadius = "半径";
primitive.coneHeight = "高度";
// Hole sub menu (cylinder, tube, etc)
primitive.hole = "孔洞";
// Make a hole in the primtive to make it hollow
primitive.hasHole = "打洞";
// Make sure the two end-point of a primitive (cylinder, tube, etc) have the same size
primitive.radiusSync = "相同半径";
primitive.radiusStart = "起始半径";
primitive.radiusEnd = "结束半径";

// Import resource (Alpha, Textures, MatCaps, etc)
resource.import = "导入…";

scene.title = "场景";
scene.title.help = "当场景内有多个对象时，在复选框处上下滑动即可快速选择多个对象。 

您也可以长按可见/所选按钮来影响子体。";
// The view will focus on the item when we click on it
scene.focus = "聚焦此项";
// Icon size in pixel (min/max)
scene.iconSize = "Icon size";
// Min size of icon
scene.iconSize.min = "最小值";
// Max size of icon
scene.iconSize.max = "最大";
// display hierarchy lines (visibility helper)
scene.showHierarchy = "Hierarchy lines";
scene.showHierarchy.help = "Display a line between parent and its children in the viewport.";
scene.showHierarchyNomadPivot = "Use Nomad pivot";
scene.showHierarchyNomadPivot.help = "The Nomad pivot is the pivot used by the Transform and Gizmo tools.

If this option is disabled, it will use the natural base pivot.
In some case this base pivot can be far away from the object center itself!";
// The view will focus on the item when we click on it
scene.syncVisible = "Sync visibility";
scene.syncVisible.help = "When enabled, using the visible (eye) icon will impact all the selected items.";
// Merge 2 objects without modifying the geometry or the topology
scene.join = "连接";
// Group the selected object with a new created Empty Node as a parent
scene.group = "组";
// Move the item outside its parent (synonym: ungroup)
scene.unparent = "";
// Mirror node type, a node that make many copies of its children (mirror symmetry)
scene.mirror = "镜像";
// Curve node type, a node that make many copies of its children (along a curve)
scene.curve = "曲线";
// Array node type, a node that make many copies of its children (grid repetition pattern)
scene.array = "阵列";
// Radial node type, a node that make many copies of its children (radial symmetry)
scene.radial = "径向";
// Nodes that make many copies of its children (type of mirror/curve/array/radial)
scene.repeaters = "Repeaters";
scene.repeaters.help = "Repeater nodes that make instances of any geometries below it in the scene hierarchy.";
// singular of Repeaters (Nodes that make many copies of its children (type of mirror/curve/array/radial))
repeater = "";
// Validate button
scene.validateGroup = "转换";
// Keep instances in the scene
scene.validateGroup.keepInstances = "";
// If we should join children
scene.validateGroup.joinChildren = "组合子项";
// Merge/weld 2 objects by recomputing all the topology and creating a new object
scene.mergeVoxel = "体素合并";
scene.voxelResolution = "分辨率";
// The hidden objects will be "substracted" (the object will carve the other object)
scene.subtractionTip = "相减：隐藏对象（眼睛图标）";
// If all the objects are hidden, only the parts where they intersect (collide) will be kep
scene.intersectionTip = "相交：隐藏所有对象";

// Need at least to select one object
scene.noneButNeedAtLeastOne = "对象未选择";
// Need to select one object only
scene.noneButNeedOne = "未选中任何对象，请至少选中一个对象。";
// Need to select one object only
scene.onlyOneObject = "您选择了多个对象，无法修改图层。";

// General scene display settings
settings.display.title = "显示设置";
// Wireframe (show triangles and quad edges)
settings.wireframe = "对象网格";
// Display UV
settings.debugUV = "调试UV";
settings.debugUV.help = "这个选项只有在模型有UV时才有意义。

它将在背景中显示UV线框。

它还会在模型上显示一个彩色的棋盘式纹理。";
// If the object is opened (a simple plane for example), two sided means we'll be able to see if from the two sides of the planes
settings.twoSided = "双面显示";
settings.twoSided.help = "两面都可以见。";
// If we colorize the inverted side of faces
settings.backface.color = "背面颜色";
// Color of the inverted side of faces
settings.backface.colored = "背面着色";
// Outline (contour highlight around the selected object)
settings.outline = "轮廓";
// Outline (contour highlight around the selected object)
settings.outline.help = "选定的对象将被勾勒出来。";
settings.outline.thickness = "厚度";
// Navigation cube (easy to snap/align the view)
settings.snapCube = "方位视图";
// Move the navigation cube to the bottom of the screen
settings.snapCube.bottom = "置于底部";
// Move the navigation cube on the left side of the screen
settings.snapCube.left = "置于左侧";
// Stats (information logs about the scene displayed on screen)
settings.stats = "显示场景状态";
settings.stats.right = "置于右侧";
settings.stats.all = "显示全部";
// Grid
settings.grid = "网格";
// Cursor
settings.cursor.whileSculpting = "雕刻时显示圆圈";
// A small indicator dot
settings.cursor.showDot = "显示指示点";
settings.cursor.showDot.help = "指示点会在您移动相机和雕刻时显示。";
settings.cursor.showRope = "显示画笔准星";
// Highlight (the object glows when we select it)
settings.highlight.selection = "高亮选择对象";
// Highlight settings
settings.highlight = "高亮";
settings.highlight.duration = "时长";
// Mesh that are not selected will be dark
settings.darkenUnselected = "使未选对象变暗";
// https://en.wikipedia.org/wiki/Shading
settings.smoothShading = "平滑阴影";
// Experimental feature
settings.partialDraw = "局部雕刻";
settings.partialDraw.help = "实验性功能！

建议您在雕刻高精度细小模型时使用。

它能让雕刻过程更加流畅，但不建议您打开显示对象网格。

启用此功能可能会在使用画笔时增加视觉上的人工痕迹。";
settings.partialDraw.warning = "如果显示不正常，请不要忘记关闭此选项！";
// Disable this option to force a white uniform paint instead of showing the objects painting
settings.showPainting = "图层绘画";
// Display the light icons in the viewport
settings.lightIcon = "灯光图标";
// Display the camera icons in the viewport
settings.cameraIcon = "相机图标";
// Show icon on the canvas
settings.icon = "图标";
// Show icons on the canvas
settings.icons = "图标";
// Tooltip
settings.icons.help = "在画布上显示图标，以便您直接选择和编辑。";
// Hole filling settings
settings.hole = "填补孔洞";
// Allow the hole filling algorithm to handle non-manifold (non regular topology)
settings.hole.nonManifold = "填补非流形孔洞";
settings.hole.nonManifold.help = "应用将会尝试填补非流形孔洞。

此选项不会被保存在设置中。";
// Maximum number of vertices (points)
settings.multires.maxVertices = "最大顶点数量";
settings.multires.maxVertices.help = "应用在模型细分之前并不会检查内存，多边形数量过多很容易会导致应用崩溃。";
settings.multires.lowResVertices = "最低分辨率阈值";
settings.multires.lowResVertices.help = "在您移动相机时，模型对象可能会以较低分辨率显示。

如您希望显示更高的分辨率，可以增加此值。";

// The main rendering mode
shading = "渲染模式";
// Main rendering mode (PBR stands for Physically Based Rendering)
shading.pbr = "PBR";
shading.pbr.help = "在这种模式下，你可以添加灯光（带阴影），以及一个HDR环境。

您可以在此模式下对材质的粗糙度与金属度进行修改，更好地观察当前材质的显示效果。";
// Fast rendering mode for sculpting purpose (do not translate)
shading.matcap = "材质捕捉";
shading.matcap.help = "该模式是将光照，材质等信息都存储在一张贴图上。

该模式光照信息相对固定，对模型干扰较小，适合用于雕塑时观察模型。";
// Unlit rendering mode, it simply displays a solid/flat color
shading.unlit = "不受光";
shading.unlit.help = "该模式下模型只显示纯色，不受任何外界光照影响。";
// Helper rendering mode that display a (do not translate)
shading.id = "ID";
shading.id.help = "无光照渲染模式下每个对象会被随机分配颜色。

当您的场景中有多个对象时，该模式能发挥最大效用。";
// Randomize colors
shading.id.randomize = "随机分配颜色";
shading.textures = "使用纹理";
shading.textures.help = "Nomad目前尚未支持创建或编辑贴图。

但您可以导入包含有贴图的文件。（大部分情况下都是能显示的）

-- 支持的纹理贴图 --
不透明贴图：Lit、Matcap、Unlit
法线贴图：Lit、Matcap
彩色贴图：Lit、Unlit
自发光贴图：Lit
粗糙度贴图：Lit
金属度贴图：Lit";
// Lights
shading.lights = "灯光";
shading.lights.addLight = "添加灯光";
shading.lights.warning = "灯光需要PBR着色模式。";
// Environment based lighting (synonym: HDRI)
shading.environment = "HDRI";
shading.environment.import = "导入HDRI";
shading.environment.exposure = "曝光";
shading.environment.backgroundBlur = "背景模糊";
shading.environment.rotation = "旋转";
shading.environment.rotation.help = "在屏幕上用三指水平移动可使环境、灯光与材质捕捉旋转。";
// The environment will always be aligned with the camera (so that the lighting is consistent)
shading.environment.attachedToCamera = "固定HDRI";
shading.environment.attachedToCamera.help = "启用此选项后，移动相机时将不会移动HDRI。

这能让光线保持固定，对于雕刻来说非常有用。";
shading.matcap.rotation = "旋转";
shading.matcap.rotation.help = "在屏幕上使用三指水平移动可使环境、灯光与材质捕捉旋转。";
shading.matcap.global = "使用全局材质捕捉";
shading.matcap.global.help = "如果您希望在不同对象上使用不同的材质捕捉，请取消此选项。";

// bottom shortcut buttons (should be SHORT)
shortcut.maskVisible.short = "蒙版";
shortcut.maskVisible.long = "蒙版";
// bottom shortcut buttons (should be SHORT)
shortcut.solo.short = "单放";
shortcut.solo.long = "单放轨道";
// bottom shortcut buttons (should be SHORT)
shortcut.voxelRemesh.short = "体素";
shortcut.voxelRemesh.long = "体素网格重构";
// bottom shortcut buttons (should be SHORT)
shortcut.wireframe.short = "线框";
shortcut.wireframe.long = "网格开关";
// bottom shortcut buttons (should be SHORT)
shortcut.cameraReset.short = "重设对称中心";
shortcut.cameraReset.long = "重置视图";
// bottom shortcut buttons (should be SHORT)
shortcut.cameraSnap.short = "切换";
shortcut.cameraSnap.long = "切换视图";
// bottom shortcut buttons (should be SHORT)
shortcut.lockSelection.short = "锁定";
shortcut.lockSelection.long = "锁定选项";
shortcut.lockSelection.long.help = "启用后，您无法通过点击方式选择对象。";
// bottom shortcut buttons (should be SHORT)
shortcut.perspective.short = "透视";
shortcut.perspective.long = "透视视图";
// bottom shortcut buttons (should be SHORT)
shortcut.grid.short = "世界网格";
shortcut.grid.long = "世界网格";
// bottom shortcut buttons (should be SHORT)
shortcut.uv.short = "UV";
shortcut.uv.long = "UV";

// Memory taken by the scene
stat.ramScene = "场景";
// Vram = Video RAM (Video Memory, the memory of the graphic card)
stat.vramScene = "显存场景";
// Vram = Video RAM (Video Memory, the memory of the graphic card)
stat.vramRender = "显存渲染";
// Vram = Video RAM (Video Memory, the memory of the graphic card)
stat.vramTextures = "显存贴图";
// Memory taken by the undo/redo history
stat.ramHistory = "历史";
// Memory taken by other stuffs
stat.ramOther = "其他";
// Memory used by the app (RAM, not storage!)
stat.usedMemory = "已用内存";
// Memory available for the app (RAM, not storage!)
stat.freeMemory = "剩余内存";
// RAM, not storage!
stat.ram = "内存";
stat.used = "已用：$0 MB";
stat.free = "剩余：$0 MB";
stat.faces = "面数";
stat.triangles = "三角面";
stat.vertices = "顶点";
// quadrangular polygon (polygon with 4 sides)
stat.quads = "四边形";
stat.sceneFaces = "场景面数";
stat.sceneVertices = "场景顶点数";

// Brush stroke
stroke = "笔刷";
// The brush radius is either screen-space (fixed size on the screen) or world-space (fixed size in the scene)
stroke.useWorldRadius = "恒定笔刷半径";
// The settings is shared among every tools
stroke.useWorldRadius.help = "这将会影响到所有工具。";
// Share the radius value among every tools.
stroke.useShareRadius = "恒定半径";
stroke.useShareRadius.help = "使所有工具的笔刷半径相同。";
// When doing a brush stroke, the spacing is the distance between 2 sculpt operations
stroke.minSpacing = "笔刷间距";
// Adjust the brush intensity to ensure consistent deformation depending on the stroke spacing.
stroke.minSpacing.adjustIntensity = "调整间隔强度";
stroke.minSpacingAdjustIntensity.help = "调整笔刷强度，以保证根据笔画间距产生一定的变化。";
stroke.minSpacing.help = "该选项可调节每个笔画之间的距离，与笔画半径有一定的相关性。

将该值调低可使笔刷显得更加顺滑，但也会影响性能。";
// Brush stroke smoothing
stroke.lazySmooth = "平滑笔刷";
stroke.lazySmooth.help = "通过平均计算多个点来获得更加平滑的笔刷。

将该值调高会使笔刷变得不跟手。";
// Make the brush stroke lags behind the pointer cursor
stroke.lazyRadius = "笔刷落后";
stroke.lazyRadius.help = "笔刷将会按一定的距离落后于指针位置。

此功能可用于绘制平滑线条。";
// It is not a per-tool settings
stroke.globalSettings = "这是一个全局设置。";
// Start the brush stroke from the last sculpted position to ensure there is no discontinuity
stroke.snapRadius = "续接笔刷范围";
stroke.snapRadius.help = "如果落笔处在最后一笔的续接范围内，笔刷将会自动续接上。

此功能可用于绘制长线条，但需要频繁停顿时。";
// offset between the cursor and the brush stroke (for fat finger on small screen)
stroke.sculptOffset = "笔刷偏移";
stroke.sculptOffset.help = "使笔刷持续偏移于触控处

此功能适用于小屏幕设备。在使用时，手指不会遮挡到屏幕。";
stroke.accumulate = "叠加笔刷";
stroke.accumulate.help = "如启用此选项，则每个笔画可添加或减去的数量将不会有限制。";
// The tool can use DynTopo
stroke.useDynamicTopology = "允许动态网格";
// Only sculpt the part that are linked topologically
stroke.connectedTopology = "连接拓扑";
stroke.connectedTopology.help = "启用此选项后，画笔将会只雕刻连接到所选表面的顶点。

此选项一般适用于移动工具, 例如专门移动与另一零件自相交的零件。 ";
// Only sculpt the vertex that points toward the camera
stroke.onlyFrontFace = "只影响对象表面";
stroke.onlyFrontFace.help = "打开此选项后，应用会忽略对“背面”的操作。

该功能可帮助您在不影响另一侧的情况下在几何平面上绘画。

该选项也可用于雕刻，但您可能会遇到一些不便。";
// Only sculpt the vertex that points toward the direction of the deformation
stroke.onlySameSide = "只移动同向顶点";
stroke.onlySameSide.help = "在修改对象造型时，不移动朝向不同的顶点。";
// Module the intensity of the sculpting operation by using a falloff curve
stroke.curveFalloff = "衰减";
stroke.onlyLasso = "该设置仅对套索工具有效。";
// Alpha
stroke.alpha = "Alpha";
// Invert the pixel (black <-> white)
stroke.alphaInvert = "反转像素";
// Repeat the alpha image (pattern)
stroke.alphaWrap = "平铺";
// No repeat pattern
stroke.alphaWrap.none = "无";
// Repeat the alpha in a regular manner (tiles with seams)
stroke.alphaWrap.repeat = "重复";
// Repeat the alpha in a mirrored (seamless tiling)
stroke.alphaWrap.mirror = "镜像";
stroke.alphaProject = "平铺模式";
// Project the alpha perpendicularly onto the surface
stroke.alphaProject.surfaceContinuous = "表面连续";
// Project the alpha onto the surface in the direction of the camera view
stroke.alphaProject.screenFixed = "屏幕投影";
stroke.alphaRotation = "旋转";
stroke.alphaRotation.lock.help = "Lock the alpha orientation.

If the rotation is unlocked, the orientation will follow the stroke direction in real-time.";
// Repeat the image
stroke.alphaTiling = "形状平铺";
// Scale the image (make it bigger or smaller)
stroke.alphaScale = "形状缩放";
stroke.alphaScale.help = "当该值最小时，画笔形状将不会大于工具画笔的半径圆。";
// Middle-point value at which no deformation occurs
stroke.alphaMidValue = "中间值";
stroke.alphaMidValue.help = "不发生变形的中间值。

当中间值为0时：
- 黑色：无变化
- 白色：凸起

当中间值为0.5时：
- 黑色：下凹
- 白色：凸起

当中间值为1时：
- 黑色：下凹
- 白色：无变化";
// Stroke type
stroke.strokeType = "笔刷类型";
// Sculpt and paint along the brush stroke at regular spacing
stroke.strokeTypeDot = "点";
// Sculpt continuously
stroke.strokeTypeDrag = "拖拽";
// Lock a region and move it around
stroke.strokeTypeGrab = "抓取";
// Lock a point of interest and sculpt it by changing the tool radius
stroke.strokeTypeGrabRadius = "抓取 - 可调半径";
// Lock a region and sculpt it by changing the tool intensity
stroke.strokeTypeGrabIntensity = "抓取 - 可调强度";

// Symmetry
symmetry = "对称";
symmetry.enable = "启用";
// Display a warning (the feature is only available for mesh object)
symmetry.primitiveWarning = "笔刷对称仅对已转换为可编辑对象的基本体可用，三平面基本体除外。";
symmetry.plane.title = "平面";
symmetry.toolIgnore = "当前工具不适用对称。";
// Instead of planar symmetry, use a radial symmetry
symmetry.radial.title = "径向";
symmetry.radialX = "径向X";
symmetry.radialY = "径向Y";
symmetry.radialZ = "径向Z";
// Synonym: Offset
symmetry.offset.title = "偏移";
symmetry.offsetX = "X轴方向偏移";
symmetry.offsetY = "Y轴方向偏移";
symmetry.offsetZ = "Z轴方向偏移";
// Number of clones
symmetry.count.title = "复制体个数";
symmetry.countX = "X轴方向上的复制体个数";
symmetry.countY = "Y轴方向上的复制体个数";
symmetry.countZ = "Z轴方向上的复制体个数";
// method
symmetry.method = "类型：";
symmetry.method.help = "- 本体对称
可使用轴向变换或自由变换等工具移动调整对称平面。

- 世界对称
对称平面是固定不动的。";
// Local means: in the coordinate of the scene
symmetry.methodWorld = "世界对称";
// Local means: in the coordinate of the object (internal)
symmetry.methodLocal = "本体对称";
// Move the object to the other side of the symmetry (mirror it as well)
symmetry.flip = "翻转对象";
// Mirror the mesh
symmetry.mirror = "镜像";
symmetry.mirror.help = "尝试在不影响拓扑的情况下重新应用对称。

拓扑必须对称且至少有一个边缘恰好位于对称平面上才能成功应用。

如果镜像失败，将会建议您强制对称。但这样会影响到拓扑。";
symmetry.mirrorLeftToRight = "从左至右";
symmetry.mirrorRightToLeft = "从右至左";
symmetry.mirrorFail = "对称失败：

是否使用镜像来强制对称？";
symmetry.mirrorUseMasking = "保护蒙版区域";
symmetry.mirrorUseMasking.help = "启用后，在镜像时将不会修改蒙版区域。

该选项会忽略非对称网格(或不相连的表面，比如眼睛)。";
// Reset the symmetry plane position
symmetry.reset = "重设";
// Reset the symmetry plane positon to the object center
symmetry.reset.centerMesh = "对象中心";
// Reset the symmetry plane positon to the scene (world) center
symmetry.reset.centerWorld = "世界中心";
// Reset the symmetry plane orientation
symmetry.reset.direction = "方向";
// Display a line on the object (to show where the symmetry lies)
symmetry.showLine = "显示线条";
// Display the symmetry plane in 3d
symmetry.showPlane = "显示平面";
// Allow the editing of the symmetry plane with the gizmo
symmetry.edit = "编辑Gizmo";
symmetry.edit.warning = "编辑镜像平面是实验性功能。";
symmetry.edit.help = "您可以自由改变镜像平面。

此功能并未完善，请尽量不要使用。";

// Ideally <10 chars
tool.dynTopo = "动态网格";
// Ideally <10 chars (Symmetry)
tool.symmetry = "对称";
// Ideally <10 chars (Mirror primitive)
tool.mirror = "镜像";
// Ideally <10 chars
tool.clay = "黏土";
// Ideally <10 chars (Subtract)
tool.clay.sub = "反向";
// Ideally <10 chars
tool.brush = "刷子";
// Ideally <10 chars
tool.move = "移动";
// Ideally <10 chars (Normal vector, perpendicular to surface)
tool.move.normal = "法线方向";
// Ideally <10 chars
tool.drag = "拖拽";
// Ideally <10 chars (Smooth the surface by erasing the details)
tool.smooth = "平滑";
// Ideally <10 chars (Tries to smooth the topology by making the polygons more regular)
tool.smooth.relax = "规整网格";
// Ideally <10 chars (Paint mask)
tool.mask = "蒙版";
// Ideally <10 chars
tool.mask.unmask = "消除蒙版";
// Ideally <10 chars (Selector Mask, use lasso/ellipse,etc shape to mask the mesh)
tool.maskSelector = "选择蒙版";
// Ideally <10 chars (Smudge the paint of the object)
tool.smudge = "涂抹";
// Ideally <10 chars (Flatten the surface)
tool.flatten = "铲平";
// Ideally <10 chars (Flatten the surface by offsetting the surface in the opposite direction)
tool.flatten.fill = "填充";
// Ideally <10 chars (Layer brush)
tool.layer = "层";
// Ideally <10 chars
tool.crease = "褶皱";
// Ideally <10 chars (Cut part of the mesh cleanly)
tool.trim = "裁切";
// Ideally <10 chars (Cut part of the mesh cleanly into two separate meshes)
tool.split = "分割";
// Ideally <10 chars (Project part of the object onto a curve)
tool.project = "投射";
// Ideally <10 chars
tool.inflate = "膨胀";
// Ideally <10 chars
tool.pinch = "挤捏";
// Ideally <10 chars
tool.nudge = "触碰";
// Ideally <10 chars
tool.stamp = "图章";
// Ideally <10 chars (Delete Layer, a tool that can cancel the Layer deformation/paint)
tool.clearLayer = "擦除";
// Ideally <10 chars (Select multiple objects with a lasso tool)
tool.select = "选择";
// Ideally <10 chars (Rotate, Translate and Scale the object)
tool.gizmo = "轴向变换";
// Ideally <10 chars
tool.gizmo.editPivot = "编辑原点";
// Ideally <10 chars (Snap angle)
tool.gizmo.rotateSnap = "角度吸附";
// Ideally <10 chars (Snap translation)
tool.gizmo.moveSnap = "移动吸附";
// Ideally <10 chars (Local space)
tool.gizmo.local = "轴向";
// Ideally <10 chars (Local space)
tool.gizmo.world = "世界对称";
// Ideally <10 chars (Rotate, Translate and Scale the object)
tool.transform = "自由变换";
// Ideally <10 chars (Translate the object)
tool.transform.move = "移动";
// Ideally <10 chars (Rotate the object)
tool.transform.rotate = "旋转";
// Ideally <10 chars (Scale the object)
tool.transform.scale = "缩放";
// Ideally <10 chars (Snap the object on another object surface)
tool.transform.snap = "表面吸附";
// Ideally <10 chars (Measure distance between 2 points)
tool.measure = "测量";
// Ideally <10 chars (View tool, do nothing in particular)
tool.view = "浏览模式";
// Ideally <10 chars (Revolving surface along a line)
tool.lathe = "车削";
// Ideally <10 chars (Revolving surface along a curve)
tool.tube = "圆管";
// Ideally <10 chars (Insert object into the scene)
tool.insert = "插入";
// Ideally <10 chars (Flip/Invert/Negate the shape)
tool.shape.flip = "翻转";
// Ideally <10 chars (No shape selected, same as Camera mode, does nothing in particular)
tool.shape.view = "浏览";
// Ideally <10 chars (Lasso selection)
tool.shape.lasso = "套索";
// Ideally <10 chars (Curve selection, same as Lasso and it's an open shape)
tool.shape.curve = "曲线";
// Ideally <10 chars (Polygon selection, same as Lasso but with more precision)
tool.shape.polygon = "多边形";
// Ideally <10 chars (Path selection, same as Lasso but with more precision and it's an open shape)
tool.shape.path = "路径";
// Ideally <10 chars (Rectangular selection)
tool.shape.rectangle = "矩形";
// Ideally <10 chars (Ellipse selection)
tool.shape.ellipse = "椭圆";
// Ideally <10 chars (Line selection, split the screen in half)
tool.shape.line = "直线";
// Ideally <10 chars (Whether a shape is closed or not, a tube is open, a torus is closed)
tool.shape.closed = "闭合";

// Popup when editing the vertical sliders on the left
tool.slider.radius = "半径 $0";
// Popup when editing the vertical sliders on the left
tool.slider.intensity = "强度 $0 %";

tool.settings = "设置";
tool.settings.none = "该工具无特殊设置。";

// Flatten distance offset
tool.clay.flattenOffset = "展平偏移 ";
tool.crease.pinchFactor = "力度";

tool.layer.removeInfluence = "使用图层偏移";
tool.layer.removeInfluence.help = "仅当选中图层时此功能才能启用。

该选项会用图层数据来限制画笔置换。";
tool.layer.noLayerSelected = "此选项仅在选择图层后可用。";

tool.flatten.warning = "以下均为实验性功能，在之后版本可能会被移除。";
tool.flatten.planeLockOrigin = "锁定平面原点";
tool.flatten.planeLockNormal = "锁定平面方向";
tool.flatten.planeAverageOrigin = "平均平面原点";
tool.flatten.planeAverageNormal = "平均平面方向";
tool.flatten.planeOffset = "平面偏移";

// Option for Tube, Lathe and Insert tool
tool.syncInstance = "Sync";
tool.syncInstance.message = "The new object will be added on all other instances!";

// The vertex on the border of the mesh will stay still even if we try to smooth the border
tool.smooth.stickyBorder = "边线粘性顶点";

tool.paint = "绘画";
// Erase the painting
tool.paint.erase = "橡皮";
// Only paint the part of the mesh above a certain height
tool.paint.depthFilter = "深度限定";
// Only paint the part of the mesh that was already painted in the layer (repainting)
tool.paint.layerFilter = "图层限定";
tool.paint.layerFilter.help = "启用该选项后，您只能够在已经有绘画的图层上进行二次绘画。";

// Clear the painted mask
tool.mask.clear = "清除";
// Invert the painted mask
tool.mask.invert = "反转";
// Mask or Unmask a region (leave other region that unconnected intact)
tool.mask.flipConnected = "Invert mask (connected)";
// Blur the painted mask
tool.mask.blur = "模糊";
// Sharpen the edge of the painted mask area
tool.mask.sharpen = "锐化";
// The thickness of the extracted mesh (from the painted mask)
tool.mask.thickness = "抽壳厚度";
// Smooth the border of the extracted mesh (from the painted mask)
tool.mask.polish = "平滑边界";
// Extract a new mesh from the painteed mask and carve/emboss the base mesh
tool.mask.engraveEmboss = "雕刻/压花";
// Extract a new mesh from the painted mask
tool.mask.extract = "抽壳";
// Extract two new mesh from the painted mask and from the unmasked area
tool.mask.split = "分离";
// How should we close the topology of the extracted object
tool.mask.closeMask = "关闭操作（蒙版区域）：";
// How should we close the topology of the extracted object
tool.mask.closeUnmask = "关闭操作（非蒙版区域）：";
// How should we close the topology of the extracted object
tool.mask.closeAction = "关闭操作：";
// Do not close the mesh (leave it open)
tool.mask.closeActionNone = "无";
// Close the mesh with a hole-filling algorithm
tool.mask.closeActionFill = "填补";
// Close the mesh by adding a thickness on the surface
tool.mask.closeActionShell = "抽壳";
// Close the mesh by using the layer data as a difference thickness
tool.mask.closeActionLayer = "层";
tool.mask.closeAction.help = "- 无
仅分离蒙版区域，并且不封闭对象。

- 填补
孔洞会被填补并光滑。
不要在平面上使用。

- Shell
通过增加厚度的方式来封闭图形。

- 图层
提取图层差异（仅限图层子菜单）。";

// Transform/Matrix
tool.matrix = "坐标";
// The target of the transform is either the Matrix or the Vertex of the object
tool.matrix.apply = "目标";
// Automatic
tool.matrix.apply.auto = "自动选择";
// Transform the object alone (the children stands still)
tool.matrix.apply.object = "基于对象";
// Auto apply the transform on the vertices
tool.matrix.apply.vertex = "基于顶点";
// Transform the object and its children
tool.matrix.apply.group = "组";
tool.matrix.apply.help = "-- 自动
默认情况下，这和“组合”选项类似。
如果网格已有蒙版，或者启用了变换工具对称，这会和“顶点”效果相似。

-- 顶点
您可以尝试转换顶点，但这对于未转换为可编辑状态的基本体不起作用。
这也会影响实例。

-- 对象
仅移动对象而忽略对称性和蒙版。
仅移动已编辑节点，不移动子项。

-- 组合
移动节点，忽略对称性和蒙版。层级中其他节点也会被转换。";
// Operation on the mesh
tool.matrix.action = "操作";
tool.matrix.action.help = "- 返回原点
将对象移回原位。

- 重设
重设对象的所有变换。

- 烘焙
重新记录对象变换后的顶点坐标。在视觉上什么都不会改变。";
tool.matrix.translation = "位移";
tool.matrix.rotation = "旋转";
tool.matrix.scale = "缩放";
// Synonym: shear, https://en.wikipedia.org/wiki/Shear_matrix or https://en.wikipedia.org/wiki/Shear_mapping
tool.matrix.skew = "剪切";
tool.matrix.uniformScale = "等比缩放";
tool.matrix.uniformScale.help = "应用不支持非等比缩放的对象变换，因此将用顶点变换替代。";
tool.matrix.moveToOrigin = "返回原点";
tool.matrix.resetTransform = "重设";
// Synonym: Apply (transform)
tool.matrix.bakeTransform = "烘焙";

tool.transform.tip = "Single tap with second finger to switch mode";

// Size of the gizmo
tool.gizmo.size = "部件尺寸";
// When enabled, tapping one the gizmo widget will open a numerical input popup
tool.gizmo.allowInput = "数值输入";
tool.gizmo.allowInput.help = "Allow numerical input when tapping one of the gizmo widget";
// Angle threshold
tool.gizmo.linearRollThreshold = "线性旋转阈值";
tool.gizmo.linearRollThreshold.help = "此参数可影响模型旋转时的“跟手程度”。

当旋转角度超过设定值后，将会切换到圆形旋转模式。

如果您更习惯以前的线性旋转模式（切线方向），可以将角度设置为90°。";
// Partially hide/fade the gizmo when we interact with it
tool.gizmo.autoHide = "自动隐藏";
tool.gizmo.tap = "单击改变视图中心点";
tool.gizmo.tap.help = "此选项仅在自定义坐标原点模式下有效（默认禁用）。

- 无
点击对象后无任何操作。

- 点击
仅在第一次点击对象时改变原点。

- 平均
将在圆点坐标设置在前两次点击直线的中点。";
tool.gizmo.tapNone = "无";
tool.gizmo.tapFirstHit = "点击";
tool.gizmo.tapMiddleStab = "中点";

// The lathe generator is a vertical line and cannot be rotated
tool.lathe.axisFixed = "固定位置";

// Fill the object's hole
tool.hole = "孔洞填补";
tool.hole.fillHoles = "填补孔洞";
// synonym: Alternative method
tool.hole.bridges = "屏幕空间的布尔值";
tool.hole.bridges.help = "启用此选项后。您可以用裁切的方式在物体上打洞。
裁切效果也会更加接近于您所绘制的形状。";
tool.hole.threshold = "填充阈值";
tool.hole.threshold.help = "调整该值以获得更好的填充效果。";
tool.hole.smoothing = "平滑孔洞";

tool.smudge.quality = "质量";
tool.smudge.quality.help = "此选项可改变投影的分辨率，将该值调低可提高笔刷速度。";

// Shape for the tools: Trim / Split / Project / SelMask
tool.shape = "形状";
// Force the rectangle selection to be a square
tool.shape.rectangleSquare = "正方形";
// The selection rectangle will be centered around the cursor
tool.shape.rectangleCentered = "中心";
// Force the ellipse selection to be a circle
tool.shape.ellipseCircle = "圆形";
// The selection ellipse will be centered around the cursor
tool.shape.ellipseCentered = "中心";
// Rotate by step (angle value)
tool.shape.lineRotateStep = "旋转角度";

// Show a yellow dot on the golden ratio point
tool.measure.goldenRatio = "显示黄金分割比";

// Topology
topology = "拓扑";
// Synynom: detail value, density
topology.dynamic.detail = "细节等级";
// See glossary
topology.multires = "多重网格";
topology.multires.help = "此功能可保留对象的不同分辨率。

您可以在低分辨率对物体进行修改，之后在高分辨率查看并进一步更改细节效果。

图层在不同分辨率下都可用。";
// Synonym: Unsubdivide, Un-subdivide
topology.multires.reverse = "取消分割";
topology.multires.reverse.confirm = "无法再进一步简化模型。

当前对象的拓扑无法再进一步细分。";
topology.multires.subdivide = "细分";
topology.multires.subdivide.confirm = "该对象将会产生 $0M 个顶点，您确定要继续吗？";
// Prevents the user from subdivide the object again, a warning is displayed (with a UI link to increase this limit)
topology.multires.subdivide.limit = "超过细分限制，请前往$0提高限制";
topology.multires.deleteLower = "删除低模";
topology.multires.deleteHigher = "删除高模";
topology.multires.keepTriangles = "保留三角形";
// Navigate toward multiple resolutions (go to higher level)
topology.multires.up = "";
// Navigate toward multiple resolutions (go to lower level)
topology.multires.down = "";
// Synonym: Flat subdivision
topology.multires.linear = "平面细分";
topology.multires.linear.help = "直接细分网格，不应用平滑。";
// Create a new object by recomputing a new topology, by using voxels (see Glossary)
topology.voxel = "体素网格重构";
topology.voxel.help = "此功能可重构对象的网格，使其变得更加整齐。

如对象未封闭，则会先填充孔洞。

图层在应用后会重新投影，但质量会受到影响。";
topology.voxel.resolution = "分辨率";
topology.voxel.remesh = "重构";
topology.voxel.sharp = "保留硬边";
topology.voxel.sharp.help = "该功能主要用于几何构造比较简单的对象。

可能会使重构结果造成一些失真。";
topology.voxel.subLevel = "多重网格等级";
topology.voxel.subLevel.help = "此功能可以从重构的结果中生成多个不同分辨率的对象。

能够在保留较低分辨率对象的同时，拥有更快的运行速度。
如果重构分辨率过高的话，可能会无法生成多重网格或者失去一些细节。";
// Dynamic topology (DynTopo)
topology.surface.remesh = "重构";
topology.surface.detail = "分辨率";
topology.surface.detail.help = "不同于体素网格重构，表面网格重构不需要封闭对象。

此功能还支持遮罩，可以保护您不希望被更改拓扑的部分。

图层不会受到影响。";
topology.surface.method = "模式";
// Uniformisation means we can both add and remove triangles/quads
topology.surface.method.uniformisation = "标准";
// We can only add triangles/quads (synonym: Refine)
topology.surface.method.subdivision = "细分";
// We can only remove triangles/quads (synonym: Simplify)
topology.surface.method.decimation = "简化";
topology.surface.method.help = "不同模式的影响：
- 标准：智能判断
- 细分：增加细节
- 简化：移除细节";
topology.surface.useMasking = "保护蒙版区域";
topology.surface.useMasking.help = "The masked areas will protect the topology from being changed.";
topology.surface.extrapolate = "顶点扩张";
// DynTopo
topology.dynamic = "动态网格";
topology.dynamic.activate = "启用";
topology.dynamic.activate.help = "启用此功能可以让您在雕刻过程中实时增删网格。

开启此功能可能会对性能产生较大影响。

图层不会受到影响。";
topology.dynamic.method = "细节等级模式";
topology.dynamic.method.zoom = "缩放";
topology.dynamic.method.radius = "半径";
topology.dynamic.method.constant = "网格";
topology.dynamic.method.help = "
-- 缩放
详细程度取决于您离表面有多远。

-- 半径
工具的半径决定了细节的数量。

-- 常数
细节是固定的，细节值也与体素滑块共享。";
topology.dynamic.quality = "偏向于…";
topology.dynamic.quality.help = "性能模式特性如下：
- 在雕刻前会对模型进行细分，可以减少您在雕刻过程中产生的伪像。
- 无法逐步应用细化功能，如果您雕刻非常小的细节或进行快速笔触，则拓扑将始终正确进行细化。

如果您希望使用性能模式，可以考虑在设置面板中开启“局部雕刻”功能。";
topology.dynamic.quality.speed = "速度";
topology.dynamic.quality.quality = "性能";
// Whether the pencil pressure can impact the level of detail
topology.dynamic.usePressure = "在半径上使用压感";
topology.dynamic.usePressure.help = "如果您想让笔压对工具半径的影响也影响到细节层次，请启用此选项。";
// Decimate
topology.decimate.title = "成型简化";
topology.decimate.title.help = "减少多边形的数量，尽量保留更多的细节。

如果你想输出用于3D打印，这个功能会很有用。
但是，如果你想继续雕刻，你可能不应该使用它，因为它可能产生不均匀的三角形。

注意，蒙版区域不会被切除。";
// Synonym: Simplify (Decimate reduce the number of triangles/quads while retaining details as much as possible)
topology.decimate = "网格简化";
topology.decimateTargetFaces = "目标面数";
topology.decimatePaintWeight = "保存绘画";
topology.decimatePaintWeight.help = "较高的数值可以对绘画的细节边缘有所保护。

如果并不进行绘画，可以将该值设置为0。";
topology.decimateUniform = "网格均匀化";
topology.decimateUniform.help = "该参数值越高，优化输出的三角面就越统一。";
// topology.decimatePreserveBorders = "Preserve borders";
// topology.decimatePreserveBorders.help = "Do not decimate the border of the mesh.";

// Unwrapping means compute UV (texture coordinates), it allows the object to receive on texture (wrap the texturing on the object)
topology.uv.title = "UV自动展开";
// UV Unwrapping
topology.uvAtlas = "展开UV";
// The operation can be very slow
topology.uvAtlas.warning = "可能需要等待很长时间。
仅限于顶点数小于100k的对象。";
// UV Unwrapping (BFF best left untranslated, stands for Boundary First Flattening)
topology.uvBFF = "BFF展开";
// Handles are topological holes (synonym: genus, hole)
topology.uvBFF.warning = "Can have overlaps if the mesh has handles!";
// Synonym: Point count? Singularity count ?
topology.uvBFFCones = "锥体数量";
topology.uvBFFCones.help = "数值越高，复杂对象失真越小。

数值越高，需要计算的时间越长。";
topology.uvDelete = "删除UV";

// Transfer the vertex painting in the texture
topology.bake = "烘焙顶点绘图";
topology.bake.help = "将顶点绘制转换为纹理。

此过程中顶点颜色将重设。";
topology.bakeResolution = "分辨率";

// Reset key-bindings/shortcuts
binding.reset = "重设键位绑定";
// Same as Color Picker but it pick the material (color, roughness, metalness, etc)
binding.materialPicker = "材质选取器";
// Edit the tool brush size/radius
binding.editRadius = "工具半径";
// Edit the tool brush size/radius
binding.editIntensity = "工具强度";
// Snap the camera
binding.viewFront = "主视图";
// Snap the camera
binding.viewLeft = "左视图";
// Snap the camera
binding.viewTop = "俯视图";
// Move/Translate the view
binding.panLeft = "向左平移（视图）";
// Move/Translate the view
binding.panRight = "向右平移（视图）";
// Move/Translate the view
binding.panForward = "向前平移（视图）";
// Move/Translate the view
binding.panBackward = "向后平移（视图）";
// Move/Translate the view
binding.panUp = "向上平移（视图）";
// Move/Translate the view
binding.panDown = "向下平移（视图）";
// Snap the view (while rotating)
binding.snapViewOnRotate = "切换视图（旋转时）";
// Open a Nomad internal project (replace current scene)
binding.project.open = "打开（项目）";
// Open a Nomad internal project (add it to the current scene)
binding.project.add = "添加（项目）";
// Import an external scene file (replace current scene)
binding.import.open = "打开（导入）";
// Import an external scene file (add it to the current scene)
binding.import.add = "添加（导入）";
// Select all the objects in the scene
binding.selectAll = "全选";
// Rotate environment and the lighting
binding.rotateLighting = "旋转照明";

// Privacy policy
privacyPolicy.title = "未收集数据";
privacyPolicy.reject = "不好";
// Hexanomad is the company name
privacyPolicy = "Hexanomad 不会从 Nomad Sculpt 收集任何数据。";

// version trial
version.buyWeb = "该版本仅供演示";
version.buyFull = "购买完整版本";
version.restorePurchase = "恢复购买";

version.trialHistory = "试用版本限制：仅允许4次以内的撤销或重做";
version.trialLayer = "Trial version: 1 layer per object";
version.trialOneProject = "试用版本限制：仅允许启用一个项目";
version.trialNoImport = "试用版本限制：不允许导入";
version.trialNoExport = "试用版本限制：不允许导出";

version.fullFeatures = "购买完整版本后您可以：
- 撤消或重做不受限制
- 图层数量不受限制
- 允许保存和载入
- 可以导入和导出文件";
